
ESTUDO_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08007a88  08007a88  00017a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800852c  0800852c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800852c  0800852c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800852c  0800852c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200001e8  0800871c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800871c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f7d  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2d  00000000  00000000  0002a18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea2  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6ea  00000000  00000000  00044dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848ca  00000000  00000000  0004f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038bc  00000000  00000000  000d3dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a6c 	.word	0x08007a6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007a6c 	.word	0x08007a6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_UARTEx_RxEventCallback>:
 * @param
 * @param
 * @retval ***NONE***
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
	/* Prevent unused argument(s) compilation warning */

	if (huart->Instance == USART3) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d135      	bne.n	8000c5a <HAL_UARTEx_RxEventCallback+0x82>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000bee:	2110      	movs	r1, #16
 8000bf0:	481d      	ldr	r0, [pc, #116]	; (8000c68 <HAL_UARTEx_RxEventCallback+0x90>)
 8000bf2:	f001 f90f 	bl	8001e14 <HAL_GPIO_TogglePin>
		HAL_UART_DMAPause(&huart3);
 8000bf6:	481d      	ldr	r0, [pc, #116]	; (8000c6c <HAL_UARTEx_RxEventCallback+0x94>)
 8000bf8:	f001 fe09 	bl	800280e <HAL_UART_DMAPause>
		for (int i = 0; i < 11; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e018      	b.n	8000c34 <HAL_UARTEx_RxEventCallback+0x5c>
			if (!memcmp(DMA_RX_Buffer_3 + i, fistTERM, strlen(fistTERM))) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c06:	189c      	adds	r4, r3, r2
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c0a:	681d      	ldr	r5, [r3, #0]
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fa9d 	bl	8000150 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f002 fadf 	bl	80031e0 <memcmp>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <HAL_UARTEx_RxEventCallback+0x56>
				LORA_ReceivedCallback(DMA_RX_Buffer_3);
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c2a:	f000 f83f 	bl	8000cac <LORA_ReceivedCallback>
		for (int i = 0; i < 11; i++)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	dde3      	ble.n	8000c02 <HAL_UARTEx_RxEventCallback+0x2a>

			}
		HAL_UART_DMAResume(&huart3);
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_UARTEx_RxEventCallback+0x94>)
 8000c3c:	f001 fe83 	bl	8002946 <HAL_UART_DMAResume>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 8000c40:	2246      	movs	r2, #70	; 0x46
 8000c42:	490b      	ldr	r1, [pc, #44]	; (8000c70 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UARTEx_RxEventCallback+0x94>)
 8000c46:	f001 ff0b 	bl	8002a60 <HAL_UARTEx_ReceiveToIdle_DMA>
		DMA_RX_BUFFER_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0204 	bic.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bdb0      	pop	{r4, r5, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004800 	.word	0x40004800
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	200002e4 	.word	0x200002e4
 8000c70:	20000204 	.word	0x20000204
 8000c74:	20000000 	.word	0x20000000
 8000c78:	2000032c 	.word	0x2000032c

08000c7c <USART_Init>:
 * @brief
 * @param
 * @param
 * @retval ***NONE***
 */
void USART_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 8000c80:	2246      	movs	r2, #70	; 0x46
 8000c82:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <USART_Init+0x24>)
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <USART_Init+0x28>)
 8000c86:	f001 feeb 	bl	8002a60 <HAL_UARTEx_ReceiveToIdle_DMA>
	DMA_RX_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <USART_Init+0x2c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <USART_Init+0x2c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0204 	bic.w	r2, r2, #4
 8000c98:	601a      	str	r2, [r3, #0]
//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2, DMA_RX_BUFFER_SIZE);
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000204 	.word	0x20000204
 8000ca4:	200002e4 	.word	0x200002e4
 8000ca8:	2000032c 	.word	0x2000032c

08000cac <LORA_ReceivedCallback>:

/* USER CODE END PV */

/* Private functions ------------------------------------------------------------*/
/* USER CODE BEGIN PF */
void LORA_ReceivedCallback(uint8_t buffer[50]) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	int posicao_inicial = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
	int posicao_final = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 70; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	e010      	b.n	8000ce4 <LORA_ReceivedCallback+0x38>
		if (!memcmp(buffer + i, "AT+", 3)) {
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	493a      	ldr	r1, [pc, #232]	; (8000db4 <LORA_ReceivedCallback+0x108>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 fa87 	bl	80031e0 <memcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <LORA_ReceivedCallback+0x32>
			posicao_inicial = i;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000cdc:	e005      	b.n	8000cea <LORA_ReceivedCallback+0x3e>
	for (int i = 0; i < 70; i++) {
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2b45      	cmp	r3, #69	; 0x45
 8000ce8:	ddeb      	ble.n	8000cc2 <LORA_ReceivedCallback+0x16>
		}
	}
	for (int i = posicao_inicial; i < 70; i++) {
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	e011      	b.n	8000d14 <LORA_ReceivedCallback+0x68>
		if (!memcmp(buffer + i, "<OK>", 4)) {
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	492f      	ldr	r1, [pc, #188]	; (8000db8 <LORA_ReceivedCallback+0x10c>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fa70 	bl	80031e0 <memcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <LORA_ReceivedCallback+0x62>
			posicao_final = i + 4;
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	623b      	str	r3, [r7, #32]
			break;
 8000d0c:	e005      	b.n	8000d1a <LORA_ReceivedCallback+0x6e>
	for (int i = posicao_inicial; i < 70; i++) {
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	3301      	adds	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2b45      	cmp	r3, #69	; 0x45
 8000d18:	ddea      	ble.n	8000cf0 <LORA_ReceivedCallback+0x44>
		}
	}
	if (posicao_inicial != 0 && posicao_final != 0) {
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d035      	beq.n	8000d8c <LORA_ReceivedCallback+0xe0>
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d032      	beq.n	8000d8c <LORA_ReceivedCallback+0xe0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000d26:	2102      	movs	r1, #2
 8000d28:	4824      	ldr	r0, [pc, #144]	; (8000dbc <LORA_ReceivedCallback+0x110>)
 8000d2a:	f001 f873 	bl	8001e14 <HAL_GPIO_TogglePin>
		for (int i = posicao_inicial; i < 100; i++) {
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e016      	b.n	8000d62 <LORA_ReceivedCallback+0xb6>
			if (i <= posicao_final + 1)
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	3301      	adds	r3, #1
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dc09      	bgt.n	8000d52 <LORA_ReceivedCallback+0xa6>
				LORA_UART_BUFFER[i - posicao_inicial] = buffer[i];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	441a      	add	r2, r3
 8000d44:	6979      	ldr	r1, [r7, #20]
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	1acb      	subs	r3, r1, r3
 8000d4a:	7811      	ldrb	r1, [r2, #0]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <LORA_ReceivedCallback+0x114>)
 8000d4e:	54d1      	strb	r1, [r2, r3]
 8000d50:	e004      	b.n	8000d5c <LORA_ReceivedCallback+0xb0>
			else
				LORA_UART_BUFFER[i] = '\000';
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <LORA_ReceivedCallback+0x114>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	4413      	add	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
		for (int i = posicao_inicial; i < 100; i++) {
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	dde5      	ble.n	8000d34 <LORA_ReceivedCallback+0x88>
		}
		LORA_STATUS_RECEIVE = LORA_OK;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <LORA_ReceivedCallback+0x118>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e007      	b.n	8000d84 <LORA_ReceivedCallback+0xd8>
			buffer[i] = '\0';
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	3301      	adds	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	2b0e      	cmp	r3, #14
 8000d88:	ddf4      	ble.n	8000d74 <LORA_ReceivedCallback+0xc8>
		return;
 8000d8a:	e010      	b.n	8000dae <LORA_ReceivedCallback+0x102>
	}
	for (int i = 0; i < 15; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e007      	b.n	8000da2 <LORA_ReceivedCallback+0xf6>
		buffer[i] = '\0';
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; i++)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b0e      	cmp	r3, #14
 8000da6:	ddf4      	ble.n	8000d92 <LORA_ReceivedCallback+0xe6>
	LORA_STATUS_RECEIVE = LORA_FAILED;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LORA_ReceivedCallback+0x118>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
}
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	08007a98 	.word	0x08007a98
 8000db8:	08007a9c 	.word	0x08007a9c
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	2000024c 	.word	0x2000024c
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <LORA_TransmitCommand>:

LoRa_StatusTypeDef LORA_TransmitCommand(uint16_t _Timeout) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_TXcommand,
			strlen((char*) AT_TXcommand), _Timeout) != HAL_OK) {
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <LORA_TransmitCommand+0x38>)
 8000dd4:	f7ff f9bc 	bl	8000150 <strlen>
 8000dd8:	4603      	mov	r3, r0
	if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_TXcommand,
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <LORA_TransmitCommand+0x38>)
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <LORA_TransmitCommand+0x3c>)
 8000de2:	f001 fc91 	bl	8002708 <HAL_UART_Transmit>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <LORA_TransmitCommand+0x2e>
		HAL_Delay(20);
 8000dec:	2014      	movs	r0, #20
 8000dee:	f000 fb55 	bl	800149c <HAL_Delay>
		return LORA_FAILED;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <LORA_TransmitCommand+0x30>
	}
	return LORA_OK;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200002b0 	.word	0x200002b0
 8000e04:	200002e4 	.word	0x200002e4

08000e08 <AT_SystemReboot>:
 * @tparam AT+RESET <ENTER>
 * @tparam AT+RESET channels<ENTER>
 * @param _Mode: Modo de reinicialização
 * @retval Status de execução do comando
 */
LoRa_StatusTypeDef AT_SystemReboot(LoRa_SystemRebootModeTypeDef _Mode) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	switch (_Mode) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <AT_SystemReboot+0x16>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d00d      	beq.n	8000e38 <AT_SystemReboot+0x30>
		sprintf((char*) AT_TXcommand, "AT+RESET channels\r\n");
		if (LORA_TransmitCommand(300) != LORA_OK)
			return LORA_FAILED;
		break;
	default:
		break;
 8000e1c:	e01c      	b.n	8000e58 <AT_SystemReboot+0x50>
		sprintf((char*) AT_TXcommand, "AT+RESET\r\n");
 8000e1e:	4911      	ldr	r1, [pc, #68]	; (8000e64 <AT_SystemReboot+0x5c>)
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <AT_SystemReboot+0x60>)
 8000e22:	f003 f867 	bl	8003ef4 <siprintf>
		if (LORA_TransmitCommand(300) != LORA_OK)
 8000e26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e2a:	f7ff ffcd 	bl	8000dc8 <LORA_TransmitCommand>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d00e      	beq.n	8000e52 <AT_SystemReboot+0x4a>
			return LORA_FAILED;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e010      	b.n	8000e5a <AT_SystemReboot+0x52>
		sprintf((char*) AT_TXcommand, "AT+RESET channels\r\n");
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <AT_SystemReboot+0x64>)
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <AT_SystemReboot+0x60>)
 8000e3c:	f003 f85a 	bl	8003ef4 <siprintf>
		if (LORA_TransmitCommand(300) != LORA_OK)
 8000e40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e44:	f7ff ffc0 	bl	8000dc8 <LORA_TransmitCommand>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d003      	beq.n	8000e56 <AT_SystemReboot+0x4e>
			return LORA_FAILED;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e003      	b.n	8000e5a <AT_SystemReboot+0x52>
		break;
 8000e52:	bf00      	nop
 8000e54:	e000      	b.n	8000e58 <AT_SystemReboot+0x50>
		break;
 8000e56:	bf00      	nop
	}
	return LORA_OK;
 8000e58:	2301      	movs	r3, #1
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08007fd8 	.word	0x08007fd8
 8000e68:	200002b0 	.word	0x200002b0
 8000e6c:	08007fe4 	.word	0x08007fe4

08000e70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e74:	f000 fab0 	bl	80013d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e78:	f000 f812 	bl	8000ea0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e7c:	f000 f89e 	bl	8000fbc <MX_GPIO_Init>
	MX_DMA_Init();
 8000e80:	f000 f87e 	bl	8000f80 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000e84:	f000 f852 	bl	8000f2c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	USART_Init();
 8000e88:	f7ff fef8 	bl	8000c7c <USART_Init>

	/* USER CODE END 2 */
	chanel.LoRa_Channel = 1;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <main+0x2c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	801a      	strh	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	AT_SystemReboot(AT_REBOOT_SYSTEM);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ffb8 	bl	8000e08 <AT_SystemReboot>
//	AT_EncryptionConfiguration(AT_OPERATION_READ, &status);
//	Value = 0;
//	AT_RepeatUnconfirmedUplink(AT_OPERATION_WRITE, &Value);
//	Value = 4400;
//	AT_RepeatUnconfirmedUplink(AT_OPERATION_READ, &Value);
	while (1) {
 8000e98:	e7fe      	b.n	8000e98 <main+0x28>
 8000e9a:	bf00      	nop
 8000e9c:	20000370 	.word	0x20000370

08000ea0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b090      	sub	sp, #64	; 0x40
 8000ea4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 f9a6 	bl	8003200 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ede:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 ffad 	bl	8001e48 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x58>
		Error_Handler();
 8000ef4:	f000 f8ac 	bl	8001050 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f08:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fa1a 	bl	800234c <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x82>
		Error_Handler();
 8000f1e:	f000 f897 	bl	8001050 <Error_Handler>
	}
}
 8000f22:	bf00      	nop
 8000f24:	3740      	adds	r7, #64	; 0x40
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART3_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART3_UART_Init+0x4c>)
 8000f64:	f001 fb80 	bl	8002668 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000f6e:	f000 f86f 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200002e4 	.word	0x200002e4
 8000f7c:	40004800 	.word	0x40004800

08000f80 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_DMA_Init+0x38>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <MX_DMA_Init+0x38>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_DMA_Init+0x38>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200d      	movs	r0, #13
 8000fa4:	f000 fb75 	bl	8001692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000fa8:	200d      	movs	r0, #13
 8000faa:	f000 fb8e 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_GPIO_Init+0x8c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <MX_GPIO_Init+0x8c>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_GPIO_Init+0x8c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_GPIO_Init+0x8c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <MX_GPIO_Init+0x8c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_GPIO_Init+0x8c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_GPIO_Init+0x8c>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <MX_GPIO_Init+0x8c>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_GPIO_Init+0x8c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4,
 8001018:	2200      	movs	r2, #0
 800101a:	2113      	movs	r1, #19
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <MX_GPIO_Init+0x90>)
 800101e:	f000 fee1 	bl	8001de4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8001022:	2313      	movs	r3, #19
 8001024:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_GPIO_Init+0x90>)
 800103a:	f000 fd4f 	bl	8001adc <HAL_GPIO_Init>

}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010800 	.word	0x40010800

08001050 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>
	...

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <HAL_MspInit+0x5c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_MspInit+0x5c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_MspInit+0x60>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_MspInit+0x60>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <HAL_UART_MspInit+0xd8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d157      	bne.n	8001190 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e0:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_UART_MspInit+0xdc>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a2d      	ldr	r2, [pc, #180]	; (800119c <HAL_UART_MspInit+0xdc>)
 80010e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_UART_MspInit+0xdc>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_UART_MspInit+0xdc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_UART_MspInit+0xdc>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_UART_MspInit+0xdc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	481e      	ldr	r0, [pc, #120]	; (80011a0 <HAL_UART_MspInit+0xe0>)
 8001126:	f000 fcd9 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800112a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800112e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0xe0>)
 8001140:	f000 fccc 	bl	8001adc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_UART_MspInit+0xe8>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 800116a:	2220      	movs	r2, #32
 800116c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001176:	f000 fac3 	bl	8001700 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001180:	f7ff ff66 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
 800118a:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_UART_MspInit+0xe4>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004800 	.word	0x40004800
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	2000032c 	.word	0x2000032c
 80011a8:	40020030 	.word	0x40020030

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f937 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DMA1_Channel3_IRQHandler+0x10>)
 8001202:	f000 fb37 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000032c 	.word	0x2000032c

08001210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <_kill>:

int _kill(int pid, int sig)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001228:	f001 ffb0 	bl	800318c <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	2216      	movs	r2, #22
 8001230:	601a      	str	r2, [r3, #0]
	return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_exit>:

void _exit (int status)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001246:	f04f 31ff 	mov.w	r1, #4294967295
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffe7 	bl	800121e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001250:	e7fe      	b.n	8001250 <_exit+0x12>

08001252 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e00a      	b.n	800127a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001264:	f3af 8000 	nop.w
 8001268:	4601      	mov	r1, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60ba      	str	r2, [r7, #8]
 8001270:	b2ca      	uxtb	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbf0      	blt.n	8001264 <_read+0x12>
	}

return len;
 8001282:	687b      	ldr	r3, [r7, #4]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e009      	b.n	80012b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf1      	blt.n	800129e <_write+0x12>
	}
	return len;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_close>:

int _close(int file)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_isatty>:

int _isatty(int file)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f001 ff1a 	bl	800318c <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20005000 	.word	0x20005000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000380 	.word	0x20000380
 800138c:	20000398 	.word	0x20000398

08001390 <Reset_Handler>:

/* Call the clock system initialization function.*/
#    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001392:	490c      	ldr	r1, [pc, #48]	; (80013c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013a8:	4c09      	ldr	r4, [pc, #36]	; (80013d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f001 feef 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff fd59 	bl	8000e70 <main>
  bx lr
 80013be:	4770      	bx	lr
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80013c8:	08008534 	.word	0x08008534
  ldr r2, =_sbss
 80013cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80013d0:	20000398 	.word	0x20000398

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x28>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f947 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fe32 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f95f 	bl	80016e6 <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f927 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000008 	.word	0x20000008
 800145c:	20000010 	.word	0x20000010
 8001460:	2000000c 	.word	0x2000000c

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000010 	.word	0x20000010
 8001484:	20000384 	.word	0x20000384

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000384 	.word	0x20000384

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff fff0 	bl	8001488 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffe0 	bl	8001488 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000010 	.word	0x20000010

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff90 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff2d 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff42 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff35 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e043      	b.n	800179e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_DMA_Init+0xa8>)
 800171e:	4413      	add	r3, r2
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_DMA_Init+0xac>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	009a      	lsls	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_DMA_Init+0xb0>)
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800174a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800174e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	bffdfff8 	.word	0xbffdfff8
 80017ac:	cccccccd 	.word	0xcccccccd
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_DMA_Start_IT+0x20>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e04b      	b.n	800186c <HAL_DMA_Start_IT+0xb8>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d13a      	bne.n	800185e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f937 	bl	8001a80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 020e 	orr.w	r2, r2, #14
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e00f      	b.n	800184c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 020a 	orr.w	r2, r2, #10
 800184a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e005      	b.n	800186a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001866:	2302      	movs	r3, #2
 8001868:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	2204      	movs	r2, #4
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d04f      	beq.n	800193c <HAL_DMA_IRQHandler+0xc8>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04a      	beq.n	800193c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0204 	bic.w	r2, r2, #4
 80018c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a66      	ldr	r2, [pc, #408]	; (8001a64 <HAL_DMA_IRQHandler+0x1f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d029      	beq.n	8001922 <HAL_DMA_IRQHandler+0xae>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a65      	ldr	r2, [pc, #404]	; (8001a68 <HAL_DMA_IRQHandler+0x1f4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <HAL_DMA_IRQHandler+0xaa>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a63      	ldr	r2, [pc, #396]	; (8001a6c <HAL_DMA_IRQHandler+0x1f8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01a      	beq.n	8001918 <HAL_DMA_IRQHandler+0xa4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a62      	ldr	r2, [pc, #392]	; (8001a70 <HAL_DMA_IRQHandler+0x1fc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d012      	beq.n	8001912 <HAL_DMA_IRQHandler+0x9e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a60      	ldr	r2, [pc, #384]	; (8001a74 <HAL_DMA_IRQHandler+0x200>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00a      	beq.n	800190c <HAL_DMA_IRQHandler+0x98>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5f      	ldr	r2, [pc, #380]	; (8001a78 <HAL_DMA_IRQHandler+0x204>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d102      	bne.n	8001906 <HAL_DMA_IRQHandler+0x92>
 8001900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001904:	e00e      	b.n	8001924 <HAL_DMA_IRQHandler+0xb0>
 8001906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800190a:	e00b      	b.n	8001924 <HAL_DMA_IRQHandler+0xb0>
 800190c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001910:	e008      	b.n	8001924 <HAL_DMA_IRQHandler+0xb0>
 8001912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001916:	e005      	b.n	8001924 <HAL_DMA_IRQHandler+0xb0>
 8001918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191c:	e002      	b.n	8001924 <HAL_DMA_IRQHandler+0xb0>
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	e000      	b.n	8001924 <HAL_DMA_IRQHandler+0xb0>
 8001922:	2304      	movs	r3, #4
 8001924:	4a55      	ldr	r2, [pc, #340]	; (8001a7c <HAL_DMA_IRQHandler+0x208>)
 8001926:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8094 	beq.w	8001a5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800193a:	e08e      	b.n	8001a5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2202      	movs	r2, #2
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d056      	beq.n	80019fa <HAL_DMA_IRQHandler+0x186>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d051      	beq.n	80019fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10b      	bne.n	800197c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 020a 	bic.w	r2, r2, #10
 8001972:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <HAL_DMA_IRQHandler+0x1f0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d029      	beq.n	80019da <HAL_DMA_IRQHandler+0x166>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_DMA_IRQHandler+0x1f4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d022      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x162>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <HAL_DMA_IRQHandler+0x1f8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x15c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <HAL_DMA_IRQHandler+0x1fc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d012      	beq.n	80019ca <HAL_DMA_IRQHandler+0x156>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_DMA_IRQHandler+0x200>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00a      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x150>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <HAL_DMA_IRQHandler+0x204>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d102      	bne.n	80019be <HAL_DMA_IRQHandler+0x14a>
 80019b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019bc:	e00e      	b.n	80019dc <HAL_DMA_IRQHandler+0x168>
 80019be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019c2:	e00b      	b.n	80019dc <HAL_DMA_IRQHandler+0x168>
 80019c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c8:	e008      	b.n	80019dc <HAL_DMA_IRQHandler+0x168>
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	e005      	b.n	80019dc <HAL_DMA_IRQHandler+0x168>
 80019d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d4:	e002      	b.n	80019dc <HAL_DMA_IRQHandler+0x168>
 80019d6:	2320      	movs	r3, #32
 80019d8:	e000      	b.n	80019dc <HAL_DMA_IRQHandler+0x168>
 80019da:	2302      	movs	r3, #2
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_DMA_IRQHandler+0x208>)
 80019de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d034      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019f8:	e02f      	b.n	8001a5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2208      	movs	r2, #8
 8001a00:	409a      	lsls	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d028      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x1e8>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d023      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 020e 	bic.w	r2, r2, #14
 8001a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
    }
  }
  return;
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
}
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40020008 	.word	0x40020008
 8001a68:	4002001c 	.word	0x4002001c
 8001a6c:	40020030 	.word	0x40020030
 8001a70:	40020044 	.word	0x40020044
 8001a74:	40020058 	.word	0x40020058
 8001a78:	4002006c 	.word	0x4002006c
 8001a7c:	40020000 	.word	0x40020000

08001a80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d108      	bne.n	8001ac0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001abe:	e007      	b.n	8001ad0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e169      	b.n	8001dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af0:	2201      	movs	r2, #1
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8158 	bne.w	8001dbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a9a      	ldr	r2, [pc, #616]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d05e      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b18:	4a98      	ldr	r2, [pc, #608]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d875      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b1e:	4a98      	ldr	r2, [pc, #608]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d058      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b24:	4a96      	ldr	r2, [pc, #600]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d86f      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b2a:	4a96      	ldr	r2, [pc, #600]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d052      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b30:	4a94      	ldr	r2, [pc, #592]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d869      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b36:	4a94      	ldr	r2, [pc, #592]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d04c      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a92      	ldr	r2, [pc, #584]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d863      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b42:	4a92      	ldr	r2, [pc, #584]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d046      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b48:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d85d      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d82a      	bhi.n	8001ba8 <HAL_GPIO_Init+0xcc>
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d859      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <HAL_GPIO_Init+0x80>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001bd7 	.word	0x08001bd7
 8001b60:	08001bb1 	.word	0x08001bb1
 8001b64:	08001bc3 	.word	0x08001bc3
 8001b68:	08001c05 	.word	0x08001c05
 8001b6c:	08001c0b 	.word	0x08001c0b
 8001b70:	08001c0b 	.word	0x08001c0b
 8001b74:	08001c0b 	.word	0x08001c0b
 8001b78:	08001c0b 	.word	0x08001c0b
 8001b7c:	08001c0b 	.word	0x08001c0b
 8001b80:	08001c0b 	.word	0x08001c0b
 8001b84:	08001c0b 	.word	0x08001c0b
 8001b88:	08001c0b 	.word	0x08001c0b
 8001b8c:	08001c0b 	.word	0x08001c0b
 8001b90:	08001c0b 	.word	0x08001c0b
 8001b94:	08001c0b 	.word	0x08001c0b
 8001b98:	08001c0b 	.word	0x08001c0b
 8001b9c:	08001c0b 	.word	0x08001c0b
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
 8001ba8:	4a79      	ldr	r2, [pc, #484]	; (8001d90 <HAL_GPIO_Init+0x2b4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bae:	e02c      	b.n	8001c0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e029      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e024      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e01f      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e01a      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bde:	2304      	movs	r3, #4
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e013      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	611a      	str	r2, [r3, #16]
          break;
 8001bf6:	e009      	b.n	8001c0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	615a      	str	r2, [r3, #20]
          break;
 8001c02:	e003      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          break;
 8001c0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d801      	bhi.n	8001c16 <HAL_GPIO_Init+0x13a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_Init+0x13e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d802      	bhi.n	8001c28 <HAL_GPIO_Init+0x14c>
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x152>
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	210f      	movs	r1, #15
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	6a39      	ldr	r1, [r7, #32]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80b1 	beq.w	8001dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5c:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2bc>)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a40      	ldr	r2, [pc, #256]	; (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3f      	ldr	r2, [pc, #252]	; (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_Init+0x1e8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <HAL_GPIO_Init+0x2c8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3d      	ldr	r2, [pc, #244]	; (8001da8 <HAL_GPIO_Init+0x2cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_Init+0x1e0>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e006      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e004      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cda:	492f      	ldr	r1, [pc, #188]	; (8001d98 <HAL_GPIO_Init+0x2bc>)
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	492c      	ldr	r1, [pc, #176]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4928      	ldr	r1, [pc, #160]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	4922      	ldr	r1, [pc, #136]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	491e      	ldr	r1, [pc, #120]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4918      	ldr	r1, [pc, #96]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4914      	ldr	r1, [pc, #80]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d021      	beq.n	8001db0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	490e      	ldr	r1, [pc, #56]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e021      	b.n	8001dbe <HAL_GPIO_Init+0x2e2>
 8001d7a:	bf00      	nop
 8001d7c:	10320000 	.word	0x10320000
 8001d80:	10310000 	.word	0x10310000
 8001d84:	10220000 	.word	0x10220000
 8001d88:	10210000 	.word	0x10210000
 8001d8c:	10120000 	.word	0x10120000
 8001d90:	10110000 	.word	0x10110000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40010c00 	.word	0x40010c00
 8001da4:	40011000 	.word	0x40011000
 8001da8:	40011400 	.word	0x40011400
 8001dac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_GPIO_Init+0x304>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4909      	ldr	r1, [pc, #36]	; (8001de0 <HAL_GPIO_Init+0x304>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f47f ae8e 	bne.w	8001af0 <HAL_GPIO_Init+0x14>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	372c      	adds	r7, #44	; 0x2c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43d9      	mvns	r1, r3
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	400b      	ands	r3, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	611a      	str	r2, [r3, #16]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e272      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8087 	beq.w	8001f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e68:	4b92      	ldr	r3, [pc, #584]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d00c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e74:	4b8f      	ldr	r3, [pc, #572]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d112      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5e>
 8001e80:	4b8c      	ldr	r3, [pc, #560]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	4b89      	ldr	r3, [pc, #548]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d06c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x12c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d168      	bne.n	8001f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e24c      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x76>
 8001eb0:	4b80      	ldr	r3, [pc, #512]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a7f      	ldr	r2, [pc, #508]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	e02e      	b.n	8001f1c <HAL_RCC_OscConfig+0xd4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x98>
 8001ec6:	4b7b      	ldr	r3, [pc, #492]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7a      	ldr	r2, [pc, #488]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b78      	ldr	r3, [pc, #480]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a77      	ldr	r2, [pc, #476]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e01d      	b.n	8001f1c <HAL_RCC_OscConfig+0xd4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0xbc>
 8001eea:	4b72      	ldr	r3, [pc, #456]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a71      	ldr	r2, [pc, #452]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6e      	ldr	r2, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e00b      	b.n	8001f1c <HAL_RCC_OscConfig+0xd4>
 8001f04:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b68      	ldr	r3, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a67      	ldr	r2, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d013      	beq.n	8001f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fab0 	bl	8001488 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff faac 	bl	8001488 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e200      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe4>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fa9c 	bl	8001488 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff fa98 	bl	8001488 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1ec      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x10c>
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d063      	beq.n	800204a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f82:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d11c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x18c>
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d116      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_RCC_OscConfig+0x176>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e1c0      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4939      	ldr	r1, [pc, #228]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	e03a      	b.n	800204a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fa51 	bl	8001488 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fea:	f7ff fa4d 	bl	8001488 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1a1      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4927      	ldr	r1, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff fa30 	bl	8001488 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7ff fa2c 	bl	8001488 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e180      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03a      	beq.n	80020cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d019      	beq.n	8002092 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7ff fa10 	bl	8001488 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff fa0c 	bl	8001488 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e160      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800208a:	2001      	movs	r0, #1
 800208c:	f000 face 	bl	800262c <RCC_Delay>
 8002090:	e01c      	b.n	80020cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff f9f6 	bl	8001488 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209e:	e00f      	b.n	80020c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff f9f2 	bl	8001488 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d908      	bls.n	80020c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e146      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	42420000 	.word	0x42420000
 80020bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e9      	bne.n	80020a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a6 	beq.w	8002226 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b8b      	ldr	r3, [pc, #556]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10d      	bne.n	8002106 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a87      	ldr	r2, [pc, #540]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]
 80020f6:	4b85      	ldr	r3, [pc, #532]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b82      	ldr	r3, [pc, #520]	; (8002310 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x4c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7e      	ldr	r2, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7ff f9b3 	bl	8001488 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7ff f9af 	bl	8001488 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	; 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e103      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b75      	ldr	r3, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x4c8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x312>
 800214c:	4b6f      	ldr	r3, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a6e      	ldr	r2, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	e02d      	b.n	80021b6 <HAL_RCC_OscConfig+0x36e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x334>
 8002162:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a69      	ldr	r2, [pc, #420]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a66      	ldr	r2, [pc, #408]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	e01c      	b.n	80021b6 <HAL_RCC_OscConfig+0x36e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x356>
 8002184:	4b61      	ldr	r3, [pc, #388]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a60      	ldr	r2, [pc, #384]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	4b5e      	ldr	r3, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a5d      	ldr	r2, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x36e>
 800219e:	4b5b      	ldr	r3, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a5a      	ldr	r2, [pc, #360]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d015      	beq.n	80021ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7ff f963 	bl	8001488 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7ff f95f 	bl	8001488 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0b1      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ee      	beq.n	80021c6 <HAL_RCC_OscConfig+0x37e>
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff f94d 	bl	8001488 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7ff f949 	bl	8001488 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e09b      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b3c      	ldr	r3, [pc, #240]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a3b      	ldr	r2, [pc, #236]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d061      	beq.n	8002300 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d146      	bne.n	80022d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff f91d 	bl	8001488 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7ff f919 	bl	8001488 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e06d      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d108      	bne.n	800228c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4921      	ldr	r1, [pc, #132]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b1f      	ldr	r3, [pc, #124]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a19      	ldr	r1, [r3, #32]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	430b      	orrs	r3, r1
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff f8ed 	bl	8001488 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff f8e9 	bl	8001488 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e03d      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46a>
 80022d0:	e035      	b.n	800233e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff f8d6 	bl	8001488 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f8d2 	bl	8001488 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e026      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x498>
 80022fe:	e01e      	b.n	800233e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e019      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
 800230c:	40021000 	.word	0x40021000
 8002310:	40007000 	.word	0x40007000
 8002314:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x500>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	429a      	cmp	r2, r3
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d0      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4965      	ldr	r1, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e073      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4936      	ldr	r1, [pc, #216]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7ff f824 	bl	8001488 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7ff f820 	bl	8001488 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e053      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d210      	bcs.n	800249c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1cc>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe ff82 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	0800805c 	.word	0x0800805c
 8002518:	20000008 	.word	0x20000008
 800251c:	2000000c 	.word	0x2000000c

08002520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d002      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x30>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x36>
 800254e:	e027      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	e027      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0c5b      	lsrs	r3, r3, #17
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e004      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	613b      	str	r3, [r7, #16]
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025a2:	613b      	str	r3, [r7, #16]
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	693b      	ldr	r3, [r7, #16]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	08008074 	.word	0x08008074
 80025c0:	08008084 	.word	0x08008084
 80025c4:	003d0900 	.word	0x003d0900

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b02      	ldr	r3, [pc, #8]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000008 	.word	0x20000008

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e0:	f7ff fff2 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	0800806c 	.word	0x0800806c

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffde 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0adb      	lsrs	r3, r3, #11
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	0800806c 	.word	0x0800806c

0800262c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <RCC_Delay+0x34>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <RCC_Delay+0x38>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0a5b      	lsrs	r3, r3, #9
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002648:	bf00      	nop
  }
  while (Delay --);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f9      	bne.n	8002648 <RCC_Delay+0x1c>
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000008 	.word	0x20000008
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e042      	b.n	8002700 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fd16 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fcdf 	bl	8003070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b20      	cmp	r3, #32
 8002726:	d16d      	bne.n	8002804 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_UART_Transmit+0x2c>
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e066      	b.n	8002806 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2221      	movs	r2, #33	; 0x21
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002746:	f7fe fe9f 	bl	8001488 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d108      	bne.n	8002774 <HAL_UART_Transmit+0x6c>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800277c:	e02a      	b.n	80027d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fadf 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e036      	b.n	8002806 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3302      	adds	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e007      	b.n	80027c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1cf      	bne.n	800277e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 faaf 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e006      	b.n	8002806 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800280e:	b480      	push	{r7}
 8002810:	b09d      	sub	sp, #116	; 0x74
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	66fb      	str	r3, [r7, #108]	; 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b21      	cmp	r3, #33	; 0x21
 800283a:	d11c      	bne.n	8002876 <HAL_UART_DMAPause+0x68>
 800283c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d019      	beq.n	8002876 <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002862:	65ba      	str	r2, [r7, #88]	; 0x58
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e5      	bne.n	8002842 <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b22      	cmp	r3, #34	; 0x22
 8002896:	d150      	bne.n	800293a <HAL_UART_DMAPause+0x12c>
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d04d      	beq.n	800293a <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	667b      	str	r3, [r7, #100]	; 0x64
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028be:	647a      	str	r2, [r7, #68]	; 0x44
 80028c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3314      	adds	r3, #20
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	623b      	str	r3, [r7, #32]
   return(result);
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	663b      	str	r3, [r7, #96]	; 0x60
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028f2:	633a      	str	r2, [r7, #48]	; 0x30
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	60fb      	str	r3, [r7, #12]
   return(result);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800291c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3314      	adds	r3, #20
 8002924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	617b      	str	r3, [r7, #20]
   return(result);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e5      	bne.n	8002906 <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3774      	adds	r7, #116	; 0x74
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8002946:	b480      	push	{r7}
 8002948:	b09d      	sub	sp, #116	; 0x74
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b21      	cmp	r3, #33	; 0x21
 8002958:	d119      	bne.n	800298e <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800296a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3314      	adds	r3, #20
 8002978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800297a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800297c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b22      	cmp	r3, #34	; 0x22
 8002998:	d15c      	bne.n	8002a54 <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d019      	beq.n	80029ec <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80029de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80029e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e5      	bne.n	80029b8 <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a0c:	637a      	str	r2, [r7, #52]	; 0x34
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e5      	bne.n	80029ec <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3314      	adds	r3, #20
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	e853 3f00 	ldrex	r3, [r3]
 8002a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a36:	663b      	str	r3, [r7, #96]	; 0x60
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3314      	adds	r3, #20
 8002a3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a40:	623a      	str	r2, [r7, #32]
 8002a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a44:	69f9      	ldr	r1, [r7, #28]
 8002a46:	6a3a      	ldr	r2, [r7, #32]
 8002a48:	e841 2300 	strex	r3, r2, [r1]
 8002a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e5      	bne.n	8002a20 <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3774      	adds	r7, #116	; 0x74
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d14a      	bne.n	8002b10 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e043      	b.n	8002b12 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f9c3 	bl	8002e28 <UART_Start_Receive_DMA>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12c      	bne.n	8002b0a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d125      	bne.n	8002b04 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	627a      	str	r2, [r7, #36]	; 0x24
 8002af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6a39      	ldr	r1, [r7, #32]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002b02:	e002      	b.n	8002b0a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b0e:	e000      	b.n	8002b12 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3730      	adds	r7, #48	; 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09c      	sub	sp, #112	; 0x70
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d172      	bne.n	8002c52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	2200      	movs	r2, #0
 8002b70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b92:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e5      	bne.n	8002b72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3314      	adds	r3, #20
 8002bac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8002bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e5      	bne.n	8002ba6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	623b      	str	r3, [r7, #32]
   return(result);
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e5      	bne.n	8002bda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d119      	bne.n	8002c52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f023 0310 	bic.w	r3, r3, #16
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c3e:	61fa      	str	r2, [r7, #28]
 8002c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e5      	bne.n	8002c1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	2200      	movs	r2, #0
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d106      	bne.n	8002c6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c68:	f7fd ffb6 	bl	8000bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c6c:	e002      	b.n	8002c74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c70:	f7ff ff53 	bl	8002b1a <HAL_UART_RxCpltCallback>
}
 8002c74:	bf00      	nop
 8002c76:	3770      	adds	r7, #112	; 0x70
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7fd ff98 	bl	8000bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ca8:	e002      	b.n	8002cb0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ff3e 	bl	8002b2c <HAL_UART_RxHalfCpltCallback>
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b21      	cmp	r3, #33	; 0x21
 8002cea:	d108      	bne.n	8002cfe <UART_DMAError+0x46>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002cf8:	68b8      	ldr	r0, [r7, #8]
 8002cfa:	f000 f92f 	bl	8002f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b22      	cmp	r3, #34	; 0x22
 8002d1e:	d108      	bne.n	8002d32 <UART_DMAError+0x7a>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d2c:	68b8      	ldr	r0, [r7, #8]
 8002d2e:	f000 f93c 	bl	8002faa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d3e:	68b8      	ldr	r0, [r7, #8]
 8002d40:	f7ff fefd 	bl	8002b3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b090      	sub	sp, #64	; 0x40
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5c:	e050      	b.n	8002e00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d04c      	beq.n	8002e00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6c:	f7fe fb8c 	bl	8001488 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d241      	bcs.n	8002e00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d9c:	637a      	str	r2, [r7, #52]	; 0x34
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e5      	bne.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3314      	adds	r3, #20
 8002dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dd0:	623a      	str	r2, [r7, #32]
 8002dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	69f9      	ldr	r1, [r7, #28]
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e5      	bne.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e00f      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d09f      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3740      	adds	r7, #64	; 0x40
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b098      	sub	sp, #96	; 0x60
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2222      	movs	r2, #34	; 0x22
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	4a3e      	ldr	r2, [pc, #248]	; (8002f50 <UART_Start_Receive_DMA+0x128>)
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	4a3d      	ldr	r2, [pc, #244]	; (8002f54 <UART_Start_Receive_DMA+0x12c>)
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	4a3c      	ldr	r2, [pc, #240]	; (8002f58 <UART_Start_Receive_DMA+0x130>)
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	f7fe fc94 	bl	80017b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d019      	beq.n	8002ede <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eca:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e5      	bne.n	8002eaa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002efe:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	617b      	str	r3, [r7, #20]
   return(result);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f32:	627a      	str	r2, [r7, #36]	; 0x24
 8002f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6a39      	ldr	r1, [r7, #32]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3760      	adds	r7, #96	; 0x60
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	08002b51 	.word	0x08002b51
 8002f54:	08002c7d 	.word	0x08002c7d
 8002f58:	08002cb9 	.word	0x08002cb9

08002f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	61ba      	str	r2, [r7, #24]
 8002f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6979      	ldr	r1, [r7, #20]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	613b      	str	r3, [r7, #16]
   return(result);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e5      	bne.n	8002f64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002fa0:	bf00      	nop
 8002fa2:	3724      	adds	r7, #36	; 0x24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b095      	sub	sp, #84	; 0x54
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd2:	643a      	str	r2, [r7, #64]	; 0x40
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e5      	bne.n	8002fb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e5      	bne.n	8002fe6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	2b01      	cmp	r3, #1
 8003020:	d119      	bne.n	8003056 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	60bb      	str	r3, [r7, #8]
   return(result);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 0310 	bic.w	r3, r3, #16
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003042:	61ba      	str	r2, [r7, #24]
 8003044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	6979      	ldr	r1, [r7, #20]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	613b      	str	r3, [r7, #16]
   return(result);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e5      	bne.n	8003022 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003064:	bf00      	nop
 8003066:	3754      	adds	r7, #84	; 0x54
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
	...

08003070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030aa:	f023 030c 	bic.w	r3, r3, #12
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <UART_SetConfig+0x114>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7ff fa94 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7ff fa7c 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <UART_SetConfig+0x118>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	0119      	lsls	r1, r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <UART_SetConfig+0x118>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	4419      	add	r1, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a07      	ldr	r2, [pc, #28]	; (8003188 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	440a      	add	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013800 	.word	0x40013800
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <__errno>:
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <__errno+0x8>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	2600      	movs	r6, #0
 800319c:	4d0c      	ldr	r5, [pc, #48]	; (80031d0 <__libc_init_array+0x38>)
 800319e:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 80031a0:	1b64      	subs	r4, r4, r5
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	42a6      	cmp	r6, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	f004 fc60 	bl	8007a6c <_init>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4d0a      	ldr	r5, [pc, #40]	; (80031d8 <__libc_init_array+0x40>)
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <__libc_init_array+0x44>)
 80031b2:	1b64      	subs	r4, r4, r5
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	42a6      	cmp	r6, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c0:	4798      	blx	r3
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	4798      	blx	r3
 80031cc:	3601      	adds	r6, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	0800852c 	.word	0x0800852c
 80031d4:	0800852c 	.word	0x0800852c
 80031d8:	0800852c 	.word	0x0800852c
 80031dc:	08008530 	.word	0x08008530

080031e0 <memcmp>:
 80031e0:	b510      	push	{r4, lr}
 80031e2:	3901      	subs	r1, #1
 80031e4:	4402      	add	r2, r0
 80031e6:	4290      	cmp	r0, r2
 80031e8:	d101      	bne.n	80031ee <memcmp+0xe>
 80031ea:	2000      	movs	r0, #0
 80031ec:	e005      	b.n	80031fa <memcmp+0x1a>
 80031ee:	7803      	ldrb	r3, [r0, #0]
 80031f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d001      	beq.n	80031fc <memcmp+0x1c>
 80031f8:	1b18      	subs	r0, r3, r4
 80031fa:	bd10      	pop	{r4, pc}
 80031fc:	3001      	adds	r0, #1
 80031fe:	e7f2      	b.n	80031e6 <memcmp+0x6>

08003200 <memset>:
 8003200:	4603      	mov	r3, r0
 8003202:	4402      	add	r2, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <__cvt>:
 8003210:	2b00      	cmp	r3, #0
 8003212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003216:	461f      	mov	r7, r3
 8003218:	bfbb      	ittet	lt
 800321a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800321e:	461f      	movlt	r7, r3
 8003220:	2300      	movge	r3, #0
 8003222:	232d      	movlt	r3, #45	; 0x2d
 8003224:	b088      	sub	sp, #32
 8003226:	4614      	mov	r4, r2
 8003228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800322a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800322c:	7013      	strb	r3, [r2, #0]
 800322e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003230:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003234:	f023 0820 	bic.w	r8, r3, #32
 8003238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800323c:	d005      	beq.n	800324a <__cvt+0x3a>
 800323e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003242:	d100      	bne.n	8003246 <__cvt+0x36>
 8003244:	3501      	adds	r5, #1
 8003246:	2302      	movs	r3, #2
 8003248:	e000      	b.n	800324c <__cvt+0x3c>
 800324a:	2303      	movs	r3, #3
 800324c:	aa07      	add	r2, sp, #28
 800324e:	9204      	str	r2, [sp, #16]
 8003250:	aa06      	add	r2, sp, #24
 8003252:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003256:	e9cd 3500 	strd	r3, r5, [sp]
 800325a:	4622      	mov	r2, r4
 800325c:	463b      	mov	r3, r7
 800325e:	f001 fdeb 	bl	8004e38 <_dtoa_r>
 8003262:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003266:	4606      	mov	r6, r0
 8003268:	d102      	bne.n	8003270 <__cvt+0x60>
 800326a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800326c:	07db      	lsls	r3, r3, #31
 800326e:	d522      	bpl.n	80032b6 <__cvt+0xa6>
 8003270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003274:	eb06 0905 	add.w	r9, r6, r5
 8003278:	d110      	bne.n	800329c <__cvt+0x8c>
 800327a:	7833      	ldrb	r3, [r6, #0]
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d10a      	bne.n	8003296 <__cvt+0x86>
 8003280:	2200      	movs	r2, #0
 8003282:	2300      	movs	r3, #0
 8003284:	4620      	mov	r0, r4
 8003286:	4639      	mov	r1, r7
 8003288:	f7fd fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800328c:	b918      	cbnz	r0, 8003296 <__cvt+0x86>
 800328e:	f1c5 0501 	rsb	r5, r5, #1
 8003292:	f8ca 5000 	str.w	r5, [sl]
 8003296:	f8da 3000 	ldr.w	r3, [sl]
 800329a:	4499      	add	r9, r3
 800329c:	2200      	movs	r2, #0
 800329e:	2300      	movs	r3, #0
 80032a0:	4620      	mov	r0, r4
 80032a2:	4639      	mov	r1, r7
 80032a4:	f7fd fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80032a8:	b108      	cbz	r0, 80032ae <__cvt+0x9e>
 80032aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80032ae:	2230      	movs	r2, #48	; 0x30
 80032b0:	9b07      	ldr	r3, [sp, #28]
 80032b2:	454b      	cmp	r3, r9
 80032b4:	d307      	bcc.n	80032c6 <__cvt+0xb6>
 80032b6:	4630      	mov	r0, r6
 80032b8:	9b07      	ldr	r3, [sp, #28]
 80032ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032bc:	1b9b      	subs	r3, r3, r6
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	b008      	add	sp, #32
 80032c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	9107      	str	r1, [sp, #28]
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e7f0      	b.n	80032b0 <__cvt+0xa0>

080032ce <__exponent>:
 80032ce:	4603      	mov	r3, r0
 80032d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d2:	2900      	cmp	r1, #0
 80032d4:	f803 2b02 	strb.w	r2, [r3], #2
 80032d8:	bfb6      	itet	lt
 80032da:	222d      	movlt	r2, #45	; 0x2d
 80032dc:	222b      	movge	r2, #43	; 0x2b
 80032de:	4249      	neglt	r1, r1
 80032e0:	2909      	cmp	r1, #9
 80032e2:	7042      	strb	r2, [r0, #1]
 80032e4:	dd2b      	ble.n	800333e <__exponent+0x70>
 80032e6:	f10d 0407 	add.w	r4, sp, #7
 80032ea:	46a4      	mov	ip, r4
 80032ec:	270a      	movs	r7, #10
 80032ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80032f2:	460a      	mov	r2, r1
 80032f4:	46a6      	mov	lr, r4
 80032f6:	fb07 1516 	mls	r5, r7, r6, r1
 80032fa:	2a63      	cmp	r2, #99	; 0x63
 80032fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003300:	4631      	mov	r1, r6
 8003302:	f104 34ff 	add.w	r4, r4, #4294967295
 8003306:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800330a:	dcf0      	bgt.n	80032ee <__exponent+0x20>
 800330c:	3130      	adds	r1, #48	; 0x30
 800330e:	f1ae 0502 	sub.w	r5, lr, #2
 8003312:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003316:	4629      	mov	r1, r5
 8003318:	1c44      	adds	r4, r0, #1
 800331a:	4561      	cmp	r1, ip
 800331c:	d30a      	bcc.n	8003334 <__exponent+0x66>
 800331e:	f10d 0209 	add.w	r2, sp, #9
 8003322:	eba2 020e 	sub.w	r2, r2, lr
 8003326:	4565      	cmp	r5, ip
 8003328:	bf88      	it	hi
 800332a:	2200      	movhi	r2, #0
 800332c:	4413      	add	r3, r2
 800332e:	1a18      	subs	r0, r3, r0
 8003330:	b003      	add	sp, #12
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003338:	f804 2f01 	strb.w	r2, [r4, #1]!
 800333c:	e7ed      	b.n	800331a <__exponent+0x4c>
 800333e:	2330      	movs	r3, #48	; 0x30
 8003340:	3130      	adds	r1, #48	; 0x30
 8003342:	7083      	strb	r3, [r0, #2]
 8003344:	70c1      	strb	r1, [r0, #3]
 8003346:	1d03      	adds	r3, r0, #4
 8003348:	e7f1      	b.n	800332e <__exponent+0x60>
	...

0800334c <_printf_float>:
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	b091      	sub	sp, #68	; 0x44
 8003352:	460c      	mov	r4, r1
 8003354:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003358:	4616      	mov	r6, r2
 800335a:	461f      	mov	r7, r3
 800335c:	4605      	mov	r5, r0
 800335e:	f002 febf 	bl	80060e0 <_localeconv_r>
 8003362:	6803      	ldr	r3, [r0, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	9309      	str	r3, [sp, #36]	; 0x24
 8003368:	f7fc fef2 	bl	8000150 <strlen>
 800336c:	2300      	movs	r3, #0
 800336e:	930e      	str	r3, [sp, #56]	; 0x38
 8003370:	f8d8 3000 	ldr.w	r3, [r8]
 8003374:	900a      	str	r0, [sp, #40]	; 0x28
 8003376:	3307      	adds	r3, #7
 8003378:	f023 0307 	bic.w	r3, r3, #7
 800337c:	f103 0208 	add.w	r2, r3, #8
 8003380:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003384:	f8d4 b000 	ldr.w	fp, [r4]
 8003388:	f8c8 2000 	str.w	r2, [r8]
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003394:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003398:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800339c:	930b      	str	r3, [sp, #44]	; 0x2c
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	4640      	mov	r0, r8
 80033a4:	4b9c      	ldr	r3, [pc, #624]	; (8003618 <_printf_float+0x2cc>)
 80033a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033a8:	f7fd fb30 	bl	8000a0c <__aeabi_dcmpun>
 80033ac:	bb70      	cbnz	r0, 800340c <_printf_float+0xc0>
 80033ae:	f04f 32ff 	mov.w	r2, #4294967295
 80033b2:	4640      	mov	r0, r8
 80033b4:	4b98      	ldr	r3, [pc, #608]	; (8003618 <_printf_float+0x2cc>)
 80033b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033b8:	f7fd fb0a 	bl	80009d0 <__aeabi_dcmple>
 80033bc:	bb30      	cbnz	r0, 800340c <_printf_float+0xc0>
 80033be:	2200      	movs	r2, #0
 80033c0:	2300      	movs	r3, #0
 80033c2:	4640      	mov	r0, r8
 80033c4:	4651      	mov	r1, sl
 80033c6:	f7fd faf9 	bl	80009bc <__aeabi_dcmplt>
 80033ca:	b110      	cbz	r0, 80033d2 <_printf_float+0x86>
 80033cc:	232d      	movs	r3, #45	; 0x2d
 80033ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d2:	4b92      	ldr	r3, [pc, #584]	; (800361c <_printf_float+0x2d0>)
 80033d4:	4892      	ldr	r0, [pc, #584]	; (8003620 <_printf_float+0x2d4>)
 80033d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80033da:	bf94      	ite	ls
 80033dc:	4698      	movls	r8, r3
 80033de:	4680      	movhi	r8, r0
 80033e0:	2303      	movs	r3, #3
 80033e2:	f04f 0a00 	mov.w	sl, #0
 80033e6:	6123      	str	r3, [r4, #16]
 80033e8:	f02b 0304 	bic.w	r3, fp, #4
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	4633      	mov	r3, r6
 80033f0:	4621      	mov	r1, r4
 80033f2:	4628      	mov	r0, r5
 80033f4:	9700      	str	r7, [sp, #0]
 80033f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80033f8:	f000 f9d4 	bl	80037a4 <_printf_common>
 80033fc:	3001      	adds	r0, #1
 80033fe:	f040 8090 	bne.w	8003522 <_printf_float+0x1d6>
 8003402:	f04f 30ff 	mov.w	r0, #4294967295
 8003406:	b011      	add	sp, #68	; 0x44
 8003408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340c:	4642      	mov	r2, r8
 800340e:	4653      	mov	r3, sl
 8003410:	4640      	mov	r0, r8
 8003412:	4651      	mov	r1, sl
 8003414:	f7fd fafa 	bl	8000a0c <__aeabi_dcmpun>
 8003418:	b148      	cbz	r0, 800342e <_printf_float+0xe2>
 800341a:	f1ba 0f00 	cmp.w	sl, #0
 800341e:	bfb8      	it	lt
 8003420:	232d      	movlt	r3, #45	; 0x2d
 8003422:	4880      	ldr	r0, [pc, #512]	; (8003624 <_printf_float+0x2d8>)
 8003424:	bfb8      	it	lt
 8003426:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800342a:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <_printf_float+0x2dc>)
 800342c:	e7d3      	b.n	80033d6 <_printf_float+0x8a>
 800342e:	6863      	ldr	r3, [r4, #4]
 8003430:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	d142      	bne.n	80034be <_printf_float+0x172>
 8003438:	2306      	movs	r3, #6
 800343a:	6063      	str	r3, [r4, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	9206      	str	r2, [sp, #24]
 8003440:	aa0e      	add	r2, sp, #56	; 0x38
 8003442:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003446:	aa0d      	add	r2, sp, #52	; 0x34
 8003448:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800344c:	9203      	str	r2, [sp, #12]
 800344e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003452:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003456:	6023      	str	r3, [r4, #0]
 8003458:	6863      	ldr	r3, [r4, #4]
 800345a:	4642      	mov	r2, r8
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	4628      	mov	r0, r5
 8003460:	4653      	mov	r3, sl
 8003462:	910b      	str	r1, [sp, #44]	; 0x2c
 8003464:	f7ff fed4 	bl	8003210 <__cvt>
 8003468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800346a:	4680      	mov	r8, r0
 800346c:	2947      	cmp	r1, #71	; 0x47
 800346e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003470:	d108      	bne.n	8003484 <_printf_float+0x138>
 8003472:	1cc8      	adds	r0, r1, #3
 8003474:	db02      	blt.n	800347c <_printf_float+0x130>
 8003476:	6863      	ldr	r3, [r4, #4]
 8003478:	4299      	cmp	r1, r3
 800347a:	dd40      	ble.n	80034fe <_printf_float+0x1b2>
 800347c:	f1a9 0902 	sub.w	r9, r9, #2
 8003480:	fa5f f989 	uxtb.w	r9, r9
 8003484:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003488:	d81f      	bhi.n	80034ca <_printf_float+0x17e>
 800348a:	464a      	mov	r2, r9
 800348c:	3901      	subs	r1, #1
 800348e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003492:	910d      	str	r1, [sp, #52]	; 0x34
 8003494:	f7ff ff1b 	bl	80032ce <__exponent>
 8003498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800349a:	4682      	mov	sl, r0
 800349c:	1813      	adds	r3, r2, r0
 800349e:	2a01      	cmp	r2, #1
 80034a0:	6123      	str	r3, [r4, #16]
 80034a2:	dc02      	bgt.n	80034aa <_printf_float+0x15e>
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	07d2      	lsls	r2, r2, #31
 80034a8:	d501      	bpl.n	80034ae <_printf_float+0x162>
 80034aa:	3301      	adds	r3, #1
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d09b      	beq.n	80033ee <_printf_float+0xa2>
 80034b6:	232d      	movs	r3, #45	; 0x2d
 80034b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034bc:	e797      	b.n	80033ee <_printf_float+0xa2>
 80034be:	2947      	cmp	r1, #71	; 0x47
 80034c0:	d1bc      	bne.n	800343c <_printf_float+0xf0>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ba      	bne.n	800343c <_printf_float+0xf0>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e7b7      	b.n	800343a <_printf_float+0xee>
 80034ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80034ce:	d118      	bne.n	8003502 <_printf_float+0x1b6>
 80034d0:	2900      	cmp	r1, #0
 80034d2:	6863      	ldr	r3, [r4, #4]
 80034d4:	dd0b      	ble.n	80034ee <_printf_float+0x1a2>
 80034d6:	6121      	str	r1, [r4, #16]
 80034d8:	b913      	cbnz	r3, 80034e0 <_printf_float+0x194>
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	07d0      	lsls	r0, r2, #31
 80034de:	d502      	bpl.n	80034e6 <_printf_float+0x19a>
 80034e0:	3301      	adds	r3, #1
 80034e2:	440b      	add	r3, r1
 80034e4:	6123      	str	r3, [r4, #16]
 80034e6:	f04f 0a00 	mov.w	sl, #0
 80034ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80034ec:	e7df      	b.n	80034ae <_printf_float+0x162>
 80034ee:	b913      	cbnz	r3, 80034f6 <_printf_float+0x1aa>
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	07d2      	lsls	r2, r2, #31
 80034f4:	d501      	bpl.n	80034fa <_printf_float+0x1ae>
 80034f6:	3302      	adds	r3, #2
 80034f8:	e7f4      	b.n	80034e4 <_printf_float+0x198>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e7f2      	b.n	80034e4 <_printf_float+0x198>
 80034fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003504:	4299      	cmp	r1, r3
 8003506:	db05      	blt.n	8003514 <_printf_float+0x1c8>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	6121      	str	r1, [r4, #16]
 800350c:	07d8      	lsls	r0, r3, #31
 800350e:	d5ea      	bpl.n	80034e6 <_printf_float+0x19a>
 8003510:	1c4b      	adds	r3, r1, #1
 8003512:	e7e7      	b.n	80034e4 <_printf_float+0x198>
 8003514:	2900      	cmp	r1, #0
 8003516:	bfcc      	ite	gt
 8003518:	2201      	movgt	r2, #1
 800351a:	f1c1 0202 	rsble	r2, r1, #2
 800351e:	4413      	add	r3, r2
 8003520:	e7e0      	b.n	80034e4 <_printf_float+0x198>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	055a      	lsls	r2, r3, #21
 8003526:	d407      	bmi.n	8003538 <_printf_float+0x1ec>
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	4642      	mov	r2, r8
 800352c:	4631      	mov	r1, r6
 800352e:	4628      	mov	r0, r5
 8003530:	47b8      	blx	r7
 8003532:	3001      	adds	r0, #1
 8003534:	d12b      	bne.n	800358e <_printf_float+0x242>
 8003536:	e764      	b.n	8003402 <_printf_float+0xb6>
 8003538:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800353c:	f240 80dd 	bls.w	80036fa <_printf_float+0x3ae>
 8003540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003544:	2200      	movs	r2, #0
 8003546:	2300      	movs	r3, #0
 8003548:	f7fd fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800354c:	2800      	cmp	r0, #0
 800354e:	d033      	beq.n	80035b8 <_printf_float+0x26c>
 8003550:	2301      	movs	r3, #1
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	4a35      	ldr	r2, [pc, #212]	; (800362c <_printf_float+0x2e0>)
 8003558:	47b8      	blx	r7
 800355a:	3001      	adds	r0, #1
 800355c:	f43f af51 	beq.w	8003402 <_printf_float+0xb6>
 8003560:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003564:	429a      	cmp	r2, r3
 8003566:	db02      	blt.n	800356e <_printf_float+0x222>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	07d8      	lsls	r0, r3, #31
 800356c:	d50f      	bpl.n	800358e <_printf_float+0x242>
 800356e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	f43f af42 	beq.w	8003402 <_printf_float+0xb6>
 800357e:	f04f 0800 	mov.w	r8, #0
 8003582:	f104 091a 	add.w	r9, r4, #26
 8003586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003588:	3b01      	subs	r3, #1
 800358a:	4543      	cmp	r3, r8
 800358c:	dc09      	bgt.n	80035a2 <_printf_float+0x256>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	079b      	lsls	r3, r3, #30
 8003592:	f100 8102 	bmi.w	800379a <_printf_float+0x44e>
 8003596:	68e0      	ldr	r0, [r4, #12]
 8003598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800359a:	4298      	cmp	r0, r3
 800359c:	bfb8      	it	lt
 800359e:	4618      	movlt	r0, r3
 80035a0:	e731      	b.n	8003406 <_printf_float+0xba>
 80035a2:	2301      	movs	r3, #1
 80035a4:	464a      	mov	r2, r9
 80035a6:	4631      	mov	r1, r6
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b8      	blx	r7
 80035ac:	3001      	adds	r0, #1
 80035ae:	f43f af28 	beq.w	8003402 <_printf_float+0xb6>
 80035b2:	f108 0801 	add.w	r8, r8, #1
 80035b6:	e7e6      	b.n	8003586 <_printf_float+0x23a>
 80035b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	dc38      	bgt.n	8003630 <_printf_float+0x2e4>
 80035be:	2301      	movs	r3, #1
 80035c0:	4631      	mov	r1, r6
 80035c2:	4628      	mov	r0, r5
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <_printf_float+0x2e0>)
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	f43f af1a 	beq.w	8003402 <_printf_float+0xb6>
 80035ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d102      	bne.n	80035dc <_printf_float+0x290>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	07d9      	lsls	r1, r3, #31
 80035da:	d5d8      	bpl.n	800358e <_printf_float+0x242>
 80035dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035e0:	4631      	mov	r1, r6
 80035e2:	4628      	mov	r0, r5
 80035e4:	47b8      	blx	r7
 80035e6:	3001      	adds	r0, #1
 80035e8:	f43f af0b 	beq.w	8003402 <_printf_float+0xb6>
 80035ec:	f04f 0900 	mov.w	r9, #0
 80035f0:	f104 0a1a 	add.w	sl, r4, #26
 80035f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035f6:	425b      	negs	r3, r3
 80035f8:	454b      	cmp	r3, r9
 80035fa:	dc01      	bgt.n	8003600 <_printf_float+0x2b4>
 80035fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035fe:	e794      	b.n	800352a <_printf_float+0x1de>
 8003600:	2301      	movs	r3, #1
 8003602:	4652      	mov	r2, sl
 8003604:	4631      	mov	r1, r6
 8003606:	4628      	mov	r0, r5
 8003608:	47b8      	blx	r7
 800360a:	3001      	adds	r0, #1
 800360c:	f43f aef9 	beq.w	8003402 <_printf_float+0xb6>
 8003610:	f109 0901 	add.w	r9, r9, #1
 8003614:	e7ee      	b.n	80035f4 <_printf_float+0x2a8>
 8003616:	bf00      	nop
 8003618:	7fefffff 	.word	0x7fefffff
 800361c:	0800808c 	.word	0x0800808c
 8003620:	08008090 	.word	0x08008090
 8003624:	08008098 	.word	0x08008098
 8003628:	08008094 	.word	0x08008094
 800362c:	0800809c 	.word	0x0800809c
 8003630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003634:	429a      	cmp	r2, r3
 8003636:	bfa8      	it	ge
 8003638:	461a      	movge	r2, r3
 800363a:	2a00      	cmp	r2, #0
 800363c:	4691      	mov	r9, r2
 800363e:	dc37      	bgt.n	80036b0 <_printf_float+0x364>
 8003640:	f04f 0b00 	mov.w	fp, #0
 8003644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003648:	f104 021a 	add.w	r2, r4, #26
 800364c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003650:	ebaa 0309 	sub.w	r3, sl, r9
 8003654:	455b      	cmp	r3, fp
 8003656:	dc33      	bgt.n	80036c0 <_printf_float+0x374>
 8003658:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800365c:	429a      	cmp	r2, r3
 800365e:	db3b      	blt.n	80036d8 <_printf_float+0x38c>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	07da      	lsls	r2, r3, #31
 8003664:	d438      	bmi.n	80036d8 <_printf_float+0x38c>
 8003666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003668:	990d      	ldr	r1, [sp, #52]	; 0x34
 800366a:	eba3 020a 	sub.w	r2, r3, sl
 800366e:	eba3 0901 	sub.w	r9, r3, r1
 8003672:	4591      	cmp	r9, r2
 8003674:	bfa8      	it	ge
 8003676:	4691      	movge	r9, r2
 8003678:	f1b9 0f00 	cmp.w	r9, #0
 800367c:	dc34      	bgt.n	80036e8 <_printf_float+0x39c>
 800367e:	f04f 0800 	mov.w	r8, #0
 8003682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003686:	f104 0a1a 	add.w	sl, r4, #26
 800368a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	eba3 0309 	sub.w	r3, r3, r9
 8003694:	4543      	cmp	r3, r8
 8003696:	f77f af7a 	ble.w	800358e <_printf_float+0x242>
 800369a:	2301      	movs	r3, #1
 800369c:	4652      	mov	r2, sl
 800369e:	4631      	mov	r1, r6
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b8      	blx	r7
 80036a4:	3001      	adds	r0, #1
 80036a6:	f43f aeac 	beq.w	8003402 <_printf_float+0xb6>
 80036aa:	f108 0801 	add.w	r8, r8, #1
 80036ae:	e7ec      	b.n	800368a <_printf_float+0x33e>
 80036b0:	4613      	mov	r3, r2
 80036b2:	4631      	mov	r1, r6
 80036b4:	4642      	mov	r2, r8
 80036b6:	4628      	mov	r0, r5
 80036b8:	47b8      	blx	r7
 80036ba:	3001      	adds	r0, #1
 80036bc:	d1c0      	bne.n	8003640 <_printf_float+0x2f4>
 80036be:	e6a0      	b.n	8003402 <_printf_float+0xb6>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f ae99 	beq.w	8003402 <_printf_float+0xb6>
 80036d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036d2:	f10b 0b01 	add.w	fp, fp, #1
 80036d6:	e7b9      	b.n	800364c <_printf_float+0x300>
 80036d8:	4631      	mov	r1, r6
 80036da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036de:	4628      	mov	r0, r5
 80036e0:	47b8      	blx	r7
 80036e2:	3001      	adds	r0, #1
 80036e4:	d1bf      	bne.n	8003666 <_printf_float+0x31a>
 80036e6:	e68c      	b.n	8003402 <_printf_float+0xb6>
 80036e8:	464b      	mov	r3, r9
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	eb08 020a 	add.w	r2, r8, sl
 80036f2:	47b8      	blx	r7
 80036f4:	3001      	adds	r0, #1
 80036f6:	d1c2      	bne.n	800367e <_printf_float+0x332>
 80036f8:	e683      	b.n	8003402 <_printf_float+0xb6>
 80036fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036fc:	2a01      	cmp	r2, #1
 80036fe:	dc01      	bgt.n	8003704 <_printf_float+0x3b8>
 8003700:	07db      	lsls	r3, r3, #31
 8003702:	d537      	bpl.n	8003774 <_printf_float+0x428>
 8003704:	2301      	movs	r3, #1
 8003706:	4642      	mov	r2, r8
 8003708:	4631      	mov	r1, r6
 800370a:	4628      	mov	r0, r5
 800370c:	47b8      	blx	r7
 800370e:	3001      	adds	r0, #1
 8003710:	f43f ae77 	beq.w	8003402 <_printf_float+0xb6>
 8003714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003718:	4631      	mov	r1, r6
 800371a:	4628      	mov	r0, r5
 800371c:	47b8      	blx	r7
 800371e:	3001      	adds	r0, #1
 8003720:	f43f ae6f 	beq.w	8003402 <_printf_float+0xb6>
 8003724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003728:	2200      	movs	r2, #0
 800372a:	2300      	movs	r3, #0
 800372c:	f7fd f93c 	bl	80009a8 <__aeabi_dcmpeq>
 8003730:	b9d8      	cbnz	r0, 800376a <_printf_float+0x41e>
 8003732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003734:	f108 0201 	add.w	r2, r8, #1
 8003738:	3b01      	subs	r3, #1
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	d10e      	bne.n	8003762 <_printf_float+0x416>
 8003744:	e65d      	b.n	8003402 <_printf_float+0xb6>
 8003746:	2301      	movs	r3, #1
 8003748:	464a      	mov	r2, r9
 800374a:	4631      	mov	r1, r6
 800374c:	4628      	mov	r0, r5
 800374e:	47b8      	blx	r7
 8003750:	3001      	adds	r0, #1
 8003752:	f43f ae56 	beq.w	8003402 <_printf_float+0xb6>
 8003756:	f108 0801 	add.w	r8, r8, #1
 800375a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800375c:	3b01      	subs	r3, #1
 800375e:	4543      	cmp	r3, r8
 8003760:	dcf1      	bgt.n	8003746 <_printf_float+0x3fa>
 8003762:	4653      	mov	r3, sl
 8003764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003768:	e6e0      	b.n	800352c <_printf_float+0x1e0>
 800376a:	f04f 0800 	mov.w	r8, #0
 800376e:	f104 091a 	add.w	r9, r4, #26
 8003772:	e7f2      	b.n	800375a <_printf_float+0x40e>
 8003774:	2301      	movs	r3, #1
 8003776:	4642      	mov	r2, r8
 8003778:	e7df      	b.n	800373a <_printf_float+0x3ee>
 800377a:	2301      	movs	r3, #1
 800377c:	464a      	mov	r2, r9
 800377e:	4631      	mov	r1, r6
 8003780:	4628      	mov	r0, r5
 8003782:	47b8      	blx	r7
 8003784:	3001      	adds	r0, #1
 8003786:	f43f ae3c 	beq.w	8003402 <_printf_float+0xb6>
 800378a:	f108 0801 	add.w	r8, r8, #1
 800378e:	68e3      	ldr	r3, [r4, #12]
 8003790:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003792:	1a5b      	subs	r3, r3, r1
 8003794:	4543      	cmp	r3, r8
 8003796:	dcf0      	bgt.n	800377a <_printf_float+0x42e>
 8003798:	e6fd      	b.n	8003596 <_printf_float+0x24a>
 800379a:	f04f 0800 	mov.w	r8, #0
 800379e:	f104 0919 	add.w	r9, r4, #25
 80037a2:	e7f4      	b.n	800378e <_printf_float+0x442>

080037a4 <_printf_common>:
 80037a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	4616      	mov	r6, r2
 80037aa:	4699      	mov	r9, r3
 80037ac:	688a      	ldr	r2, [r1, #8]
 80037ae:	690b      	ldr	r3, [r1, #16]
 80037b0:	4607      	mov	r7, r0
 80037b2:	4293      	cmp	r3, r2
 80037b4:	bfb8      	it	lt
 80037b6:	4613      	movlt	r3, r2
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037be:	460c      	mov	r4, r1
 80037c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037c4:	b10a      	cbz	r2, 80037ca <_printf_common+0x26>
 80037c6:	3301      	adds	r3, #1
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	0699      	lsls	r1, r3, #26
 80037ce:	bf42      	ittt	mi
 80037d0:	6833      	ldrmi	r3, [r6, #0]
 80037d2:	3302      	addmi	r3, #2
 80037d4:	6033      	strmi	r3, [r6, #0]
 80037d6:	6825      	ldr	r5, [r4, #0]
 80037d8:	f015 0506 	ands.w	r5, r5, #6
 80037dc:	d106      	bne.n	80037ec <_printf_common+0x48>
 80037de:	f104 0a19 	add.w	sl, r4, #25
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	6832      	ldr	r2, [r6, #0]
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	42ab      	cmp	r3, r5
 80037ea:	dc28      	bgt.n	800383e <_printf_common+0x9a>
 80037ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037f0:	1e13      	subs	r3, r2, #0
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	bf18      	it	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	0692      	lsls	r2, r2, #26
 80037fa:	d42d      	bmi.n	8003858 <_printf_common+0xb4>
 80037fc:	4649      	mov	r1, r9
 80037fe:	4638      	mov	r0, r7
 8003800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003804:	47c0      	blx	r8
 8003806:	3001      	adds	r0, #1
 8003808:	d020      	beq.n	800384c <_printf_common+0xa8>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	68e5      	ldr	r5, [r4, #12]
 800380e:	f003 0306 	and.w	r3, r3, #6
 8003812:	2b04      	cmp	r3, #4
 8003814:	bf18      	it	ne
 8003816:	2500      	movne	r5, #0
 8003818:	6832      	ldr	r2, [r6, #0]
 800381a:	f04f 0600 	mov.w	r6, #0
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	bf08      	it	eq
 8003822:	1aad      	subeq	r5, r5, r2
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	bf08      	it	eq
 8003828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800382c:	4293      	cmp	r3, r2
 800382e:	bfc4      	itt	gt
 8003830:	1a9b      	subgt	r3, r3, r2
 8003832:	18ed      	addgt	r5, r5, r3
 8003834:	341a      	adds	r4, #26
 8003836:	42b5      	cmp	r5, r6
 8003838:	d11a      	bne.n	8003870 <_printf_common+0xcc>
 800383a:	2000      	movs	r0, #0
 800383c:	e008      	b.n	8003850 <_printf_common+0xac>
 800383e:	2301      	movs	r3, #1
 8003840:	4652      	mov	r2, sl
 8003842:	4649      	mov	r1, r9
 8003844:	4638      	mov	r0, r7
 8003846:	47c0      	blx	r8
 8003848:	3001      	adds	r0, #1
 800384a:	d103      	bne.n	8003854 <_printf_common+0xb0>
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003854:	3501      	adds	r5, #1
 8003856:	e7c4      	b.n	80037e2 <_printf_common+0x3e>
 8003858:	2030      	movs	r0, #48	; 0x30
 800385a:	18e1      	adds	r1, r4, r3
 800385c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003866:	4422      	add	r2, r4
 8003868:	3302      	adds	r3, #2
 800386a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800386e:	e7c5      	b.n	80037fc <_printf_common+0x58>
 8003870:	2301      	movs	r3, #1
 8003872:	4622      	mov	r2, r4
 8003874:	4649      	mov	r1, r9
 8003876:	4638      	mov	r0, r7
 8003878:	47c0      	blx	r8
 800387a:	3001      	adds	r0, #1
 800387c:	d0e6      	beq.n	800384c <_printf_common+0xa8>
 800387e:	3601      	adds	r6, #1
 8003880:	e7d9      	b.n	8003836 <_printf_common+0x92>
	...

08003884 <_printf_i>:
 8003884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	7e0f      	ldrb	r7, [r1, #24]
 800388a:	4691      	mov	r9, r2
 800388c:	2f78      	cmp	r7, #120	; 0x78
 800388e:	4680      	mov	r8, r0
 8003890:	460c      	mov	r4, r1
 8003892:	469a      	mov	sl, r3
 8003894:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800389a:	d807      	bhi.n	80038ac <_printf_i+0x28>
 800389c:	2f62      	cmp	r7, #98	; 0x62
 800389e:	d80a      	bhi.n	80038b6 <_printf_i+0x32>
 80038a0:	2f00      	cmp	r7, #0
 80038a2:	f000 80d9 	beq.w	8003a58 <_printf_i+0x1d4>
 80038a6:	2f58      	cmp	r7, #88	; 0x58
 80038a8:	f000 80a4 	beq.w	80039f4 <_printf_i+0x170>
 80038ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038b4:	e03a      	b.n	800392c <_printf_i+0xa8>
 80038b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ba:	2b15      	cmp	r3, #21
 80038bc:	d8f6      	bhi.n	80038ac <_printf_i+0x28>
 80038be:	a101      	add	r1, pc, #4	; (adr r1, 80038c4 <_printf_i+0x40>)
 80038c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	08003931 	.word	0x08003931
 80038cc:	080038ad 	.word	0x080038ad
 80038d0:	080038ad 	.word	0x080038ad
 80038d4:	080038ad 	.word	0x080038ad
 80038d8:	080038ad 	.word	0x080038ad
 80038dc:	08003931 	.word	0x08003931
 80038e0:	080038ad 	.word	0x080038ad
 80038e4:	080038ad 	.word	0x080038ad
 80038e8:	080038ad 	.word	0x080038ad
 80038ec:	080038ad 	.word	0x080038ad
 80038f0:	08003a3f 	.word	0x08003a3f
 80038f4:	08003961 	.word	0x08003961
 80038f8:	08003a21 	.word	0x08003a21
 80038fc:	080038ad 	.word	0x080038ad
 8003900:	080038ad 	.word	0x080038ad
 8003904:	08003a61 	.word	0x08003a61
 8003908:	080038ad 	.word	0x080038ad
 800390c:	08003961 	.word	0x08003961
 8003910:	080038ad 	.word	0x080038ad
 8003914:	080038ad 	.word	0x080038ad
 8003918:	08003a29 	.word	0x08003a29
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	1d1a      	adds	r2, r3, #4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	602a      	str	r2, [r5, #0]
 8003924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800392c:	2301      	movs	r3, #1
 800392e:	e0a4      	b.n	8003a7a <_printf_i+0x1f6>
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	6829      	ldr	r1, [r5, #0]
 8003934:	0606      	lsls	r6, r0, #24
 8003936:	f101 0304 	add.w	r3, r1, #4
 800393a:	d50a      	bpl.n	8003952 <_printf_i+0xce>
 800393c:	680e      	ldr	r6, [r1, #0]
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	2e00      	cmp	r6, #0
 8003942:	da03      	bge.n	800394c <_printf_i+0xc8>
 8003944:	232d      	movs	r3, #45	; 0x2d
 8003946:	4276      	negs	r6, r6
 8003948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800394c:	230a      	movs	r3, #10
 800394e:	485e      	ldr	r0, [pc, #376]	; (8003ac8 <_printf_i+0x244>)
 8003950:	e019      	b.n	8003986 <_printf_i+0x102>
 8003952:	680e      	ldr	r6, [r1, #0]
 8003954:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	bf18      	it	ne
 800395c:	b236      	sxthne	r6, r6
 800395e:	e7ef      	b.n	8003940 <_printf_i+0xbc>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	6820      	ldr	r0, [r4, #0]
 8003964:	1d19      	adds	r1, r3, #4
 8003966:	6029      	str	r1, [r5, #0]
 8003968:	0601      	lsls	r1, r0, #24
 800396a:	d501      	bpl.n	8003970 <_printf_i+0xec>
 800396c:	681e      	ldr	r6, [r3, #0]
 800396e:	e002      	b.n	8003976 <_printf_i+0xf2>
 8003970:	0646      	lsls	r6, r0, #25
 8003972:	d5fb      	bpl.n	800396c <_printf_i+0xe8>
 8003974:	881e      	ldrh	r6, [r3, #0]
 8003976:	2f6f      	cmp	r7, #111	; 0x6f
 8003978:	bf0c      	ite	eq
 800397a:	2308      	moveq	r3, #8
 800397c:	230a      	movne	r3, #10
 800397e:	4852      	ldr	r0, [pc, #328]	; (8003ac8 <_printf_i+0x244>)
 8003980:	2100      	movs	r1, #0
 8003982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003986:	6865      	ldr	r5, [r4, #4]
 8003988:	2d00      	cmp	r5, #0
 800398a:	bfa8      	it	ge
 800398c:	6821      	ldrge	r1, [r4, #0]
 800398e:	60a5      	str	r5, [r4, #8]
 8003990:	bfa4      	itt	ge
 8003992:	f021 0104 	bicge.w	r1, r1, #4
 8003996:	6021      	strge	r1, [r4, #0]
 8003998:	b90e      	cbnz	r6, 800399e <_printf_i+0x11a>
 800399a:	2d00      	cmp	r5, #0
 800399c:	d04d      	beq.n	8003a3a <_printf_i+0x1b6>
 800399e:	4615      	mov	r5, r2
 80039a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80039a4:	fb03 6711 	mls	r7, r3, r1, r6
 80039a8:	5dc7      	ldrb	r7, [r0, r7]
 80039aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039ae:	4637      	mov	r7, r6
 80039b0:	42bb      	cmp	r3, r7
 80039b2:	460e      	mov	r6, r1
 80039b4:	d9f4      	bls.n	80039a0 <_printf_i+0x11c>
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d10b      	bne.n	80039d2 <_printf_i+0x14e>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	07de      	lsls	r6, r3, #31
 80039be:	d508      	bpl.n	80039d2 <_printf_i+0x14e>
 80039c0:	6923      	ldr	r3, [r4, #16]
 80039c2:	6861      	ldr	r1, [r4, #4]
 80039c4:	4299      	cmp	r1, r3
 80039c6:	bfde      	ittt	le
 80039c8:	2330      	movle	r3, #48	; 0x30
 80039ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039d2:	1b52      	subs	r2, r2, r5
 80039d4:	6122      	str	r2, [r4, #16]
 80039d6:	464b      	mov	r3, r9
 80039d8:	4621      	mov	r1, r4
 80039da:	4640      	mov	r0, r8
 80039dc:	f8cd a000 	str.w	sl, [sp]
 80039e0:	aa03      	add	r2, sp, #12
 80039e2:	f7ff fedf 	bl	80037a4 <_printf_common>
 80039e6:	3001      	adds	r0, #1
 80039e8:	d14c      	bne.n	8003a84 <_printf_i+0x200>
 80039ea:	f04f 30ff 	mov.w	r0, #4294967295
 80039ee:	b004      	add	sp, #16
 80039f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f4:	4834      	ldr	r0, [pc, #208]	; (8003ac8 <_printf_i+0x244>)
 80039f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039fa:	6829      	ldr	r1, [r5, #0]
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a02:	6029      	str	r1, [r5, #0]
 8003a04:	061d      	lsls	r5, r3, #24
 8003a06:	d514      	bpl.n	8003a32 <_printf_i+0x1ae>
 8003a08:	07df      	lsls	r7, r3, #31
 8003a0a:	bf44      	itt	mi
 8003a0c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a10:	6023      	strmi	r3, [r4, #0]
 8003a12:	b91e      	cbnz	r6, 8003a1c <_printf_i+0x198>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f023 0320 	bic.w	r3, r3, #32
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	e7af      	b.n	8003980 <_printf_i+0xfc>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	f043 0320 	orr.w	r3, r3, #32
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	2378      	movs	r3, #120	; 0x78
 8003a2a:	4828      	ldr	r0, [pc, #160]	; (8003acc <_printf_i+0x248>)
 8003a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a30:	e7e3      	b.n	80039fa <_printf_i+0x176>
 8003a32:	0659      	lsls	r1, r3, #25
 8003a34:	bf48      	it	mi
 8003a36:	b2b6      	uxthmi	r6, r6
 8003a38:	e7e6      	b.n	8003a08 <_printf_i+0x184>
 8003a3a:	4615      	mov	r5, r2
 8003a3c:	e7bb      	b.n	80039b6 <_printf_i+0x132>
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	6826      	ldr	r6, [r4, #0]
 8003a42:	1d18      	adds	r0, r3, #4
 8003a44:	6961      	ldr	r1, [r4, #20]
 8003a46:	6028      	str	r0, [r5, #0]
 8003a48:	0635      	lsls	r5, r6, #24
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	d501      	bpl.n	8003a52 <_printf_i+0x1ce>
 8003a4e:	6019      	str	r1, [r3, #0]
 8003a50:	e002      	b.n	8003a58 <_printf_i+0x1d4>
 8003a52:	0670      	lsls	r0, r6, #25
 8003a54:	d5fb      	bpl.n	8003a4e <_printf_i+0x1ca>
 8003a56:	8019      	strh	r1, [r3, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4615      	mov	r5, r2
 8003a5c:	6123      	str	r3, [r4, #16]
 8003a5e:	e7ba      	b.n	80039d6 <_printf_i+0x152>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	2100      	movs	r1, #0
 8003a64:	1d1a      	adds	r2, r3, #4
 8003a66:	602a      	str	r2, [r5, #0]
 8003a68:	681d      	ldr	r5, [r3, #0]
 8003a6a:	6862      	ldr	r2, [r4, #4]
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f002 fb67 	bl	8006140 <memchr>
 8003a72:	b108      	cbz	r0, 8003a78 <_printf_i+0x1f4>
 8003a74:	1b40      	subs	r0, r0, r5
 8003a76:	6060      	str	r0, [r4, #4]
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	6123      	str	r3, [r4, #16]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a82:	e7a8      	b.n	80039d6 <_printf_i+0x152>
 8003a84:	462a      	mov	r2, r5
 8003a86:	4649      	mov	r1, r9
 8003a88:	4640      	mov	r0, r8
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	47d0      	blx	sl
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d0ab      	beq.n	80039ea <_printf_i+0x166>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	079b      	lsls	r3, r3, #30
 8003a96:	d413      	bmi.n	8003ac0 <_printf_i+0x23c>
 8003a98:	68e0      	ldr	r0, [r4, #12]
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	4298      	cmp	r0, r3
 8003a9e:	bfb8      	it	lt
 8003aa0:	4618      	movlt	r0, r3
 8003aa2:	e7a4      	b.n	80039ee <_printf_i+0x16a>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	4640      	mov	r0, r8
 8003aac:	47d0      	blx	sl
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d09b      	beq.n	80039ea <_printf_i+0x166>
 8003ab2:	3501      	adds	r5, #1
 8003ab4:	68e3      	ldr	r3, [r4, #12]
 8003ab6:	9903      	ldr	r1, [sp, #12]
 8003ab8:	1a5b      	subs	r3, r3, r1
 8003aba:	42ab      	cmp	r3, r5
 8003abc:	dcf2      	bgt.n	8003aa4 <_printf_i+0x220>
 8003abe:	e7eb      	b.n	8003a98 <_printf_i+0x214>
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	f104 0619 	add.w	r6, r4, #25
 8003ac6:	e7f5      	b.n	8003ab4 <_printf_i+0x230>
 8003ac8:	0800809e 	.word	0x0800809e
 8003acc:	080080af 	.word	0x080080af

08003ad0 <_scanf_float>:
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	688b      	ldr	r3, [r1, #8]
 8003ada:	4617      	mov	r7, r2
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003ae2:	bf85      	ittet	hi
 8003ae4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003ae8:	195b      	addhi	r3, r3, r5
 8003aea:	2300      	movls	r3, #0
 8003aec:	9302      	strhi	r3, [sp, #8]
 8003aee:	bf88      	it	hi
 8003af0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003af4:	468b      	mov	fp, r1
 8003af6:	f04f 0500 	mov.w	r5, #0
 8003afa:	bf8c      	ite	hi
 8003afc:	608b      	strhi	r3, [r1, #8]
 8003afe:	9302      	strls	r3, [sp, #8]
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	4680      	mov	r8, r0
 8003b04:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003b08:	f84b 3b1c 	str.w	r3, [fp], #28
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	465e      	mov	r6, fp
 8003b10:	46aa      	mov	sl, r5
 8003b12:	46a9      	mov	r9, r5
 8003b14:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b18:	9501      	str	r5, [sp, #4]
 8003b1a:	68a2      	ldr	r2, [r4, #8]
 8003b1c:	b152      	cbz	r2, 8003b34 <_scanf_float+0x64>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b4e      	cmp	r3, #78	; 0x4e
 8003b24:	d864      	bhi.n	8003bf0 <_scanf_float+0x120>
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d83c      	bhi.n	8003ba4 <_scanf_float+0xd4>
 8003b2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003b2e:	b2c8      	uxtb	r0, r1
 8003b30:	280e      	cmp	r0, #14
 8003b32:	d93a      	bls.n	8003baa <_scanf_float+0xda>
 8003b34:	f1b9 0f00 	cmp.w	r9, #0
 8003b38:	d003      	beq.n	8003b42 <_scanf_float+0x72>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b46:	f1ba 0f01 	cmp.w	sl, #1
 8003b4a:	f200 8113 	bhi.w	8003d74 <_scanf_float+0x2a4>
 8003b4e:	455e      	cmp	r6, fp
 8003b50:	f200 8105 	bhi.w	8003d5e <_scanf_float+0x28e>
 8003b54:	2501      	movs	r5, #1
 8003b56:	4628      	mov	r0, r5
 8003b58:	b007      	add	sp, #28
 8003b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003b62:	2a0d      	cmp	r2, #13
 8003b64:	d8e6      	bhi.n	8003b34 <_scanf_float+0x64>
 8003b66:	a101      	add	r1, pc, #4	; (adr r1, 8003b6c <_scanf_float+0x9c>)
 8003b68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b6c:	08003cab 	.word	0x08003cab
 8003b70:	08003b35 	.word	0x08003b35
 8003b74:	08003b35 	.word	0x08003b35
 8003b78:	08003b35 	.word	0x08003b35
 8003b7c:	08003d0b 	.word	0x08003d0b
 8003b80:	08003ce3 	.word	0x08003ce3
 8003b84:	08003b35 	.word	0x08003b35
 8003b88:	08003b35 	.word	0x08003b35
 8003b8c:	08003cb9 	.word	0x08003cb9
 8003b90:	08003b35 	.word	0x08003b35
 8003b94:	08003b35 	.word	0x08003b35
 8003b98:	08003b35 	.word	0x08003b35
 8003b9c:	08003b35 	.word	0x08003b35
 8003ba0:	08003c71 	.word	0x08003c71
 8003ba4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003ba8:	e7db      	b.n	8003b62 <_scanf_float+0x92>
 8003baa:	290e      	cmp	r1, #14
 8003bac:	d8c2      	bhi.n	8003b34 <_scanf_float+0x64>
 8003bae:	a001      	add	r0, pc, #4	; (adr r0, 8003bb4 <_scanf_float+0xe4>)
 8003bb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003bb4:	08003c63 	.word	0x08003c63
 8003bb8:	08003b35 	.word	0x08003b35
 8003bbc:	08003c63 	.word	0x08003c63
 8003bc0:	08003cf7 	.word	0x08003cf7
 8003bc4:	08003b35 	.word	0x08003b35
 8003bc8:	08003c11 	.word	0x08003c11
 8003bcc:	08003c4d 	.word	0x08003c4d
 8003bd0:	08003c4d 	.word	0x08003c4d
 8003bd4:	08003c4d 	.word	0x08003c4d
 8003bd8:	08003c4d 	.word	0x08003c4d
 8003bdc:	08003c4d 	.word	0x08003c4d
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c4d 	.word	0x08003c4d
 8003bf0:	2b6e      	cmp	r3, #110	; 0x6e
 8003bf2:	d809      	bhi.n	8003c08 <_scanf_float+0x138>
 8003bf4:	2b60      	cmp	r3, #96	; 0x60
 8003bf6:	d8b2      	bhi.n	8003b5e <_scanf_float+0x8e>
 8003bf8:	2b54      	cmp	r3, #84	; 0x54
 8003bfa:	d077      	beq.n	8003cec <_scanf_float+0x21c>
 8003bfc:	2b59      	cmp	r3, #89	; 0x59
 8003bfe:	d199      	bne.n	8003b34 <_scanf_float+0x64>
 8003c00:	2d07      	cmp	r5, #7
 8003c02:	d197      	bne.n	8003b34 <_scanf_float+0x64>
 8003c04:	2508      	movs	r5, #8
 8003c06:	e029      	b.n	8003c5c <_scanf_float+0x18c>
 8003c08:	2b74      	cmp	r3, #116	; 0x74
 8003c0a:	d06f      	beq.n	8003cec <_scanf_float+0x21c>
 8003c0c:	2b79      	cmp	r3, #121	; 0x79
 8003c0e:	e7f6      	b.n	8003bfe <_scanf_float+0x12e>
 8003c10:	6821      	ldr	r1, [r4, #0]
 8003c12:	05c8      	lsls	r0, r1, #23
 8003c14:	d51a      	bpl.n	8003c4c <_scanf_float+0x17c>
 8003c16:	9b02      	ldr	r3, [sp, #8]
 8003c18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003c1c:	6021      	str	r1, [r4, #0]
 8003c1e:	f109 0901 	add.w	r9, r9, #1
 8003c22:	b11b      	cbz	r3, 8003c2c <_scanf_float+0x15c>
 8003c24:	3b01      	subs	r3, #1
 8003c26:	3201      	adds	r2, #1
 8003c28:	9302      	str	r3, [sp, #8]
 8003c2a:	60a2      	str	r2, [r4, #8]
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	6923      	ldr	r3, [r4, #16]
 8003c34:	3301      	adds	r3, #1
 8003c36:	6123      	str	r3, [r4, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	f340 8084 	ble.w	8003d4c <_scanf_float+0x27c>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	e766      	b.n	8003b1a <_scanf_float+0x4a>
 8003c4c:	eb1a 0f05 	cmn.w	sl, r5
 8003c50:	f47f af70 	bne.w	8003b34 <_scanf_float+0x64>
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8003c60:	e7e4      	b.n	8003c2c <_scanf_float+0x15c>
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	0610      	lsls	r0, r2, #24
 8003c66:	f57f af65 	bpl.w	8003b34 <_scanf_float+0x64>
 8003c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c6e:	e7f4      	b.n	8003c5a <_scanf_float+0x18a>
 8003c70:	f1ba 0f00 	cmp.w	sl, #0
 8003c74:	d10e      	bne.n	8003c94 <_scanf_float+0x1c4>
 8003c76:	f1b9 0f00 	cmp.w	r9, #0
 8003c7a:	d10e      	bne.n	8003c9a <_scanf_float+0x1ca>
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c86:	d108      	bne.n	8003c9a <_scanf_float+0x1ca>
 8003c88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c8c:	f04f 0a01 	mov.w	sl, #1
 8003c90:	6022      	str	r2, [r4, #0]
 8003c92:	e7e3      	b.n	8003c5c <_scanf_float+0x18c>
 8003c94:	f1ba 0f02 	cmp.w	sl, #2
 8003c98:	d055      	beq.n	8003d46 <_scanf_float+0x276>
 8003c9a:	2d01      	cmp	r5, #1
 8003c9c:	d002      	beq.n	8003ca4 <_scanf_float+0x1d4>
 8003c9e:	2d04      	cmp	r5, #4
 8003ca0:	f47f af48 	bne.w	8003b34 <_scanf_float+0x64>
 8003ca4:	3501      	adds	r5, #1
 8003ca6:	b2ed      	uxtb	r5, r5
 8003ca8:	e7d8      	b.n	8003c5c <_scanf_float+0x18c>
 8003caa:	f1ba 0f01 	cmp.w	sl, #1
 8003cae:	f47f af41 	bne.w	8003b34 <_scanf_float+0x64>
 8003cb2:	f04f 0a02 	mov.w	sl, #2
 8003cb6:	e7d1      	b.n	8003c5c <_scanf_float+0x18c>
 8003cb8:	b97d      	cbnz	r5, 8003cda <_scanf_float+0x20a>
 8003cba:	f1b9 0f00 	cmp.w	r9, #0
 8003cbe:	f47f af3c 	bne.w	8003b3a <_scanf_float+0x6a>
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003cc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ccc:	f47f af39 	bne.w	8003b42 <_scanf_float+0x72>
 8003cd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003cd4:	2501      	movs	r5, #1
 8003cd6:	6022      	str	r2, [r4, #0]
 8003cd8:	e7c0      	b.n	8003c5c <_scanf_float+0x18c>
 8003cda:	2d03      	cmp	r5, #3
 8003cdc:	d0e2      	beq.n	8003ca4 <_scanf_float+0x1d4>
 8003cde:	2d05      	cmp	r5, #5
 8003ce0:	e7de      	b.n	8003ca0 <_scanf_float+0x1d0>
 8003ce2:	2d02      	cmp	r5, #2
 8003ce4:	f47f af26 	bne.w	8003b34 <_scanf_float+0x64>
 8003ce8:	2503      	movs	r5, #3
 8003cea:	e7b7      	b.n	8003c5c <_scanf_float+0x18c>
 8003cec:	2d06      	cmp	r5, #6
 8003cee:	f47f af21 	bne.w	8003b34 <_scanf_float+0x64>
 8003cf2:	2507      	movs	r5, #7
 8003cf4:	e7b2      	b.n	8003c5c <_scanf_float+0x18c>
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	0591      	lsls	r1, r2, #22
 8003cfa:	f57f af1b 	bpl.w	8003b34 <_scanf_float+0x64>
 8003cfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003d02:	6022      	str	r2, [r4, #0]
 8003d04:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d08:	e7a8      	b.n	8003c5c <_scanf_float+0x18c>
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003d10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003d14:	d006      	beq.n	8003d24 <_scanf_float+0x254>
 8003d16:	0550      	lsls	r0, r2, #21
 8003d18:	f57f af0c 	bpl.w	8003b34 <_scanf_float+0x64>
 8003d1c:	f1b9 0f00 	cmp.w	r9, #0
 8003d20:	f43f af0f 	beq.w	8003b42 <_scanf_float+0x72>
 8003d24:	0591      	lsls	r1, r2, #22
 8003d26:	bf58      	it	pl
 8003d28:	9901      	ldrpl	r1, [sp, #4]
 8003d2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d2e:	bf58      	it	pl
 8003d30:	eba9 0101 	subpl.w	r1, r9, r1
 8003d34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003d38:	f04f 0900 	mov.w	r9, #0
 8003d3c:	bf58      	it	pl
 8003d3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d42:	6022      	str	r2, [r4, #0]
 8003d44:	e78a      	b.n	8003c5c <_scanf_float+0x18c>
 8003d46:	f04f 0a03 	mov.w	sl, #3
 8003d4a:	e787      	b.n	8003c5c <_scanf_float+0x18c>
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	4640      	mov	r0, r8
 8003d50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d54:	4798      	blx	r3
 8003d56:	2800      	cmp	r0, #0
 8003d58:	f43f aedf 	beq.w	8003b1a <_scanf_float+0x4a>
 8003d5c:	e6ea      	b.n	8003b34 <_scanf_float+0x64>
 8003d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d62:	463a      	mov	r2, r7
 8003d64:	4640      	mov	r0, r8
 8003d66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d6a:	4798      	blx	r3
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	e6ec      	b.n	8003b4e <_scanf_float+0x7e>
 8003d74:	1e6b      	subs	r3, r5, #1
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d825      	bhi.n	8003dc6 <_scanf_float+0x2f6>
 8003d7a:	2d02      	cmp	r5, #2
 8003d7c:	d836      	bhi.n	8003dec <_scanf_float+0x31c>
 8003d7e:	455e      	cmp	r6, fp
 8003d80:	f67f aee8 	bls.w	8003b54 <_scanf_float+0x84>
 8003d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d88:	463a      	mov	r2, r7
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d90:	4798      	blx	r3
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	6123      	str	r3, [r4, #16]
 8003d98:	e7f1      	b.n	8003d7e <_scanf_float+0x2ae>
 8003d9a:	9802      	ldr	r0, [sp, #8]
 8003d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003da0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003da4:	463a      	mov	r2, r7
 8003da6:	9002      	str	r0, [sp, #8]
 8003da8:	4640      	mov	r0, r8
 8003daa:	4798      	blx	r3
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003db6:	fa5f fa8a 	uxtb.w	sl, sl
 8003dba:	f1ba 0f02 	cmp.w	sl, #2
 8003dbe:	d1ec      	bne.n	8003d9a <_scanf_float+0x2ca>
 8003dc0:	3d03      	subs	r5, #3
 8003dc2:	b2ed      	uxtb	r5, r5
 8003dc4:	1b76      	subs	r6, r6, r5
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	05da      	lsls	r2, r3, #23
 8003dca:	d52f      	bpl.n	8003e2c <_scanf_float+0x35c>
 8003dcc:	055b      	lsls	r3, r3, #21
 8003dce:	d510      	bpl.n	8003df2 <_scanf_float+0x322>
 8003dd0:	455e      	cmp	r6, fp
 8003dd2:	f67f aebf 	bls.w	8003b54 <_scanf_float+0x84>
 8003dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dda:	463a      	mov	r2, r7
 8003ddc:	4640      	mov	r0, r8
 8003dde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003de2:	4798      	blx	r3
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	e7f1      	b.n	8003dd0 <_scanf_float+0x300>
 8003dec:	46aa      	mov	sl, r5
 8003dee:	9602      	str	r6, [sp, #8]
 8003df0:	e7df      	b.n	8003db2 <_scanf_float+0x2e2>
 8003df2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	2965      	cmp	r1, #101	; 0x65
 8003dfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8003dfe:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	d00c      	beq.n	8003e20 <_scanf_float+0x350>
 8003e06:	2945      	cmp	r1, #69	; 0x45
 8003e08:	d00a      	beq.n	8003e20 <_scanf_float+0x350>
 8003e0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e0e:	463a      	mov	r2, r7
 8003e10:	4640      	mov	r0, r8
 8003e12:	4798      	blx	r3
 8003e14:	6923      	ldr	r3, [r4, #16]
 8003e16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	1eb5      	subs	r5, r6, #2
 8003e1e:	6123      	str	r3, [r4, #16]
 8003e20:	463a      	mov	r2, r7
 8003e22:	4640      	mov	r0, r8
 8003e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e28:	4798      	blx	r3
 8003e2a:	462e      	mov	r6, r5
 8003e2c:	6825      	ldr	r5, [r4, #0]
 8003e2e:	f015 0510 	ands.w	r5, r5, #16
 8003e32:	d155      	bne.n	8003ee0 <_scanf_float+0x410>
 8003e34:	7035      	strb	r5, [r6, #0]
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d11b      	bne.n	8003e7a <_scanf_float+0x3aa>
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	454b      	cmp	r3, r9
 8003e46:	eba3 0209 	sub.w	r2, r3, r9
 8003e4a:	d123      	bne.n	8003e94 <_scanf_float+0x3c4>
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4659      	mov	r1, fp
 8003e50:	4640      	mov	r0, r8
 8003e52:	f000 febd 	bl	8004bd0 <_strtod_r>
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	f012 0f02 	tst.w	r2, #2
 8003e5e:	4606      	mov	r6, r0
 8003e60:	460f      	mov	r7, r1
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	d021      	beq.n	8003eaa <_scanf_float+0x3da>
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	9903      	ldr	r1, [sp, #12]
 8003e6a:	600a      	str	r2, [r1, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	e9c3 6700 	strd	r6, r7, [r3]
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60e3      	str	r3, [r4, #12]
 8003e78:	e66d      	b.n	8003b56 <_scanf_float+0x86>
 8003e7a:	9b04      	ldr	r3, [sp, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0e5      	beq.n	8003e4c <_scanf_float+0x37c>
 8003e80:	9905      	ldr	r1, [sp, #20]
 8003e82:	230a      	movs	r3, #10
 8003e84:	462a      	mov	r2, r5
 8003e86:	4640      	mov	r0, r8
 8003e88:	3101      	adds	r1, #1
 8003e8a:	f000 ff23 	bl	8004cd4 <_strtol_r>
 8003e8e:	9b04      	ldr	r3, [sp, #16]
 8003e90:	9e05      	ldr	r6, [sp, #20]
 8003e92:	1ac2      	subs	r2, r0, r3
 8003e94:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003e98:	429e      	cmp	r6, r3
 8003e9a:	bf28      	it	cs
 8003e9c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	4910      	ldr	r1, [pc, #64]	; (8003ee4 <_scanf_float+0x414>)
 8003ea4:	f000 f826 	bl	8003ef4 <siprintf>
 8003ea8:	e7d0      	b.n	8003e4c <_scanf_float+0x37c>
 8003eaa:	f012 0f04 	tst.w	r2, #4
 8003eae:	f103 0204 	add.w	r2, r3, #4
 8003eb2:	d1d9      	bne.n	8003e68 <_scanf_float+0x398>
 8003eb4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003eb8:	f8cc 2000 	str.w	r2, [ip]
 8003ebc:	f8d3 8000 	ldr.w	r8, [r3]
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	f7fc fda2 	bl	8000a0c <__aeabi_dcmpun>
 8003ec8:	b128      	cbz	r0, 8003ed6 <_scanf_float+0x406>
 8003eca:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <_scanf_float+0x418>)
 8003ecc:	f000 f80e 	bl	8003eec <nanf>
 8003ed0:	f8c8 0000 	str.w	r0, [r8]
 8003ed4:	e7cd      	b.n	8003e72 <_scanf_float+0x3a2>
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	4639      	mov	r1, r7
 8003eda:	f7fc fdf5 	bl	8000ac8 <__aeabi_d2f>
 8003ede:	e7f7      	b.n	8003ed0 <_scanf_float+0x400>
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	e638      	b.n	8003b56 <_scanf_float+0x86>
 8003ee4:	080080c0 	.word	0x080080c0
 8003ee8:	080084c8 	.word	0x080084c8

08003eec <nanf>:
 8003eec:	4800      	ldr	r0, [pc, #0]	; (8003ef0 <nanf+0x4>)
 8003eee:	4770      	bx	lr
 8003ef0:	7fc00000 	.word	0x7fc00000

08003ef4 <siprintf>:
 8003ef4:	b40e      	push	{r1, r2, r3}
 8003ef6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003efa:	b500      	push	{lr}
 8003efc:	b09c      	sub	sp, #112	; 0x70
 8003efe:	ab1d      	add	r3, sp, #116	; 0x74
 8003f00:	9002      	str	r0, [sp, #8]
 8003f02:	9006      	str	r0, [sp, #24]
 8003f04:	9107      	str	r1, [sp, #28]
 8003f06:	9104      	str	r1, [sp, #16]
 8003f08:	4808      	ldr	r0, [pc, #32]	; (8003f2c <siprintf+0x38>)
 8003f0a:	4909      	ldr	r1, [pc, #36]	; (8003f30 <siprintf+0x3c>)
 8003f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f10:	9105      	str	r1, [sp, #20]
 8003f12:	6800      	ldr	r0, [r0, #0]
 8003f14:	a902      	add	r1, sp, #8
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	f002 ff32 	bl	8006d80 <_svfiprintf_r>
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	9b02      	ldr	r3, [sp, #8]
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	b01c      	add	sp, #112	; 0x70
 8003f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f28:	b003      	add	sp, #12
 8003f2a:	4770      	bx	lr
 8003f2c:	20000014 	.word	0x20000014
 8003f30:	ffff0208 	.word	0xffff0208

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f003 f820 	bl	8006f80 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	05db      	lsls	r3, r3, #23
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f002 f8ba 	bl	80060e8 <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	4632      	mov	r2, r6
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	463b      	mov	r3, r7
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 bea5 	b.w	8004cd8 <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f002 f8a7 	bl	80060e8 <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 bea1 	b.w	8004cfc <_close_r>

08003fba <sulp>:
 8003fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbe:	460f      	mov	r7, r1
 8003fc0:	4690      	mov	r8, r2
 8003fc2:	f002 fc49 	bl	8006858 <__ulp>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460d      	mov	r5, r1
 8003fca:	f1b8 0f00 	cmp.w	r8, #0
 8003fce:	d011      	beq.n	8003ff4 <sulp+0x3a>
 8003fd0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003fd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dd0b      	ble.n	8003ff4 <sulp+0x3a>
 8003fdc:	2400      	movs	r4, #0
 8003fde:	051b      	lsls	r3, r3, #20
 8003fe0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003fe4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003fe8:	4622      	mov	r2, r4
 8003fea:	462b      	mov	r3, r5
 8003fec:	f7fc fa74 	bl	80004d8 <__aeabi_dmul>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	0000      	movs	r0, r0
	...

08004000 <_strtod_l>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	469b      	mov	fp, r3
 8004006:	2300      	movs	r3, #0
 8004008:	b09f      	sub	sp, #124	; 0x7c
 800400a:	931a      	str	r3, [sp, #104]	; 0x68
 800400c:	4b9e      	ldr	r3, [pc, #632]	; (8004288 <_strtod_l+0x288>)
 800400e:	4682      	mov	sl, r0
 8004010:	681f      	ldr	r7, [r3, #0]
 8004012:	460e      	mov	r6, r1
 8004014:	4638      	mov	r0, r7
 8004016:	9215      	str	r2, [sp, #84]	; 0x54
 8004018:	f7fc f89a 	bl	8000150 <strlen>
 800401c:	f04f 0800 	mov.w	r8, #0
 8004020:	4604      	mov	r4, r0
 8004022:	f04f 0900 	mov.w	r9, #0
 8004026:	9619      	str	r6, [sp, #100]	; 0x64
 8004028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	2a2b      	cmp	r2, #43	; 0x2b
 800402e:	d04c      	beq.n	80040ca <_strtod_l+0xca>
 8004030:	d83a      	bhi.n	80040a8 <_strtod_l+0xa8>
 8004032:	2a0d      	cmp	r2, #13
 8004034:	d833      	bhi.n	800409e <_strtod_l+0x9e>
 8004036:	2a08      	cmp	r2, #8
 8004038:	d833      	bhi.n	80040a2 <_strtod_l+0xa2>
 800403a:	2a00      	cmp	r2, #0
 800403c:	d03d      	beq.n	80040ba <_strtod_l+0xba>
 800403e:	2300      	movs	r3, #0
 8004040:	930a      	str	r3, [sp, #40]	; 0x28
 8004042:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004044:	782b      	ldrb	r3, [r5, #0]
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	f040 80aa 	bne.w	80041a0 <_strtod_l+0x1a0>
 800404c:	786b      	ldrb	r3, [r5, #1]
 800404e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004052:	2b58      	cmp	r3, #88	; 0x58
 8004054:	d166      	bne.n	8004124 <_strtod_l+0x124>
 8004056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004058:	4650      	mov	r0, sl
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	ab1a      	add	r3, sp, #104	; 0x68
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4a8a      	ldr	r2, [pc, #552]	; (800428c <_strtod_l+0x28c>)
 8004062:	f8cd b008 	str.w	fp, [sp, #8]
 8004066:	ab1b      	add	r3, sp, #108	; 0x6c
 8004068:	a919      	add	r1, sp, #100	; 0x64
 800406a:	f001 fd3b 	bl	8005ae4 <__gethex>
 800406e:	f010 0607 	ands.w	r6, r0, #7
 8004072:	4604      	mov	r4, r0
 8004074:	d005      	beq.n	8004082 <_strtod_l+0x82>
 8004076:	2e06      	cmp	r6, #6
 8004078:	d129      	bne.n	80040ce <_strtod_l+0xce>
 800407a:	2300      	movs	r3, #0
 800407c:	3501      	adds	r5, #1
 800407e:	9519      	str	r5, [sp, #100]	; 0x64
 8004080:	930a      	str	r3, [sp, #40]	; 0x28
 8004082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 858a 	bne.w	8004b9e <_strtod_l+0xb9e>
 800408a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408c:	b1d3      	cbz	r3, 80040c4 <_strtod_l+0xc4>
 800408e:	4642      	mov	r2, r8
 8004090:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	b01f      	add	sp, #124	; 0x7c
 800409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409e:	2a20      	cmp	r2, #32
 80040a0:	d1cd      	bne.n	800403e <_strtod_l+0x3e>
 80040a2:	3301      	adds	r3, #1
 80040a4:	9319      	str	r3, [sp, #100]	; 0x64
 80040a6:	e7bf      	b.n	8004028 <_strtod_l+0x28>
 80040a8:	2a2d      	cmp	r2, #45	; 0x2d
 80040aa:	d1c8      	bne.n	800403e <_strtod_l+0x3e>
 80040ac:	2201      	movs	r2, #1
 80040ae:	920a      	str	r2, [sp, #40]	; 0x28
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	9219      	str	r2, [sp, #100]	; 0x64
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1c3      	bne.n	8004042 <_strtod_l+0x42>
 80040ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040bc:	9619      	str	r6, [sp, #100]	; 0x64
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 856b 	bne.w	8004b9a <_strtod_l+0xb9a>
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	e7e4      	b.n	8004094 <_strtod_l+0x94>
 80040ca:	2200      	movs	r2, #0
 80040cc:	e7ef      	b.n	80040ae <_strtod_l+0xae>
 80040ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80040d0:	b13a      	cbz	r2, 80040e2 <_strtod_l+0xe2>
 80040d2:	2135      	movs	r1, #53	; 0x35
 80040d4:	a81c      	add	r0, sp, #112	; 0x70
 80040d6:	f002 fcc3 	bl	8006a60 <__copybits>
 80040da:	4650      	mov	r0, sl
 80040dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80040de:	f002 f88b 	bl	80061f8 <_Bfree>
 80040e2:	3e01      	subs	r6, #1
 80040e4:	2e04      	cmp	r6, #4
 80040e6:	d806      	bhi.n	80040f6 <_strtod_l+0xf6>
 80040e8:	e8df f006 	tbb	[pc, r6]
 80040ec:	1714030a 	.word	0x1714030a
 80040f0:	0a          	.byte	0x0a
 80040f1:	00          	.byte	0x00
 80040f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80040f6:	0721      	lsls	r1, r4, #28
 80040f8:	d5c3      	bpl.n	8004082 <_strtod_l+0x82>
 80040fa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80040fe:	e7c0      	b.n	8004082 <_strtod_l+0x82>
 8004100:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004102:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004106:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800410a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800410e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004112:	e7f0      	b.n	80040f6 <_strtod_l+0xf6>
 8004114:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004290 <_strtod_l+0x290>
 8004118:	e7ed      	b.n	80040f6 <_strtod_l+0xf6>
 800411a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800411e:	f04f 38ff 	mov.w	r8, #4294967295
 8004122:	e7e8      	b.n	80040f6 <_strtod_l+0xf6>
 8004124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	9219      	str	r2, [sp, #100]	; 0x64
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d0f9      	beq.n	8004124 <_strtod_l+0x124>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0a6      	beq.n	8004082 <_strtod_l+0x82>
 8004134:	2301      	movs	r3, #1
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800413a:	220a      	movs	r2, #10
 800413c:	9308      	str	r3, [sp, #32]
 800413e:	2300      	movs	r3, #0
 8004140:	469b      	mov	fp, r3
 8004142:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004146:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004148:	7805      	ldrb	r5, [r0, #0]
 800414a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800414e:	b2d9      	uxtb	r1, r3
 8004150:	2909      	cmp	r1, #9
 8004152:	d927      	bls.n	80041a4 <_strtod_l+0x1a4>
 8004154:	4622      	mov	r2, r4
 8004156:	4639      	mov	r1, r7
 8004158:	f002 ff3a 	bl	8006fd0 <strncmp>
 800415c:	2800      	cmp	r0, #0
 800415e:	d033      	beq.n	80041c8 <_strtod_l+0x1c8>
 8004160:	2000      	movs	r0, #0
 8004162:	462a      	mov	r2, r5
 8004164:	465c      	mov	r4, fp
 8004166:	4603      	mov	r3, r0
 8004168:	9004      	str	r0, [sp, #16]
 800416a:	2a65      	cmp	r2, #101	; 0x65
 800416c:	d001      	beq.n	8004172 <_strtod_l+0x172>
 800416e:	2a45      	cmp	r2, #69	; 0x45
 8004170:	d114      	bne.n	800419c <_strtod_l+0x19c>
 8004172:	b91c      	cbnz	r4, 800417c <_strtod_l+0x17c>
 8004174:	9a07      	ldr	r2, [sp, #28]
 8004176:	4302      	orrs	r2, r0
 8004178:	d09f      	beq.n	80040ba <_strtod_l+0xba>
 800417a:	2400      	movs	r4, #0
 800417c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800417e:	1c72      	adds	r2, r6, #1
 8004180:	9219      	str	r2, [sp, #100]	; 0x64
 8004182:	7872      	ldrb	r2, [r6, #1]
 8004184:	2a2b      	cmp	r2, #43	; 0x2b
 8004186:	d079      	beq.n	800427c <_strtod_l+0x27c>
 8004188:	2a2d      	cmp	r2, #45	; 0x2d
 800418a:	f000 8083 	beq.w	8004294 <_strtod_l+0x294>
 800418e:	2700      	movs	r7, #0
 8004190:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004194:	2909      	cmp	r1, #9
 8004196:	f240 8083 	bls.w	80042a0 <_strtod_l+0x2a0>
 800419a:	9619      	str	r6, [sp, #100]	; 0x64
 800419c:	2500      	movs	r5, #0
 800419e:	e09f      	b.n	80042e0 <_strtod_l+0x2e0>
 80041a0:	2300      	movs	r3, #0
 80041a2:	e7c8      	b.n	8004136 <_strtod_l+0x136>
 80041a4:	f1bb 0f08 	cmp.w	fp, #8
 80041a8:	bfd5      	itete	le
 80041aa:	9906      	ldrle	r1, [sp, #24]
 80041ac:	9905      	ldrgt	r1, [sp, #20]
 80041ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80041b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80041b6:	f100 0001 	add.w	r0, r0, #1
 80041ba:	bfd4      	ite	le
 80041bc:	9306      	strle	r3, [sp, #24]
 80041be:	9305      	strgt	r3, [sp, #20]
 80041c0:	f10b 0b01 	add.w	fp, fp, #1
 80041c4:	9019      	str	r0, [sp, #100]	; 0x64
 80041c6:	e7be      	b.n	8004146 <_strtod_l+0x146>
 80041c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041ca:	191a      	adds	r2, r3, r4
 80041cc:	9219      	str	r2, [sp, #100]	; 0x64
 80041ce:	5d1a      	ldrb	r2, [r3, r4]
 80041d0:	f1bb 0f00 	cmp.w	fp, #0
 80041d4:	d036      	beq.n	8004244 <_strtod_l+0x244>
 80041d6:	465c      	mov	r4, fp
 80041d8:	9004      	str	r0, [sp, #16]
 80041da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d912      	bls.n	8004208 <_strtod_l+0x208>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e7c1      	b.n	800416a <_strtod_l+0x16a>
 80041e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041e8:	3001      	adds	r0, #1
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	9219      	str	r2, [sp, #100]	; 0x64
 80041ee:	785a      	ldrb	r2, [r3, #1]
 80041f0:	2a30      	cmp	r2, #48	; 0x30
 80041f2:	d0f8      	beq.n	80041e6 <_strtod_l+0x1e6>
 80041f4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	f200 84d5 	bhi.w	8004ba8 <_strtod_l+0xba8>
 80041fe:	9004      	str	r0, [sp, #16]
 8004200:	2000      	movs	r0, #0
 8004202:	4604      	mov	r4, r0
 8004204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004206:	9308      	str	r3, [sp, #32]
 8004208:	3a30      	subs	r2, #48	; 0x30
 800420a:	f100 0301 	add.w	r3, r0, #1
 800420e:	d013      	beq.n	8004238 <_strtod_l+0x238>
 8004210:	9904      	ldr	r1, [sp, #16]
 8004212:	1905      	adds	r5, r0, r4
 8004214:	4419      	add	r1, r3
 8004216:	9104      	str	r1, [sp, #16]
 8004218:	4623      	mov	r3, r4
 800421a:	210a      	movs	r1, #10
 800421c:	42ab      	cmp	r3, r5
 800421e:	d113      	bne.n	8004248 <_strtod_l+0x248>
 8004220:	1823      	adds	r3, r4, r0
 8004222:	2b08      	cmp	r3, #8
 8004224:	f104 0401 	add.w	r4, r4, #1
 8004228:	4404      	add	r4, r0
 800422a:	dc1b      	bgt.n	8004264 <_strtod_l+0x264>
 800422c:	230a      	movs	r3, #10
 800422e:	9906      	ldr	r1, [sp, #24]
 8004230:	fb03 2301 	mla	r3, r3, r1, r2
 8004234:	9306      	str	r3, [sp, #24]
 8004236:	2300      	movs	r3, #0
 8004238:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800423a:	4618      	mov	r0, r3
 800423c:	1c51      	adds	r1, r2, #1
 800423e:	9119      	str	r1, [sp, #100]	; 0x64
 8004240:	7852      	ldrb	r2, [r2, #1]
 8004242:	e7ca      	b.n	80041da <_strtod_l+0x1da>
 8004244:	4658      	mov	r0, fp
 8004246:	e7d3      	b.n	80041f0 <_strtod_l+0x1f0>
 8004248:	2b08      	cmp	r3, #8
 800424a:	dc04      	bgt.n	8004256 <_strtod_l+0x256>
 800424c:	9f06      	ldr	r7, [sp, #24]
 800424e:	434f      	muls	r7, r1
 8004250:	9706      	str	r7, [sp, #24]
 8004252:	3301      	adds	r3, #1
 8004254:	e7e2      	b.n	800421c <_strtod_l+0x21c>
 8004256:	1c5f      	adds	r7, r3, #1
 8004258:	2f10      	cmp	r7, #16
 800425a:	bfde      	ittt	le
 800425c:	9f05      	ldrle	r7, [sp, #20]
 800425e:	434f      	mulle	r7, r1
 8004260:	9705      	strle	r7, [sp, #20]
 8004262:	e7f6      	b.n	8004252 <_strtod_l+0x252>
 8004264:	2c10      	cmp	r4, #16
 8004266:	bfdf      	itttt	le
 8004268:	230a      	movle	r3, #10
 800426a:	9905      	ldrle	r1, [sp, #20]
 800426c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004270:	9305      	strle	r3, [sp, #20]
 8004272:	e7e0      	b.n	8004236 <_strtod_l+0x236>
 8004274:	2300      	movs	r3, #0
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	2301      	movs	r3, #1
 800427a:	e77b      	b.n	8004174 <_strtod_l+0x174>
 800427c:	2700      	movs	r7, #0
 800427e:	1cb2      	adds	r2, r6, #2
 8004280:	9219      	str	r2, [sp, #100]	; 0x64
 8004282:	78b2      	ldrb	r2, [r6, #2]
 8004284:	e784      	b.n	8004190 <_strtod_l+0x190>
 8004286:	bf00      	nop
 8004288:	08008310 	.word	0x08008310
 800428c:	080080c8 	.word	0x080080c8
 8004290:	7ff00000 	.word	0x7ff00000
 8004294:	2701      	movs	r7, #1
 8004296:	e7f2      	b.n	800427e <_strtod_l+0x27e>
 8004298:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800429a:	1c51      	adds	r1, r2, #1
 800429c:	9119      	str	r1, [sp, #100]	; 0x64
 800429e:	7852      	ldrb	r2, [r2, #1]
 80042a0:	2a30      	cmp	r2, #48	; 0x30
 80042a2:	d0f9      	beq.n	8004298 <_strtod_l+0x298>
 80042a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80042a8:	2908      	cmp	r1, #8
 80042aa:	f63f af77 	bhi.w	800419c <_strtod_l+0x19c>
 80042ae:	f04f 0e0a 	mov.w	lr, #10
 80042b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80042b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042b8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042bc:	1c51      	adds	r1, r2, #1
 80042be:	9119      	str	r1, [sp, #100]	; 0x64
 80042c0:	7852      	ldrb	r2, [r2, #1]
 80042c2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80042c6:	2d09      	cmp	r5, #9
 80042c8:	d935      	bls.n	8004336 <_strtod_l+0x336>
 80042ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80042cc:	1b49      	subs	r1, r1, r5
 80042ce:	2908      	cmp	r1, #8
 80042d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80042d4:	dc02      	bgt.n	80042dc <_strtod_l+0x2dc>
 80042d6:	4565      	cmp	r5, ip
 80042d8:	bfa8      	it	ge
 80042da:	4665      	movge	r5, ip
 80042dc:	b107      	cbz	r7, 80042e0 <_strtod_l+0x2e0>
 80042de:	426d      	negs	r5, r5
 80042e0:	2c00      	cmp	r4, #0
 80042e2:	d14c      	bne.n	800437e <_strtod_l+0x37e>
 80042e4:	9907      	ldr	r1, [sp, #28]
 80042e6:	4301      	orrs	r1, r0
 80042e8:	f47f aecb 	bne.w	8004082 <_strtod_l+0x82>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f aee4 	bne.w	80040ba <_strtod_l+0xba>
 80042f2:	2a69      	cmp	r2, #105	; 0x69
 80042f4:	d026      	beq.n	8004344 <_strtod_l+0x344>
 80042f6:	dc23      	bgt.n	8004340 <_strtod_l+0x340>
 80042f8:	2a49      	cmp	r2, #73	; 0x49
 80042fa:	d023      	beq.n	8004344 <_strtod_l+0x344>
 80042fc:	2a4e      	cmp	r2, #78	; 0x4e
 80042fe:	f47f aedc 	bne.w	80040ba <_strtod_l+0xba>
 8004302:	499d      	ldr	r1, [pc, #628]	; (8004578 <_strtod_l+0x578>)
 8004304:	a819      	add	r0, sp, #100	; 0x64
 8004306:	f001 fe3b 	bl	8005f80 <__match>
 800430a:	2800      	cmp	r0, #0
 800430c:	f43f aed5 	beq.w	80040ba <_strtod_l+0xba>
 8004310:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b28      	cmp	r3, #40	; 0x28
 8004316:	d12c      	bne.n	8004372 <_strtod_l+0x372>
 8004318:	4998      	ldr	r1, [pc, #608]	; (800457c <_strtod_l+0x57c>)
 800431a:	aa1c      	add	r2, sp, #112	; 0x70
 800431c:	a819      	add	r0, sp, #100	; 0x64
 800431e:	f001 fe43 	bl	8005fa8 <__hexnan>
 8004322:	2805      	cmp	r0, #5
 8004324:	d125      	bne.n	8004372 <_strtod_l+0x372>
 8004326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004328:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800432c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004330:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004334:	e6a5      	b.n	8004082 <_strtod_l+0x82>
 8004336:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800433a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800433e:	e7bc      	b.n	80042ba <_strtod_l+0x2ba>
 8004340:	2a6e      	cmp	r2, #110	; 0x6e
 8004342:	e7dc      	b.n	80042fe <_strtod_l+0x2fe>
 8004344:	498e      	ldr	r1, [pc, #568]	; (8004580 <_strtod_l+0x580>)
 8004346:	a819      	add	r0, sp, #100	; 0x64
 8004348:	f001 fe1a 	bl	8005f80 <__match>
 800434c:	2800      	cmp	r0, #0
 800434e:	f43f aeb4 	beq.w	80040ba <_strtod_l+0xba>
 8004352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004354:	498b      	ldr	r1, [pc, #556]	; (8004584 <_strtod_l+0x584>)
 8004356:	3b01      	subs	r3, #1
 8004358:	a819      	add	r0, sp, #100	; 0x64
 800435a:	9319      	str	r3, [sp, #100]	; 0x64
 800435c:	f001 fe10 	bl	8005f80 <__match>
 8004360:	b910      	cbnz	r0, 8004368 <_strtod_l+0x368>
 8004362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004364:	3301      	adds	r3, #1
 8004366:	9319      	str	r3, [sp, #100]	; 0x64
 8004368:	f04f 0800 	mov.w	r8, #0
 800436c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004588 <_strtod_l+0x588>
 8004370:	e687      	b.n	8004082 <_strtod_l+0x82>
 8004372:	4886      	ldr	r0, [pc, #536]	; (800458c <_strtod_l+0x58c>)
 8004374:	f002 fe16 	bl	8006fa4 <nan>
 8004378:	4680      	mov	r8, r0
 800437a:	4689      	mov	r9, r1
 800437c:	e681      	b.n	8004082 <_strtod_l+0x82>
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	f1bb 0f00 	cmp.w	fp, #0
 8004384:	bf08      	it	eq
 8004386:	46a3      	moveq	fp, r4
 8004388:	1aeb      	subs	r3, r5, r3
 800438a:	2c10      	cmp	r4, #16
 800438c:	9806      	ldr	r0, [sp, #24]
 800438e:	4626      	mov	r6, r4
 8004390:	9307      	str	r3, [sp, #28]
 8004392:	bfa8      	it	ge
 8004394:	2610      	movge	r6, #16
 8004396:	f7fc f825 	bl	80003e4 <__aeabi_ui2d>
 800439a:	2c09      	cmp	r4, #9
 800439c:	4680      	mov	r8, r0
 800439e:	4689      	mov	r9, r1
 80043a0:	dd13      	ble.n	80043ca <_strtod_l+0x3ca>
 80043a2:	4b7b      	ldr	r3, [pc, #492]	; (8004590 <_strtod_l+0x590>)
 80043a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80043a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80043ac:	f7fc f894 	bl	80004d8 <__aeabi_dmul>
 80043b0:	4680      	mov	r8, r0
 80043b2:	9805      	ldr	r0, [sp, #20]
 80043b4:	4689      	mov	r9, r1
 80043b6:	f7fc f815 	bl	80003e4 <__aeabi_ui2d>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4640      	mov	r0, r8
 80043c0:	4649      	mov	r1, r9
 80043c2:	f7fb fed3 	bl	800016c <__adddf3>
 80043c6:	4680      	mov	r8, r0
 80043c8:	4689      	mov	r9, r1
 80043ca:	2c0f      	cmp	r4, #15
 80043cc:	dc36      	bgt.n	800443c <_strtod_l+0x43c>
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f43f ae56 	beq.w	8004082 <_strtod_l+0x82>
 80043d6:	dd22      	ble.n	800441e <_strtod_l+0x41e>
 80043d8:	2b16      	cmp	r3, #22
 80043da:	dc09      	bgt.n	80043f0 <_strtod_l+0x3f0>
 80043dc:	496c      	ldr	r1, [pc, #432]	; (8004590 <_strtod_l+0x590>)
 80043de:	4642      	mov	r2, r8
 80043e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80043e4:	464b      	mov	r3, r9
 80043e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ea:	f7fc f875 	bl	80004d8 <__aeabi_dmul>
 80043ee:	e7c3      	b.n	8004378 <_strtod_l+0x378>
 80043f0:	9a07      	ldr	r2, [sp, #28]
 80043f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80043f6:	4293      	cmp	r3, r2
 80043f8:	db20      	blt.n	800443c <_strtod_l+0x43c>
 80043fa:	4d65      	ldr	r5, [pc, #404]	; (8004590 <_strtod_l+0x590>)
 80043fc:	f1c4 040f 	rsb	r4, r4, #15
 8004400:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004404:	4642      	mov	r2, r8
 8004406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800440a:	464b      	mov	r3, r9
 800440c:	f7fc f864 	bl	80004d8 <__aeabi_dmul>
 8004410:	9b07      	ldr	r3, [sp, #28]
 8004412:	1b1c      	subs	r4, r3, r4
 8004414:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800441c:	e7e5      	b.n	80043ea <_strtod_l+0x3ea>
 800441e:	9b07      	ldr	r3, [sp, #28]
 8004420:	3316      	adds	r3, #22
 8004422:	db0b      	blt.n	800443c <_strtod_l+0x43c>
 8004424:	9b04      	ldr	r3, [sp, #16]
 8004426:	4640      	mov	r0, r8
 8004428:	1b5d      	subs	r5, r3, r5
 800442a:	4b59      	ldr	r3, [pc, #356]	; (8004590 <_strtod_l+0x590>)
 800442c:	4649      	mov	r1, r9
 800442e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004432:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004436:	f7fc f979 	bl	800072c <__aeabi_ddiv>
 800443a:	e79d      	b.n	8004378 <_strtod_l+0x378>
 800443c:	9b07      	ldr	r3, [sp, #28]
 800443e:	1ba6      	subs	r6, r4, r6
 8004440:	441e      	add	r6, r3
 8004442:	2e00      	cmp	r6, #0
 8004444:	dd74      	ble.n	8004530 <_strtod_l+0x530>
 8004446:	f016 030f 	ands.w	r3, r6, #15
 800444a:	d00a      	beq.n	8004462 <_strtod_l+0x462>
 800444c:	4950      	ldr	r1, [pc, #320]	; (8004590 <_strtod_l+0x590>)
 800444e:	4642      	mov	r2, r8
 8004450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004458:	464b      	mov	r3, r9
 800445a:	f7fc f83d 	bl	80004d8 <__aeabi_dmul>
 800445e:	4680      	mov	r8, r0
 8004460:	4689      	mov	r9, r1
 8004462:	f036 060f 	bics.w	r6, r6, #15
 8004466:	d052      	beq.n	800450e <_strtod_l+0x50e>
 8004468:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800446c:	dd27      	ble.n	80044be <_strtod_l+0x4be>
 800446e:	f04f 0b00 	mov.w	fp, #0
 8004472:	f8cd b010 	str.w	fp, [sp, #16]
 8004476:	f8cd b020 	str.w	fp, [sp, #32]
 800447a:	f8cd b018 	str.w	fp, [sp, #24]
 800447e:	2322      	movs	r3, #34	; 0x22
 8004480:	f04f 0800 	mov.w	r8, #0
 8004484:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004588 <_strtod_l+0x588>
 8004488:	f8ca 3000 	str.w	r3, [sl]
 800448c:	9b08      	ldr	r3, [sp, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f43f adf7 	beq.w	8004082 <_strtod_l+0x82>
 8004494:	4650      	mov	r0, sl
 8004496:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004498:	f001 feae 	bl	80061f8 <_Bfree>
 800449c:	4650      	mov	r0, sl
 800449e:	9906      	ldr	r1, [sp, #24]
 80044a0:	f001 feaa 	bl	80061f8 <_Bfree>
 80044a4:	4650      	mov	r0, sl
 80044a6:	9904      	ldr	r1, [sp, #16]
 80044a8:	f001 fea6 	bl	80061f8 <_Bfree>
 80044ac:	4650      	mov	r0, sl
 80044ae:	9908      	ldr	r1, [sp, #32]
 80044b0:	f001 fea2 	bl	80061f8 <_Bfree>
 80044b4:	4659      	mov	r1, fp
 80044b6:	4650      	mov	r0, sl
 80044b8:	f001 fe9e 	bl	80061f8 <_Bfree>
 80044bc:	e5e1      	b.n	8004082 <_strtod_l+0x82>
 80044be:	4b35      	ldr	r3, [pc, #212]	; (8004594 <_strtod_l+0x594>)
 80044c0:	4640      	mov	r0, r8
 80044c2:	9305      	str	r3, [sp, #20]
 80044c4:	2300      	movs	r3, #0
 80044c6:	4649      	mov	r1, r9
 80044c8:	461f      	mov	r7, r3
 80044ca:	1136      	asrs	r6, r6, #4
 80044cc:	2e01      	cmp	r6, #1
 80044ce:	dc21      	bgt.n	8004514 <_strtod_l+0x514>
 80044d0:	b10b      	cbz	r3, 80044d6 <_strtod_l+0x4d6>
 80044d2:	4680      	mov	r8, r0
 80044d4:	4689      	mov	r9, r1
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <_strtod_l+0x594>)
 80044d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80044dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80044e0:	4642      	mov	r2, r8
 80044e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044e6:	464b      	mov	r3, r9
 80044e8:	f7fb fff6 	bl	80004d8 <__aeabi_dmul>
 80044ec:	4b26      	ldr	r3, [pc, #152]	; (8004588 <_strtod_l+0x588>)
 80044ee:	460a      	mov	r2, r1
 80044f0:	400b      	ands	r3, r1
 80044f2:	4929      	ldr	r1, [pc, #164]	; (8004598 <_strtod_l+0x598>)
 80044f4:	4680      	mov	r8, r0
 80044f6:	428b      	cmp	r3, r1
 80044f8:	d8b9      	bhi.n	800446e <_strtod_l+0x46e>
 80044fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80044fe:	428b      	cmp	r3, r1
 8004500:	bf86      	itte	hi
 8004502:	f04f 38ff 	movhi.w	r8, #4294967295
 8004506:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800459c <_strtod_l+0x59c>
 800450a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800450e:	2300      	movs	r3, #0
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	e07f      	b.n	8004614 <_strtod_l+0x614>
 8004514:	07f2      	lsls	r2, r6, #31
 8004516:	d505      	bpl.n	8004524 <_strtod_l+0x524>
 8004518:	9b05      	ldr	r3, [sp, #20]
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fb ffdb 	bl	80004d8 <__aeabi_dmul>
 8004522:	2301      	movs	r3, #1
 8004524:	9a05      	ldr	r2, [sp, #20]
 8004526:	3701      	adds	r7, #1
 8004528:	3208      	adds	r2, #8
 800452a:	1076      	asrs	r6, r6, #1
 800452c:	9205      	str	r2, [sp, #20]
 800452e:	e7cd      	b.n	80044cc <_strtod_l+0x4cc>
 8004530:	d0ed      	beq.n	800450e <_strtod_l+0x50e>
 8004532:	4276      	negs	r6, r6
 8004534:	f016 020f 	ands.w	r2, r6, #15
 8004538:	d00a      	beq.n	8004550 <_strtod_l+0x550>
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <_strtod_l+0x590>)
 800453c:	4640      	mov	r0, r8
 800453e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004542:	4649      	mov	r1, r9
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc f8f0 	bl	800072c <__aeabi_ddiv>
 800454c:	4680      	mov	r8, r0
 800454e:	4689      	mov	r9, r1
 8004550:	1136      	asrs	r6, r6, #4
 8004552:	d0dc      	beq.n	800450e <_strtod_l+0x50e>
 8004554:	2e1f      	cmp	r6, #31
 8004556:	dd23      	ble.n	80045a0 <_strtod_l+0x5a0>
 8004558:	f04f 0b00 	mov.w	fp, #0
 800455c:	f8cd b010 	str.w	fp, [sp, #16]
 8004560:	f8cd b020 	str.w	fp, [sp, #32]
 8004564:	f8cd b018 	str.w	fp, [sp, #24]
 8004568:	2322      	movs	r3, #34	; 0x22
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	f04f 0900 	mov.w	r9, #0
 8004572:	f8ca 3000 	str.w	r3, [sl]
 8004576:	e789      	b.n	800448c <_strtod_l+0x48c>
 8004578:	08008099 	.word	0x08008099
 800457c:	080080dc 	.word	0x080080dc
 8004580:	08008091 	.word	0x08008091
 8004584:	0800821c 	.word	0x0800821c
 8004588:	7ff00000 	.word	0x7ff00000
 800458c:	080084c8 	.word	0x080084c8
 8004590:	080083a8 	.word	0x080083a8
 8004594:	08008380 	.word	0x08008380
 8004598:	7ca00000 	.word	0x7ca00000
 800459c:	7fefffff 	.word	0x7fefffff
 80045a0:	f016 0310 	ands.w	r3, r6, #16
 80045a4:	bf18      	it	ne
 80045a6:	236a      	movne	r3, #106	; 0x6a
 80045a8:	4640      	mov	r0, r8
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	4649      	mov	r1, r9
 80045ae:	2300      	movs	r3, #0
 80045b0:	4fb0      	ldr	r7, [pc, #704]	; (8004874 <_strtod_l+0x874>)
 80045b2:	07f2      	lsls	r2, r6, #31
 80045b4:	d504      	bpl.n	80045c0 <_strtod_l+0x5c0>
 80045b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ba:	f7fb ff8d 	bl	80004d8 <__aeabi_dmul>
 80045be:	2301      	movs	r3, #1
 80045c0:	1076      	asrs	r6, r6, #1
 80045c2:	f107 0708 	add.w	r7, r7, #8
 80045c6:	d1f4      	bne.n	80045b2 <_strtod_l+0x5b2>
 80045c8:	b10b      	cbz	r3, 80045ce <_strtod_l+0x5ce>
 80045ca:	4680      	mov	r8, r0
 80045cc:	4689      	mov	r9, r1
 80045ce:	9b05      	ldr	r3, [sp, #20]
 80045d0:	b1c3      	cbz	r3, 8004604 <_strtod_l+0x604>
 80045d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80045d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80045da:	2b00      	cmp	r3, #0
 80045dc:	4649      	mov	r1, r9
 80045de:	dd11      	ble.n	8004604 <_strtod_l+0x604>
 80045e0:	2b1f      	cmp	r3, #31
 80045e2:	f340 8127 	ble.w	8004834 <_strtod_l+0x834>
 80045e6:	2b34      	cmp	r3, #52	; 0x34
 80045e8:	bfd8      	it	le
 80045ea:	f04f 33ff 	movle.w	r3, #4294967295
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	bfcf      	iteee	gt
 80045f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80045f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80045fc:	fa03 f202 	lslle.w	r2, r3, r2
 8004600:	ea02 0901 	andle.w	r9, r2, r1
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	4640      	mov	r0, r8
 800460a:	4649      	mov	r1, r9
 800460c:	f7fc f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004610:	2800      	cmp	r0, #0
 8004612:	d1a1      	bne.n	8004558 <_strtod_l+0x558>
 8004614:	9b06      	ldr	r3, [sp, #24]
 8004616:	465a      	mov	r2, fp
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	4650      	mov	r0, sl
 800461c:	4623      	mov	r3, r4
 800461e:	9908      	ldr	r1, [sp, #32]
 8004620:	f001 fe52 	bl	80062c8 <__s2b>
 8004624:	9008      	str	r0, [sp, #32]
 8004626:	2800      	cmp	r0, #0
 8004628:	f43f af21 	beq.w	800446e <_strtod_l+0x46e>
 800462c:	9b04      	ldr	r3, [sp, #16]
 800462e:	f04f 0b00 	mov.w	fp, #0
 8004632:	1b5d      	subs	r5, r3, r5
 8004634:	9b07      	ldr	r3, [sp, #28]
 8004636:	f8cd b010 	str.w	fp, [sp, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	bfb4      	ite	lt
 800463e:	462b      	movlt	r3, r5
 8004640:	2300      	movge	r3, #0
 8004642:	930e      	str	r3, [sp, #56]	; 0x38
 8004644:	9b07      	ldr	r3, [sp, #28]
 8004646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800464a:	9314      	str	r3, [sp, #80]	; 0x50
 800464c:	9b08      	ldr	r3, [sp, #32]
 800464e:	4650      	mov	r0, sl
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	f001 fd91 	bl	8006178 <_Balloc>
 8004656:	9006      	str	r0, [sp, #24]
 8004658:	2800      	cmp	r0, #0
 800465a:	f43f af10 	beq.w	800447e <_strtod_l+0x47e>
 800465e:	9b08      	ldr	r3, [sp, #32]
 8004660:	300c      	adds	r0, #12
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	f103 010c 	add.w	r1, r3, #12
 8004668:	3202      	adds	r2, #2
 800466a:	0092      	lsls	r2, r2, #2
 800466c:	f001 fd76 	bl	800615c <memcpy>
 8004670:	ab1c      	add	r3, sp, #112	; 0x70
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	ab1b      	add	r3, sp, #108	; 0x6c
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	4650      	mov	r0, sl
 800467e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004682:	f002 f963 	bl	800694c <__d2b>
 8004686:	901a      	str	r0, [sp, #104]	; 0x68
 8004688:	2800      	cmp	r0, #0
 800468a:	f43f aef8 	beq.w	800447e <_strtod_l+0x47e>
 800468e:	2101      	movs	r1, #1
 8004690:	4650      	mov	r0, sl
 8004692:	f001 feb1 	bl	80063f8 <__i2b>
 8004696:	4603      	mov	r3, r0
 8004698:	9004      	str	r0, [sp, #16]
 800469a:	2800      	cmp	r0, #0
 800469c:	f43f aeef 	beq.w	800447e <_strtod_l+0x47e>
 80046a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80046a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	bfab      	itete	ge
 80046a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80046aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80046ac:	18ee      	addge	r6, r5, r3
 80046ae:	1b5c      	sublt	r4, r3, r5
 80046b0:	9b05      	ldr	r3, [sp, #20]
 80046b2:	bfa8      	it	ge
 80046b4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80046b6:	eba5 0503 	sub.w	r5, r5, r3
 80046ba:	4415      	add	r5, r2
 80046bc:	4b6e      	ldr	r3, [pc, #440]	; (8004878 <_strtod_l+0x878>)
 80046be:	f105 35ff 	add.w	r5, r5, #4294967295
 80046c2:	bfb8      	it	lt
 80046c4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80046c6:	429d      	cmp	r5, r3
 80046c8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80046cc:	f280 80c4 	bge.w	8004858 <_strtod_l+0x858>
 80046d0:	1b5b      	subs	r3, r3, r5
 80046d2:	2b1f      	cmp	r3, #31
 80046d4:	f04f 0701 	mov.w	r7, #1
 80046d8:	eba2 0203 	sub.w	r2, r2, r3
 80046dc:	f300 80b1 	bgt.w	8004842 <_strtod_l+0x842>
 80046e0:	2500      	movs	r5, #0
 80046e2:	fa07 f303 	lsl.w	r3, r7, r3
 80046e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80046e8:	18b7      	adds	r7, r6, r2
 80046ea:	9b05      	ldr	r3, [sp, #20]
 80046ec:	42be      	cmp	r6, r7
 80046ee:	4414      	add	r4, r2
 80046f0:	441c      	add	r4, r3
 80046f2:	4633      	mov	r3, r6
 80046f4:	bfa8      	it	ge
 80046f6:	463b      	movge	r3, r7
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	bfa8      	it	ge
 80046fc:	4623      	movge	r3, r4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfc2      	ittt	gt
 8004702:	1aff      	subgt	r7, r7, r3
 8004704:	1ae4      	subgt	r4, r4, r3
 8004706:	1af6      	subgt	r6, r6, r3
 8004708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800470a:	2b00      	cmp	r3, #0
 800470c:	dd17      	ble.n	800473e <_strtod_l+0x73e>
 800470e:	461a      	mov	r2, r3
 8004710:	4650      	mov	r0, sl
 8004712:	9904      	ldr	r1, [sp, #16]
 8004714:	f001 ff2e 	bl	8006574 <__pow5mult>
 8004718:	9004      	str	r0, [sp, #16]
 800471a:	2800      	cmp	r0, #0
 800471c:	f43f aeaf 	beq.w	800447e <_strtod_l+0x47e>
 8004720:	4601      	mov	r1, r0
 8004722:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004724:	4650      	mov	r0, sl
 8004726:	f001 fe7d 	bl	8006424 <__multiply>
 800472a:	9009      	str	r0, [sp, #36]	; 0x24
 800472c:	2800      	cmp	r0, #0
 800472e:	f43f aea6 	beq.w	800447e <_strtod_l+0x47e>
 8004732:	4650      	mov	r0, sl
 8004734:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004736:	f001 fd5f 	bl	80061f8 <_Bfree>
 800473a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473c:	931a      	str	r3, [sp, #104]	; 0x68
 800473e:	2f00      	cmp	r7, #0
 8004740:	f300 808e 	bgt.w	8004860 <_strtod_l+0x860>
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd08      	ble.n	800475c <_strtod_l+0x75c>
 800474a:	4650      	mov	r0, sl
 800474c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800474e:	9906      	ldr	r1, [sp, #24]
 8004750:	f001 ff10 	bl	8006574 <__pow5mult>
 8004754:	9006      	str	r0, [sp, #24]
 8004756:	2800      	cmp	r0, #0
 8004758:	f43f ae91 	beq.w	800447e <_strtod_l+0x47e>
 800475c:	2c00      	cmp	r4, #0
 800475e:	dd08      	ble.n	8004772 <_strtod_l+0x772>
 8004760:	4622      	mov	r2, r4
 8004762:	4650      	mov	r0, sl
 8004764:	9906      	ldr	r1, [sp, #24]
 8004766:	f001 ff5f 	bl	8006628 <__lshift>
 800476a:	9006      	str	r0, [sp, #24]
 800476c:	2800      	cmp	r0, #0
 800476e:	f43f ae86 	beq.w	800447e <_strtod_l+0x47e>
 8004772:	2e00      	cmp	r6, #0
 8004774:	dd08      	ble.n	8004788 <_strtod_l+0x788>
 8004776:	4632      	mov	r2, r6
 8004778:	4650      	mov	r0, sl
 800477a:	9904      	ldr	r1, [sp, #16]
 800477c:	f001 ff54 	bl	8006628 <__lshift>
 8004780:	9004      	str	r0, [sp, #16]
 8004782:	2800      	cmp	r0, #0
 8004784:	f43f ae7b 	beq.w	800447e <_strtod_l+0x47e>
 8004788:	4650      	mov	r0, sl
 800478a:	9a06      	ldr	r2, [sp, #24]
 800478c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800478e:	f001 ffd7 	bl	8006740 <__mdiff>
 8004792:	4683      	mov	fp, r0
 8004794:	2800      	cmp	r0, #0
 8004796:	f43f ae72 	beq.w	800447e <_strtod_l+0x47e>
 800479a:	2400      	movs	r4, #0
 800479c:	68c3      	ldr	r3, [r0, #12]
 800479e:	9904      	ldr	r1, [sp, #16]
 80047a0:	60c4      	str	r4, [r0, #12]
 80047a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80047a4:	f001 ffb0 	bl	8006708 <__mcmp>
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	da6b      	bge.n	8004884 <_strtod_l+0x884>
 80047ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ae:	ea53 0308 	orrs.w	r3, r3, r8
 80047b2:	f040 8091 	bne.w	80048d8 <_strtod_l+0x8d8>
 80047b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 808c 	bne.w	80048d8 <_strtod_l+0x8d8>
 80047c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	051b      	lsls	r3, r3, #20
 80047c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80047cc:	f240 8084 	bls.w	80048d8 <_strtod_l+0x8d8>
 80047d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80047d4:	b91b      	cbnz	r3, 80047de <_strtod_l+0x7de>
 80047d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	dd7c      	ble.n	80048d8 <_strtod_l+0x8d8>
 80047de:	4659      	mov	r1, fp
 80047e0:	2201      	movs	r2, #1
 80047e2:	4650      	mov	r0, sl
 80047e4:	f001 ff20 	bl	8006628 <__lshift>
 80047e8:	9904      	ldr	r1, [sp, #16]
 80047ea:	4683      	mov	fp, r0
 80047ec:	f001 ff8c 	bl	8006708 <__mcmp>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	dd71      	ble.n	80048d8 <_strtod_l+0x8d8>
 80047f4:	9905      	ldr	r1, [sp, #20]
 80047f6:	464b      	mov	r3, r9
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <_strtod_l+0x87c>)
 80047fa:	2900      	cmp	r1, #0
 80047fc:	f000 808c 	beq.w	8004918 <_strtod_l+0x918>
 8004800:	ea02 0109 	and.w	r1, r2, r9
 8004804:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004808:	f300 8086 	bgt.w	8004918 <_strtod_l+0x918>
 800480c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004810:	f77f aeaa 	ble.w	8004568 <_strtod_l+0x568>
 8004814:	4640      	mov	r0, r8
 8004816:	4649      	mov	r1, r9
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <_strtod_l+0x880>)
 800481a:	2200      	movs	r2, #0
 800481c:	f7fb fe5c 	bl	80004d8 <__aeabi_dmul>
 8004820:	460b      	mov	r3, r1
 8004822:	4303      	orrs	r3, r0
 8004824:	bf08      	it	eq
 8004826:	2322      	moveq	r3, #34	; 0x22
 8004828:	4680      	mov	r8, r0
 800482a:	4689      	mov	r9, r1
 800482c:	bf08      	it	eq
 800482e:	f8ca 3000 	streq.w	r3, [sl]
 8004832:	e62f      	b.n	8004494 <_strtod_l+0x494>
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	ea03 0808 	and.w	r8, r3, r8
 8004840:	e6e0      	b.n	8004604 <_strtod_l+0x604>
 8004842:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004846:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800484a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800484e:	35e2      	adds	r5, #226	; 0xe2
 8004850:	fa07 f505 	lsl.w	r5, r7, r5
 8004854:	970f      	str	r7, [sp, #60]	; 0x3c
 8004856:	e747      	b.n	80046e8 <_strtod_l+0x6e8>
 8004858:	2301      	movs	r3, #1
 800485a:	2500      	movs	r5, #0
 800485c:	930f      	str	r3, [sp, #60]	; 0x3c
 800485e:	e743      	b.n	80046e8 <_strtod_l+0x6e8>
 8004860:	463a      	mov	r2, r7
 8004862:	4650      	mov	r0, sl
 8004864:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004866:	f001 fedf 	bl	8006628 <__lshift>
 800486a:	901a      	str	r0, [sp, #104]	; 0x68
 800486c:	2800      	cmp	r0, #0
 800486e:	f47f af69 	bne.w	8004744 <_strtod_l+0x744>
 8004872:	e604      	b.n	800447e <_strtod_l+0x47e>
 8004874:	080080f0 	.word	0x080080f0
 8004878:	fffffc02 	.word	0xfffffc02
 800487c:	7ff00000 	.word	0x7ff00000
 8004880:	39500000 	.word	0x39500000
 8004884:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004888:	d165      	bne.n	8004956 <_strtod_l+0x956>
 800488a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800488c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004890:	b35a      	cbz	r2, 80048ea <_strtod_l+0x8ea>
 8004892:	4a99      	ldr	r2, [pc, #612]	; (8004af8 <_strtod_l+0xaf8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d12b      	bne.n	80048f0 <_strtod_l+0x8f0>
 8004898:	9b05      	ldr	r3, [sp, #20]
 800489a:	4641      	mov	r1, r8
 800489c:	b303      	cbz	r3, 80048e0 <_strtod_l+0x8e0>
 800489e:	464a      	mov	r2, r9
 80048a0:	4b96      	ldr	r3, [pc, #600]	; (8004afc <_strtod_l+0xafc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	d81b      	bhi.n	80048e6 <_strtod_l+0x8e6>
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	4299      	cmp	r1, r3
 80048ba:	d119      	bne.n	80048f0 <_strtod_l+0x8f0>
 80048bc:	4b90      	ldr	r3, [pc, #576]	; (8004b00 <_strtod_l+0xb00>)
 80048be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d102      	bne.n	80048ca <_strtod_l+0x8ca>
 80048c4:	3101      	adds	r1, #1
 80048c6:	f43f adda 	beq.w	800447e <_strtod_l+0x47e>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <_strtod_l+0xafc>)
 80048d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d2:	401a      	ands	r2, r3
 80048d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80048d8:	9b05      	ldr	r3, [sp, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d19a      	bne.n	8004814 <_strtod_l+0x814>
 80048de:	e5d9      	b.n	8004494 <_strtod_l+0x494>
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e7e8      	b.n	80048b8 <_strtod_l+0x8b8>
 80048e6:	4613      	mov	r3, r2
 80048e8:	e7e6      	b.n	80048b8 <_strtod_l+0x8b8>
 80048ea:	ea53 0308 	orrs.w	r3, r3, r8
 80048ee:	d081      	beq.n	80047f4 <_strtod_l+0x7f4>
 80048f0:	b1e5      	cbz	r5, 800492c <_strtod_l+0x92c>
 80048f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f4:	421d      	tst	r5, r3
 80048f6:	d0ef      	beq.n	80048d8 <_strtod_l+0x8d8>
 80048f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	9a05      	ldr	r2, [sp, #20]
 8004900:	b1c3      	cbz	r3, 8004934 <_strtod_l+0x934>
 8004902:	f7ff fb5a 	bl	8003fba <sulp>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800490e:	f7fb fc2d 	bl	800016c <__adddf3>
 8004912:	4680      	mov	r8, r0
 8004914:	4689      	mov	r9, r1
 8004916:	e7df      	b.n	80048d8 <_strtod_l+0x8d8>
 8004918:	4013      	ands	r3, r2
 800491a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800491e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004922:	f04f 38ff 	mov.w	r8, #4294967295
 8004926:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800492a:	e7d5      	b.n	80048d8 <_strtod_l+0x8d8>
 800492c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800492e:	ea13 0f08 	tst.w	r3, r8
 8004932:	e7e0      	b.n	80048f6 <_strtod_l+0x8f6>
 8004934:	f7ff fb41 	bl	8003fba <sulp>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004940:	f7fb fc12 	bl	8000168 <__aeabi_dsub>
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	4680      	mov	r8, r0
 800494a:	4689      	mov	r9, r1
 800494c:	f7fc f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8004950:	2800      	cmp	r0, #0
 8004952:	d0c1      	beq.n	80048d8 <_strtod_l+0x8d8>
 8004954:	e608      	b.n	8004568 <_strtod_l+0x568>
 8004956:	4658      	mov	r0, fp
 8004958:	9904      	ldr	r1, [sp, #16]
 800495a:	f002 f853 	bl	8006a04 <__ratio>
 800495e:	2200      	movs	r2, #0
 8004960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	f7fc f832 	bl	80009d0 <__aeabi_dcmple>
 800496c:	2800      	cmp	r0, #0
 800496e:	d070      	beq.n	8004a52 <_strtod_l+0xa52>
 8004970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d042      	beq.n	80049fc <_strtod_l+0x9fc>
 8004976:	2600      	movs	r6, #0
 8004978:	4f62      	ldr	r7, [pc, #392]	; (8004b04 <_strtod_l+0xb04>)
 800497a:	4d62      	ldr	r5, [pc, #392]	; (8004b04 <_strtod_l+0xb04>)
 800497c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004982:	0d1b      	lsrs	r3, r3, #20
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	930f      	str	r3, [sp, #60]	; 0x3c
 8004988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800498a:	4b5f      	ldr	r3, [pc, #380]	; (8004b08 <_strtod_l+0xb08>)
 800498c:	429a      	cmp	r2, r3
 800498e:	f040 80c3 	bne.w	8004b18 <_strtod_l+0xb18>
 8004992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004994:	4640      	mov	r0, r8
 8004996:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800499a:	4649      	mov	r1, r9
 800499c:	f001 ff5c 	bl	8006858 <__ulp>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4630      	mov	r0, r6
 80049a6:	4639      	mov	r1, r7
 80049a8:	f7fb fd96 	bl	80004d8 <__aeabi_dmul>
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	f7fb fbdc 	bl	800016c <__adddf3>
 80049b4:	460b      	mov	r3, r1
 80049b6:	4951      	ldr	r1, [pc, #324]	; (8004afc <_strtod_l+0xafc>)
 80049b8:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <_strtod_l+0xb0c>)
 80049ba:	4019      	ands	r1, r3
 80049bc:	4291      	cmp	r1, r2
 80049be:	4680      	mov	r8, r0
 80049c0:	d95d      	bls.n	8004a7e <_strtod_l+0xa7e>
 80049c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <_strtod_l+0xb00>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d103      	bne.n	80049d2 <_strtod_l+0x9d2>
 80049ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049cc:	3301      	adds	r3, #1
 80049ce:	f43f ad56 	beq.w	800447e <_strtod_l+0x47e>
 80049d2:	f04f 38ff 	mov.w	r8, #4294967295
 80049d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004b00 <_strtod_l+0xb00>
 80049da:	4650      	mov	r0, sl
 80049dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80049de:	f001 fc0b 	bl	80061f8 <_Bfree>
 80049e2:	4650      	mov	r0, sl
 80049e4:	9906      	ldr	r1, [sp, #24]
 80049e6:	f001 fc07 	bl	80061f8 <_Bfree>
 80049ea:	4650      	mov	r0, sl
 80049ec:	9904      	ldr	r1, [sp, #16]
 80049ee:	f001 fc03 	bl	80061f8 <_Bfree>
 80049f2:	4659      	mov	r1, fp
 80049f4:	4650      	mov	r0, sl
 80049f6:	f001 fbff 	bl	80061f8 <_Bfree>
 80049fa:	e627      	b.n	800464c <_strtod_l+0x64c>
 80049fc:	f1b8 0f00 	cmp.w	r8, #0
 8004a00:	d119      	bne.n	8004a36 <_strtod_l+0xa36>
 8004a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a08:	b9e3      	cbnz	r3, 8004a44 <_strtod_l+0xa44>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <_strtod_l+0xb04>)
 8004a12:	f7fb ffd3 	bl	80009bc <__aeabi_dcmplt>
 8004a16:	b9c8      	cbnz	r0, 8004a4c <_strtod_l+0xa4c>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <_strtod_l+0xb10>)
 8004a20:	f7fb fd5a 	bl	80004d8 <__aeabi_dmul>
 8004a24:	4604      	mov	r4, r0
 8004a26:	460d      	mov	r5, r1
 8004a28:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004a2c:	9416      	str	r4, [sp, #88]	; 0x58
 8004a2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004a30:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004a34:	e7a2      	b.n	800497c <_strtod_l+0x97c>
 8004a36:	f1b8 0f01 	cmp.w	r8, #1
 8004a3a:	d103      	bne.n	8004a44 <_strtod_l+0xa44>
 8004a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f43f ad92 	beq.w	8004568 <_strtod_l+0x568>
 8004a44:	2600      	movs	r6, #0
 8004a46:	2400      	movs	r4, #0
 8004a48:	4f32      	ldr	r7, [pc, #200]	; (8004b14 <_strtod_l+0xb14>)
 8004a4a:	e796      	b.n	800497a <_strtod_l+0x97a>
 8004a4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004a4e:	4d30      	ldr	r5, [pc, #192]	; (8004b10 <_strtod_l+0xb10>)
 8004a50:	e7ea      	b.n	8004a28 <_strtod_l+0xa28>
 8004a52:	4b2f      	ldr	r3, [pc, #188]	; (8004b10 <_strtod_l+0xb10>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	4630      	mov	r0, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	f7fb fd3d 	bl	80004d8 <__aeabi_dmul>
 8004a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a60:	4604      	mov	r4, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	b933      	cbnz	r3, 8004a74 <_strtod_l+0xa74>
 8004a66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a6a:	9010      	str	r0, [sp, #64]	; 0x40
 8004a6c:	9311      	str	r3, [sp, #68]	; 0x44
 8004a6e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a72:	e783      	b.n	800497c <_strtod_l+0x97c>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004a7c:	e7f7      	b.n	8004a6e <_strtod_l+0xa6e>
 8004a7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004a82:	9b05      	ldr	r3, [sp, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1a8      	bne.n	80049da <_strtod_l+0x9da>
 8004a88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a8e:	0d1b      	lsrs	r3, r3, #20
 8004a90:	051b      	lsls	r3, r3, #20
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d1a1      	bne.n	80049da <_strtod_l+0x9da>
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fc f865 	bl	8000b68 <__aeabi_d2lz>
 8004a9e:	f7fb fced 	bl	800047c <__aeabi_l2d>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fb5d 	bl	8000168 <__aeabi_dsub>
 8004aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ab4:	ea43 0308 	orr.w	r3, r3, r8
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	4604      	mov	r4, r0
 8004abc:	460d      	mov	r5, r1
 8004abe:	d066      	beq.n	8004b8e <_strtod_l+0xb8e>
 8004ac0:	a309      	add	r3, pc, #36	; (adr r3, 8004ae8 <_strtod_l+0xae8>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb ff79 	bl	80009bc <__aeabi_dcmplt>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	f47f ace2 	bne.w	8004494 <_strtod_l+0x494>
 8004ad0:	a307      	add	r3, pc, #28	; (adr r3, 8004af0 <_strtod_l+0xaf0>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb ff8d 	bl	80009f8 <__aeabi_dcmpgt>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f43f af7b 	beq.w	80049da <_strtod_l+0x9da>
 8004ae4:	e4d6      	b.n	8004494 <_strtod_l+0x494>
 8004ae6:	bf00      	nop
 8004ae8:	94a03595 	.word	0x94a03595
 8004aec:	3fdfffff 	.word	0x3fdfffff
 8004af0:	35afe535 	.word	0x35afe535
 8004af4:	3fe00000 	.word	0x3fe00000
 8004af8:	000fffff 	.word	0x000fffff
 8004afc:	7ff00000 	.word	0x7ff00000
 8004b00:	7fefffff 	.word	0x7fefffff
 8004b04:	3ff00000 	.word	0x3ff00000
 8004b08:	7fe00000 	.word	0x7fe00000
 8004b0c:	7c9fffff 	.word	0x7c9fffff
 8004b10:	3fe00000 	.word	0x3fe00000
 8004b14:	bff00000 	.word	0xbff00000
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	b313      	cbz	r3, 8004b62 <_strtod_l+0xb62>
 8004b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b22:	d81e      	bhi.n	8004b62 <_strtod_l+0xb62>
 8004b24:	a326      	add	r3, pc, #152	; (adr r3, 8004bc0 <_strtod_l+0xbc0>)
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb ff4f 	bl	80009d0 <__aeabi_dcmple>
 8004b32:	b190      	cbz	r0, 8004b5a <_strtod_l+0xb5a>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7fb ffa6 	bl	8000a88 <__aeabi_d2uiz>
 8004b3c:	2801      	cmp	r0, #1
 8004b3e:	bf38      	it	cc
 8004b40:	2001      	movcc	r0, #1
 8004b42:	f7fb fc4f 	bl	80003e4 <__aeabi_ui2d>
 8004b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b48:	4604      	mov	r4, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	b9d3      	cbnz	r3, 8004b84 <_strtod_l+0xb84>
 8004b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b52:	9012      	str	r0, [sp, #72]	; 0x48
 8004b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b56:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b5c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004b60:	1a9f      	subs	r7, r3, r2
 8004b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b66:	f001 fe77 	bl	8006858 <__ulp>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4639      	mov	r1, r7
 8004b72:	f7fb fcb1 	bl	80004d8 <__aeabi_dmul>
 8004b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b7a:	f7fb faf7 	bl	800016c <__adddf3>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	4689      	mov	r9, r1
 8004b82:	e77e      	b.n	8004a82 <_strtod_l+0xa82>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004b8c:	e7e3      	b.n	8004b56 <_strtod_l+0xb56>
 8004b8e:	a30e      	add	r3, pc, #56	; (adr r3, 8004bc8 <_strtod_l+0xbc8>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb ff12 	bl	80009bc <__aeabi_dcmplt>
 8004b98:	e7a1      	b.n	8004ade <_strtod_l+0xade>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8004b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ba0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	f7ff ba71 	b.w	800408a <_strtod_l+0x8a>
 8004ba8:	2a65      	cmp	r2, #101	; 0x65
 8004baa:	f43f ab63 	beq.w	8004274 <_strtod_l+0x274>
 8004bae:	2a45      	cmp	r2, #69	; 0x45
 8004bb0:	f43f ab60 	beq.w	8004274 <_strtod_l+0x274>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f7ff bb95 	b.w	80042e4 <_strtod_l+0x2e4>
 8004bba:	bf00      	nop
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	ffc00000 	.word	0xffc00000
 8004bc4:	41dfffff 	.word	0x41dfffff
 8004bc8:	94a03595 	.word	0x94a03595
 8004bcc:	3fcfffff 	.word	0x3fcfffff

08004bd0 <_strtod_r>:
 8004bd0:	4b01      	ldr	r3, [pc, #4]	; (8004bd8 <_strtod_r+0x8>)
 8004bd2:	f7ff ba15 	b.w	8004000 <_strtod_l>
 8004bd6:	bf00      	nop
 8004bd8:	2000007c 	.word	0x2000007c

08004bdc <_strtol_l.constprop.0>:
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be2:	4680      	mov	r8, r0
 8004be4:	d001      	beq.n	8004bea <_strtol_l.constprop.0+0xe>
 8004be6:	2b24      	cmp	r3, #36	; 0x24
 8004be8:	d906      	bls.n	8004bf8 <_strtol_l.constprop.0+0x1c>
 8004bea:	f7fe facf 	bl	800318c <__errno>
 8004bee:	2316      	movs	r3, #22
 8004bf0:	6003      	str	r3, [r0, #0]
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4f35      	ldr	r7, [pc, #212]	; (8004cd0 <_strtol_l.constprop.0+0xf4>)
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c02:	5de6      	ldrb	r6, [r4, r7]
 8004c04:	f016 0608 	ands.w	r6, r6, #8
 8004c08:	d1f8      	bne.n	8004bfc <_strtol_l.constprop.0+0x20>
 8004c0a:	2c2d      	cmp	r4, #45	; 0x2d
 8004c0c:	d12f      	bne.n	8004c6e <_strtol_l.constprop.0+0x92>
 8004c0e:	2601      	movs	r6, #1
 8004c10:	782c      	ldrb	r4, [r5, #0]
 8004c12:	1c85      	adds	r5, r0, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d057      	beq.n	8004cc8 <_strtol_l.constprop.0+0xec>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d109      	bne.n	8004c30 <_strtol_l.constprop.0+0x54>
 8004c1c:	2c30      	cmp	r4, #48	; 0x30
 8004c1e:	d107      	bne.n	8004c30 <_strtol_l.constprop.0+0x54>
 8004c20:	7828      	ldrb	r0, [r5, #0]
 8004c22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c26:	2858      	cmp	r0, #88	; 0x58
 8004c28:	d149      	bne.n	8004cbe <_strtol_l.constprop.0+0xe2>
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	786c      	ldrb	r4, [r5, #1]
 8004c2e:	3502      	adds	r5, #2
 8004c30:	2700      	movs	r7, #0
 8004c32:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004c36:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004c3a:	fbbe f9f3 	udiv	r9, lr, r3
 8004c3e:	4638      	mov	r0, r7
 8004c40:	fb03 ea19 	mls	sl, r3, r9, lr
 8004c44:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004c48:	f1bc 0f09 	cmp.w	ip, #9
 8004c4c:	d814      	bhi.n	8004c78 <_strtol_l.constprop.0+0x9c>
 8004c4e:	4664      	mov	r4, ip
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	dd22      	ble.n	8004c9a <_strtol_l.constprop.0+0xbe>
 8004c54:	2f00      	cmp	r7, #0
 8004c56:	db1d      	blt.n	8004c94 <_strtol_l.constprop.0+0xb8>
 8004c58:	4581      	cmp	r9, r0
 8004c5a:	d31b      	bcc.n	8004c94 <_strtol_l.constprop.0+0xb8>
 8004c5c:	d101      	bne.n	8004c62 <_strtol_l.constprop.0+0x86>
 8004c5e:	45a2      	cmp	sl, r4
 8004c60:	db18      	blt.n	8004c94 <_strtol_l.constprop.0+0xb8>
 8004c62:	2701      	movs	r7, #1
 8004c64:	fb00 4003 	mla	r0, r0, r3, r4
 8004c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c6c:	e7ea      	b.n	8004c44 <_strtol_l.constprop.0+0x68>
 8004c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c70:	bf04      	itt	eq
 8004c72:	782c      	ldrbeq	r4, [r5, #0]
 8004c74:	1c85      	addeq	r5, r0, #2
 8004c76:	e7cd      	b.n	8004c14 <_strtol_l.constprop.0+0x38>
 8004c78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c7c:	f1bc 0f19 	cmp.w	ip, #25
 8004c80:	d801      	bhi.n	8004c86 <_strtol_l.constprop.0+0xaa>
 8004c82:	3c37      	subs	r4, #55	; 0x37
 8004c84:	e7e4      	b.n	8004c50 <_strtol_l.constprop.0+0x74>
 8004c86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c8a:	f1bc 0f19 	cmp.w	ip, #25
 8004c8e:	d804      	bhi.n	8004c9a <_strtol_l.constprop.0+0xbe>
 8004c90:	3c57      	subs	r4, #87	; 0x57
 8004c92:	e7dd      	b.n	8004c50 <_strtol_l.constprop.0+0x74>
 8004c94:	f04f 37ff 	mov.w	r7, #4294967295
 8004c98:	e7e6      	b.n	8004c68 <_strtol_l.constprop.0+0x8c>
 8004c9a:	2f00      	cmp	r7, #0
 8004c9c:	da07      	bge.n	8004cae <_strtol_l.constprop.0+0xd2>
 8004c9e:	2322      	movs	r3, #34	; 0x22
 8004ca0:	4670      	mov	r0, lr
 8004ca2:	f8c8 3000 	str.w	r3, [r8]
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d0a4      	beq.n	8004bf4 <_strtol_l.constprop.0+0x18>
 8004caa:	1e69      	subs	r1, r5, #1
 8004cac:	e005      	b.n	8004cba <_strtol_l.constprop.0+0xde>
 8004cae:	b106      	cbz	r6, 8004cb2 <_strtol_l.constprop.0+0xd6>
 8004cb0:	4240      	negs	r0, r0
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d09e      	beq.n	8004bf4 <_strtol_l.constprop.0+0x18>
 8004cb6:	2f00      	cmp	r7, #0
 8004cb8:	d1f7      	bne.n	8004caa <_strtol_l.constprop.0+0xce>
 8004cba:	6011      	str	r1, [r2, #0]
 8004cbc:	e79a      	b.n	8004bf4 <_strtol_l.constprop.0+0x18>
 8004cbe:	2430      	movs	r4, #48	; 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1b5      	bne.n	8004c30 <_strtol_l.constprop.0+0x54>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	e7b3      	b.n	8004c30 <_strtol_l.constprop.0+0x54>
 8004cc8:	2c30      	cmp	r4, #48	; 0x30
 8004cca:	d0a9      	beq.n	8004c20 <_strtol_l.constprop.0+0x44>
 8004ccc:	230a      	movs	r3, #10
 8004cce:	e7af      	b.n	8004c30 <_strtol_l.constprop.0+0x54>
 8004cd0:	08008119 	.word	0x08008119

08004cd4 <_strtol_r>:
 8004cd4:	f7ff bf82 	b.w	8004bdc <_strtol_l.constprop.0>

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4d05      	ldr	r5, [pc, #20]	; (8004cf8 <_write_r+0x20>)
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fc fad0 	bl	800128c <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20000390 	.word	0x20000390

08004cfc <_close_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	2300      	movs	r3, #0
 8004d00:	4d05      	ldr	r5, [pc, #20]	; (8004d18 <_close_r+0x1c>)
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fc fadc 	bl	80012c4 <_close>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_close_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_close_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000390 	.word	0x20000390

08004d1c <quorem>:
 8004d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	6903      	ldr	r3, [r0, #16]
 8004d22:	690c      	ldr	r4, [r1, #16]
 8004d24:	4607      	mov	r7, r0
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	f2c0 8082 	blt.w	8004e30 <quorem+0x114>
 8004d2c:	3c01      	subs	r4, #1
 8004d2e:	f100 0514 	add.w	r5, r0, #20
 8004d32:	f101 0814 	add.w	r8, r1, #20
 8004d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d44:	3301      	adds	r3, #1
 8004d46:	429a      	cmp	r2, r3
 8004d48:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d54:	d331      	bcc.n	8004dba <quorem+0x9e>
 8004d56:	f04f 0e00 	mov.w	lr, #0
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	46ac      	mov	ip, r5
 8004d5e:	46f2      	mov	sl, lr
 8004d60:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d64:	b293      	uxth	r3, r2
 8004d66:	fb06 e303 	mla	r3, r6, r3, lr
 8004d6a:	0c12      	lsrs	r2, r2, #16
 8004d6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	fb06 e202 	mla	r2, r6, r2, lr
 8004d76:	ebaa 0303 	sub.w	r3, sl, r3
 8004d7a:	f8dc a000 	ldr.w	sl, [ip]
 8004d7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d82:	fa1f fa8a 	uxth.w	sl, sl
 8004d86:	4453      	add	r3, sl
 8004d88:	f8dc a000 	ldr.w	sl, [ip]
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d9c:	4581      	cmp	r9, r0
 8004d9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004da2:	f84c 3b04 	str.w	r3, [ip], #4
 8004da6:	d2db      	bcs.n	8004d60 <quorem+0x44>
 8004da8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004dac:	b92b      	cbnz	r3, 8004dba <quorem+0x9e>
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	3b04      	subs	r3, #4
 8004db2:	429d      	cmp	r5, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	d32f      	bcc.n	8004e18 <quorem+0xfc>
 8004db8:	613c      	str	r4, [r7, #16]
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f001 fca4 	bl	8006708 <__mcmp>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	db25      	blt.n	8004e10 <quorem+0xf4>
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f04f 0c00 	mov.w	ip, #0
 8004dca:	3601      	adds	r6, #1
 8004dcc:	f858 1b04 	ldr.w	r1, [r8], #4
 8004dd0:	f8d0 e000 	ldr.w	lr, [r0]
 8004dd4:	b28b      	uxth	r3, r1
 8004dd6:	ebac 0303 	sub.w	r3, ip, r3
 8004dda:	fa1f f28e 	uxth.w	r2, lr
 8004dde:	4413      	add	r3, r2
 8004de0:	0c0a      	lsrs	r2, r1, #16
 8004de2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004de6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004df0:	45c1      	cmp	r9, r8
 8004df2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004df6:	f840 3b04 	str.w	r3, [r0], #4
 8004dfa:	d2e7      	bcs.n	8004dcc <quorem+0xb0>
 8004dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e04:	b922      	cbnz	r2, 8004e10 <quorem+0xf4>
 8004e06:	3b04      	subs	r3, #4
 8004e08:	429d      	cmp	r5, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	d30a      	bcc.n	8004e24 <quorem+0x108>
 8004e0e:	613c      	str	r4, [r7, #16]
 8004e10:	4630      	mov	r0, r6
 8004e12:	b003      	add	sp, #12
 8004e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	3b04      	subs	r3, #4
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d1cb      	bne.n	8004db8 <quorem+0x9c>
 8004e20:	3c01      	subs	r4, #1
 8004e22:	e7c6      	b.n	8004db2 <quorem+0x96>
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	3b04      	subs	r3, #4
 8004e28:	2a00      	cmp	r2, #0
 8004e2a:	d1f0      	bne.n	8004e0e <quorem+0xf2>
 8004e2c:	3c01      	subs	r4, #1
 8004e2e:	e7eb      	b.n	8004e08 <quorem+0xec>
 8004e30:	2000      	movs	r0, #0
 8004e32:	e7ee      	b.n	8004e12 <quorem+0xf6>
 8004e34:	0000      	movs	r0, r0
	...

08004e38 <_dtoa_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	461f      	mov	r7, r3
 8004e40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e42:	b099      	sub	sp, #100	; 0x64
 8004e44:	4605      	mov	r5, r0
 8004e46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e4e:	b974      	cbnz	r4, 8004e6e <_dtoa_r+0x36>
 8004e50:	2010      	movs	r0, #16
 8004e52:	f001 f95b 	bl	800610c <malloc>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6268      	str	r0, [r5, #36]	; 0x24
 8004e5a:	b920      	cbnz	r0, 8004e66 <_dtoa_r+0x2e>
 8004e5c:	21ea      	movs	r1, #234	; 0xea
 8004e5e:	4ba8      	ldr	r3, [pc, #672]	; (8005100 <_dtoa_r+0x2c8>)
 8004e60:	48a8      	ldr	r0, [pc, #672]	; (8005104 <_dtoa_r+0x2cc>)
 8004e62:	f002 f8d7 	bl	8007014 <__assert_func>
 8004e66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e6a:	6004      	str	r4, [r0, #0]
 8004e6c:	60c4      	str	r4, [r0, #12]
 8004e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	b151      	cbz	r1, 8004e8a <_dtoa_r+0x52>
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	2301      	movs	r3, #1
 8004e78:	4093      	lsls	r3, r2
 8004e7a:	604a      	str	r2, [r1, #4]
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f001 f9ba 	bl	80061f8 <_Bfree>
 8004e84:	2200      	movs	r2, #0
 8004e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	1e3b      	subs	r3, r7, #0
 8004e8c:	bfaf      	iteee	ge
 8004e8e:	2300      	movge	r3, #0
 8004e90:	2201      	movlt	r2, #1
 8004e92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e96:	9305      	strlt	r3, [sp, #20]
 8004e98:	bfa8      	it	ge
 8004e9a:	f8c8 3000 	strge.w	r3, [r8]
 8004e9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004ea2:	4b99      	ldr	r3, [pc, #612]	; (8005108 <_dtoa_r+0x2d0>)
 8004ea4:	bfb8      	it	lt
 8004ea6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eaa:	ea33 0309 	bics.w	r3, r3, r9
 8004eae:	d119      	bne.n	8004ee4 <_dtoa_r+0xac>
 8004eb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ebc:	4333      	orrs	r3, r6
 8004ebe:	f000 857f 	beq.w	80059c0 <_dtoa_r+0xb88>
 8004ec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ec4:	b953      	cbnz	r3, 8004edc <_dtoa_r+0xa4>
 8004ec6:	4b91      	ldr	r3, [pc, #580]	; (800510c <_dtoa_r+0x2d4>)
 8004ec8:	e022      	b.n	8004f10 <_dtoa_r+0xd8>
 8004eca:	4b91      	ldr	r3, [pc, #580]	; (8005110 <_dtoa_r+0x2d8>)
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	9803      	ldr	r0, [sp, #12]
 8004ed6:	b019      	add	sp, #100	; 0x64
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	4b8b      	ldr	r3, [pc, #556]	; (800510c <_dtoa_r+0x2d4>)
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	e7f5      	b.n	8004ed0 <_dtoa_r+0x98>
 8004ee4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ee8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f7fb fd58 	bl	80009a8 <__aeabi_dcmpeq>
 8004ef8:	4680      	mov	r8, r0
 8004efa:	b158      	cbz	r0, 8004f14 <_dtoa_r+0xdc>
 8004efc:	2301      	movs	r3, #1
 8004efe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8558 	beq.w	80059ba <_dtoa_r+0xb82>
 8004f0a:	4882      	ldr	r0, [pc, #520]	; (8005114 <_dtoa_r+0x2dc>)
 8004f0c:	6018      	str	r0, [r3, #0]
 8004f0e:	1e43      	subs	r3, r0, #1
 8004f10:	9303      	str	r3, [sp, #12]
 8004f12:	e7df      	b.n	8004ed4 <_dtoa_r+0x9c>
 8004f14:	ab16      	add	r3, sp, #88	; 0x58
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	ab17      	add	r3, sp, #92	; 0x5c
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f22:	f001 fd13 	bl	800694c <__d2b>
 8004f26:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f2a:	4683      	mov	fp, r0
 8004f2c:	2c00      	cmp	r4, #0
 8004f2e:	d07f      	beq.n	8005030 <_dtoa_r+0x1f8>
 8004f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f36:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f3e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004f42:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004f46:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4b72      	ldr	r3, [pc, #456]	; (8005118 <_dtoa_r+0x2e0>)
 8004f4e:	f7fb f90b 	bl	8000168 <__aeabi_dsub>
 8004f52:	a365      	add	r3, pc, #404	; (adr r3, 80050e8 <_dtoa_r+0x2b0>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb fabe 	bl	80004d8 <__aeabi_dmul>
 8004f5c:	a364      	add	r3, pc, #400	; (adr r3, 80050f0 <_dtoa_r+0x2b8>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb f903 	bl	800016c <__adddf3>
 8004f66:	4606      	mov	r6, r0
 8004f68:	4620      	mov	r0, r4
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	f7fb fa4a 	bl	8000404 <__aeabi_i2d>
 8004f70:	a361      	add	r3, pc, #388	; (adr r3, 80050f8 <_dtoa_r+0x2c0>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb faaf 	bl	80004d8 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4630      	mov	r0, r6
 8004f80:	4639      	mov	r1, r7
 8004f82:	f7fb f8f3 	bl	800016c <__adddf3>
 8004f86:	4606      	mov	r6, r0
 8004f88:	460f      	mov	r7, r1
 8004f8a:	f7fb fd55 	bl	8000a38 <__aeabi_d2iz>
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4682      	mov	sl, r0
 8004f92:	2300      	movs	r3, #0
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	f7fb fd10 	bl	80009bc <__aeabi_dcmplt>
 8004f9c:	b148      	cbz	r0, 8004fb2 <_dtoa_r+0x17a>
 8004f9e:	4650      	mov	r0, sl
 8004fa0:	f7fb fa30 	bl	8000404 <__aeabi_i2d>
 8004fa4:	4632      	mov	r2, r6
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	f7fb fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8004fac:	b908      	cbnz	r0, 8004fb2 <_dtoa_r+0x17a>
 8004fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fb2:	f1ba 0f16 	cmp.w	sl, #22
 8004fb6:	d858      	bhi.n	800506a <_dtoa_r+0x232>
 8004fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fbc:	4b57      	ldr	r3, [pc, #348]	; (800511c <_dtoa_r+0x2e4>)
 8004fbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f7fb fcf9 	bl	80009bc <__aeabi_dcmplt>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d04f      	beq.n	800506e <_dtoa_r+0x236>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004fd8:	1b1c      	subs	r4, r3, r4
 8004fda:	1e63      	subs	r3, r4, #1
 8004fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8004fde:	bf49      	itett	mi
 8004fe0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004fe4:	2300      	movpl	r3, #0
 8004fe6:	9306      	strmi	r3, [sp, #24]
 8004fe8:	2300      	movmi	r3, #0
 8004fea:	bf54      	ite	pl
 8004fec:	9306      	strpl	r3, [sp, #24]
 8004fee:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ff0:	f1ba 0f00 	cmp.w	sl, #0
 8004ff4:	db3d      	blt.n	8005072 <_dtoa_r+0x23a>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ffc:	4453      	add	r3, sl
 8004ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8005000:	2300      	movs	r3, #0
 8005002:	930a      	str	r3, [sp, #40]	; 0x28
 8005004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005006:	2b09      	cmp	r3, #9
 8005008:	f200 808c 	bhi.w	8005124 <_dtoa_r+0x2ec>
 800500c:	2b05      	cmp	r3, #5
 800500e:	bfc4      	itt	gt
 8005010:	3b04      	subgt	r3, #4
 8005012:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005016:	bfc8      	it	gt
 8005018:	2400      	movgt	r4, #0
 800501a:	f1a3 0302 	sub.w	r3, r3, #2
 800501e:	bfd8      	it	le
 8005020:	2401      	movle	r4, #1
 8005022:	2b03      	cmp	r3, #3
 8005024:	f200 808a 	bhi.w	800513c <_dtoa_r+0x304>
 8005028:	e8df f003 	tbb	[pc, r3]
 800502c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005030:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005034:	441c      	add	r4, r3
 8005036:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800503a:	2b20      	cmp	r3, #32
 800503c:	bfc3      	ittte	gt
 800503e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005042:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005046:	fa09 f303 	lslgt.w	r3, r9, r3
 800504a:	f1c3 0320 	rsble	r3, r3, #32
 800504e:	bfc6      	itte	gt
 8005050:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005054:	4318      	orrgt	r0, r3
 8005056:	fa06 f003 	lslle.w	r0, r6, r3
 800505a:	f7fb f9c3 	bl	80003e4 <__aeabi_ui2d>
 800505e:	2301      	movs	r3, #1
 8005060:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005064:	3c01      	subs	r4, #1
 8005066:	9313      	str	r3, [sp, #76]	; 0x4c
 8005068:	e76f      	b.n	8004f4a <_dtoa_r+0x112>
 800506a:	2301      	movs	r3, #1
 800506c:	e7b2      	b.n	8004fd4 <_dtoa_r+0x19c>
 800506e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005070:	e7b1      	b.n	8004fd6 <_dtoa_r+0x19e>
 8005072:	9b06      	ldr	r3, [sp, #24]
 8005074:	eba3 030a 	sub.w	r3, r3, sl
 8005078:	9306      	str	r3, [sp, #24]
 800507a:	f1ca 0300 	rsb	r3, sl, #0
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
 8005080:	2300      	movs	r3, #0
 8005082:	930e      	str	r3, [sp, #56]	; 0x38
 8005084:	e7be      	b.n	8005004 <_dtoa_r+0x1cc>
 8005086:	2300      	movs	r3, #0
 8005088:	930b      	str	r3, [sp, #44]	; 0x2c
 800508a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800508c:	2b00      	cmp	r3, #0
 800508e:	dc58      	bgt.n	8005142 <_dtoa_r+0x30a>
 8005090:	f04f 0901 	mov.w	r9, #1
 8005094:	464b      	mov	r3, r9
 8005096:	f8cd 9020 	str.w	r9, [sp, #32]
 800509a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800509e:	2200      	movs	r2, #0
 80050a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80050a2:	6042      	str	r2, [r0, #4]
 80050a4:	2204      	movs	r2, #4
 80050a6:	f102 0614 	add.w	r6, r2, #20
 80050aa:	429e      	cmp	r6, r3
 80050ac:	6841      	ldr	r1, [r0, #4]
 80050ae:	d94e      	bls.n	800514e <_dtoa_r+0x316>
 80050b0:	4628      	mov	r0, r5
 80050b2:	f001 f861 	bl	8006178 <_Balloc>
 80050b6:	9003      	str	r0, [sp, #12]
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d14c      	bne.n	8005156 <_dtoa_r+0x31e>
 80050bc:	4602      	mov	r2, r0
 80050be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050c2:	4b17      	ldr	r3, [pc, #92]	; (8005120 <_dtoa_r+0x2e8>)
 80050c4:	e6cc      	b.n	8004e60 <_dtoa_r+0x28>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e7de      	b.n	8005088 <_dtoa_r+0x250>
 80050ca:	2300      	movs	r3, #0
 80050cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050d0:	eb0a 0903 	add.w	r9, sl, r3
 80050d4:	f109 0301 	add.w	r3, r9, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	9308      	str	r3, [sp, #32]
 80050dc:	bfb8      	it	lt
 80050de:	2301      	movlt	r3, #1
 80050e0:	e7dd      	b.n	800509e <_dtoa_r+0x266>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7f2      	b.n	80050cc <_dtoa_r+0x294>
 80050e6:	bf00      	nop
 80050e8:	636f4361 	.word	0x636f4361
 80050ec:	3fd287a7 	.word	0x3fd287a7
 80050f0:	8b60c8b3 	.word	0x8b60c8b3
 80050f4:	3fc68a28 	.word	0x3fc68a28
 80050f8:	509f79fb 	.word	0x509f79fb
 80050fc:	3fd34413 	.word	0x3fd34413
 8005100:	08008226 	.word	0x08008226
 8005104:	0800823d 	.word	0x0800823d
 8005108:	7ff00000 	.word	0x7ff00000
 800510c:	08008222 	.word	0x08008222
 8005110:	08008219 	.word	0x08008219
 8005114:	0800809d 	.word	0x0800809d
 8005118:	3ff80000 	.word	0x3ff80000
 800511c:	080083a8 	.word	0x080083a8
 8005120:	08008298 	.word	0x08008298
 8005124:	2401      	movs	r4, #1
 8005126:	2300      	movs	r3, #0
 8005128:	940b      	str	r4, [sp, #44]	; 0x2c
 800512a:	9322      	str	r3, [sp, #136]	; 0x88
 800512c:	f04f 39ff 	mov.w	r9, #4294967295
 8005130:	2200      	movs	r2, #0
 8005132:	2312      	movs	r3, #18
 8005134:	f8cd 9020 	str.w	r9, [sp, #32]
 8005138:	9223      	str	r2, [sp, #140]	; 0x8c
 800513a:	e7b0      	b.n	800509e <_dtoa_r+0x266>
 800513c:	2301      	movs	r3, #1
 800513e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005140:	e7f4      	b.n	800512c <_dtoa_r+0x2f4>
 8005142:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005146:	464b      	mov	r3, r9
 8005148:	f8cd 9020 	str.w	r9, [sp, #32]
 800514c:	e7a7      	b.n	800509e <_dtoa_r+0x266>
 800514e:	3101      	adds	r1, #1
 8005150:	6041      	str	r1, [r0, #4]
 8005152:	0052      	lsls	r2, r2, #1
 8005154:	e7a7      	b.n	80050a6 <_dtoa_r+0x26e>
 8005156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005158:	9a03      	ldr	r2, [sp, #12]
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	9b08      	ldr	r3, [sp, #32]
 800515e:	2b0e      	cmp	r3, #14
 8005160:	f200 80a8 	bhi.w	80052b4 <_dtoa_r+0x47c>
 8005164:	2c00      	cmp	r4, #0
 8005166:	f000 80a5 	beq.w	80052b4 <_dtoa_r+0x47c>
 800516a:	f1ba 0f00 	cmp.w	sl, #0
 800516e:	dd34      	ble.n	80051da <_dtoa_r+0x3a2>
 8005170:	4a9a      	ldr	r2, [pc, #616]	; (80053dc <_dtoa_r+0x5a4>)
 8005172:	f00a 030f 	and.w	r3, sl, #15
 8005176:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800517a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800517e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005182:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005186:	ea4f 142a 	mov.w	r4, sl, asr #4
 800518a:	d016      	beq.n	80051ba <_dtoa_r+0x382>
 800518c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005190:	4b93      	ldr	r3, [pc, #588]	; (80053e0 <_dtoa_r+0x5a8>)
 8005192:	2703      	movs	r7, #3
 8005194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005198:	f7fb fac8 	bl	800072c <__aeabi_ddiv>
 800519c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a0:	f004 040f 	and.w	r4, r4, #15
 80051a4:	4e8e      	ldr	r6, [pc, #568]	; (80053e0 <_dtoa_r+0x5a8>)
 80051a6:	b954      	cbnz	r4, 80051be <_dtoa_r+0x386>
 80051a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b0:	f7fb fabc 	bl	800072c <__aeabi_ddiv>
 80051b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051b8:	e029      	b.n	800520e <_dtoa_r+0x3d6>
 80051ba:	2702      	movs	r7, #2
 80051bc:	e7f2      	b.n	80051a4 <_dtoa_r+0x36c>
 80051be:	07e1      	lsls	r1, r4, #31
 80051c0:	d508      	bpl.n	80051d4 <_dtoa_r+0x39c>
 80051c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051ca:	f7fb f985 	bl	80004d8 <__aeabi_dmul>
 80051ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051d2:	3701      	adds	r7, #1
 80051d4:	1064      	asrs	r4, r4, #1
 80051d6:	3608      	adds	r6, #8
 80051d8:	e7e5      	b.n	80051a6 <_dtoa_r+0x36e>
 80051da:	f000 80a5 	beq.w	8005328 <_dtoa_r+0x4f0>
 80051de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051e2:	f1ca 0400 	rsb	r4, sl, #0
 80051e6:	4b7d      	ldr	r3, [pc, #500]	; (80053dc <_dtoa_r+0x5a4>)
 80051e8:	f004 020f 	and.w	r2, r4, #15
 80051ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb f970 	bl	80004d8 <__aeabi_dmul>
 80051f8:	2702      	movs	r7, #2
 80051fa:	2300      	movs	r3, #0
 80051fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005200:	4e77      	ldr	r6, [pc, #476]	; (80053e0 <_dtoa_r+0x5a8>)
 8005202:	1124      	asrs	r4, r4, #4
 8005204:	2c00      	cmp	r4, #0
 8005206:	f040 8084 	bne.w	8005312 <_dtoa_r+0x4da>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1d2      	bne.n	80051b4 <_dtoa_r+0x37c>
 800520e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 808b 	beq.w	800532c <_dtoa_r+0x4f4>
 8005216:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800521a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800521e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005222:	2200      	movs	r2, #0
 8005224:	4b6f      	ldr	r3, [pc, #444]	; (80053e4 <_dtoa_r+0x5ac>)
 8005226:	f7fb fbc9 	bl	80009bc <__aeabi_dcmplt>
 800522a:	2800      	cmp	r0, #0
 800522c:	d07e      	beq.n	800532c <_dtoa_r+0x4f4>
 800522e:	9b08      	ldr	r3, [sp, #32]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d07b      	beq.n	800532c <_dtoa_r+0x4f4>
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	dd38      	ble.n	80052ac <_dtoa_r+0x474>
 800523a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800523e:	2200      	movs	r2, #0
 8005240:	4b69      	ldr	r3, [pc, #420]	; (80053e8 <_dtoa_r+0x5b0>)
 8005242:	f7fb f949 	bl	80004d8 <__aeabi_dmul>
 8005246:	464c      	mov	r4, r9
 8005248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800524c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005250:	3701      	adds	r7, #1
 8005252:	4638      	mov	r0, r7
 8005254:	f7fb f8d6 	bl	8000404 <__aeabi_i2d>
 8005258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800525c:	f7fb f93c 	bl	80004d8 <__aeabi_dmul>
 8005260:	2200      	movs	r2, #0
 8005262:	4b62      	ldr	r3, [pc, #392]	; (80053ec <_dtoa_r+0x5b4>)
 8005264:	f7fa ff82 	bl	800016c <__adddf3>
 8005268:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800526c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005270:	9611      	str	r6, [sp, #68]	; 0x44
 8005272:	2c00      	cmp	r4, #0
 8005274:	d15d      	bne.n	8005332 <_dtoa_r+0x4fa>
 8005276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800527a:	2200      	movs	r2, #0
 800527c:	4b5c      	ldr	r3, [pc, #368]	; (80053f0 <_dtoa_r+0x5b8>)
 800527e:	f7fa ff73 	bl	8000168 <__aeabi_dsub>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800528a:	4633      	mov	r3, r6
 800528c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800528e:	f7fb fbb3 	bl	80009f8 <__aeabi_dcmpgt>
 8005292:	2800      	cmp	r0, #0
 8005294:	f040 829c 	bne.w	80057d0 <_dtoa_r+0x998>
 8005298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800529c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800529e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052a2:	f7fb fb8b 	bl	80009bc <__aeabi_dcmplt>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f040 8290 	bne.w	80057cc <_dtoa_r+0x994>
 80052ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f2c0 8152 	blt.w	8005560 <_dtoa_r+0x728>
 80052bc:	f1ba 0f0e 	cmp.w	sl, #14
 80052c0:	f300 814e 	bgt.w	8005560 <_dtoa_r+0x728>
 80052c4:	4b45      	ldr	r3, [pc, #276]	; (80053dc <_dtoa_r+0x5a4>)
 80052c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f280 80db 	bge.w	8005490 <_dtoa_r+0x658>
 80052da:	9b08      	ldr	r3, [sp, #32]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f300 80d7 	bgt.w	8005490 <_dtoa_r+0x658>
 80052e2:	f040 8272 	bne.w	80057ca <_dtoa_r+0x992>
 80052e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052ea:	2200      	movs	r2, #0
 80052ec:	4b40      	ldr	r3, [pc, #256]	; (80053f0 <_dtoa_r+0x5b8>)
 80052ee:	f7fb f8f3 	bl	80004d8 <__aeabi_dmul>
 80052f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f6:	f7fb fb75 	bl	80009e4 <__aeabi_dcmpge>
 80052fa:	9c08      	ldr	r4, [sp, #32]
 80052fc:	4626      	mov	r6, r4
 80052fe:	2800      	cmp	r0, #0
 8005300:	f040 8248 	bne.w	8005794 <_dtoa_r+0x95c>
 8005304:	2331      	movs	r3, #49	; 0x31
 8005306:	9f03      	ldr	r7, [sp, #12]
 8005308:	f10a 0a01 	add.w	sl, sl, #1
 800530c:	f807 3b01 	strb.w	r3, [r7], #1
 8005310:	e244      	b.n	800579c <_dtoa_r+0x964>
 8005312:	07e2      	lsls	r2, r4, #31
 8005314:	d505      	bpl.n	8005322 <_dtoa_r+0x4ea>
 8005316:	e9d6 2300 	ldrd	r2, r3, [r6]
 800531a:	f7fb f8dd 	bl	80004d8 <__aeabi_dmul>
 800531e:	2301      	movs	r3, #1
 8005320:	3701      	adds	r7, #1
 8005322:	1064      	asrs	r4, r4, #1
 8005324:	3608      	adds	r6, #8
 8005326:	e76d      	b.n	8005204 <_dtoa_r+0x3cc>
 8005328:	2702      	movs	r7, #2
 800532a:	e770      	b.n	800520e <_dtoa_r+0x3d6>
 800532c:	46d0      	mov	r8, sl
 800532e:	9c08      	ldr	r4, [sp, #32]
 8005330:	e78f      	b.n	8005252 <_dtoa_r+0x41a>
 8005332:	9903      	ldr	r1, [sp, #12]
 8005334:	4b29      	ldr	r3, [pc, #164]	; (80053dc <_dtoa_r+0x5a4>)
 8005336:	4421      	add	r1, r4
 8005338:	9112      	str	r1, [sp, #72]	; 0x48
 800533a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800533c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005340:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005344:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005348:	2900      	cmp	r1, #0
 800534a:	d055      	beq.n	80053f8 <_dtoa_r+0x5c0>
 800534c:	2000      	movs	r0, #0
 800534e:	4929      	ldr	r1, [pc, #164]	; (80053f4 <_dtoa_r+0x5bc>)
 8005350:	f7fb f9ec 	bl	800072c <__aeabi_ddiv>
 8005354:	463b      	mov	r3, r7
 8005356:	4632      	mov	r2, r6
 8005358:	f7fa ff06 	bl	8000168 <__aeabi_dsub>
 800535c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005360:	9f03      	ldr	r7, [sp, #12]
 8005362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005366:	f7fb fb67 	bl	8000a38 <__aeabi_d2iz>
 800536a:	4604      	mov	r4, r0
 800536c:	f7fb f84a 	bl	8000404 <__aeabi_i2d>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005378:	f7fa fef6 	bl	8000168 <__aeabi_dsub>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	3430      	adds	r4, #48	; 0x30
 8005382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800538a:	f807 4b01 	strb.w	r4, [r7], #1
 800538e:	f7fb fb15 	bl	80009bc <__aeabi_dcmplt>
 8005392:	2800      	cmp	r0, #0
 8005394:	d174      	bne.n	8005480 <_dtoa_r+0x648>
 8005396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800539a:	2000      	movs	r0, #0
 800539c:	4911      	ldr	r1, [pc, #68]	; (80053e4 <_dtoa_r+0x5ac>)
 800539e:	f7fa fee3 	bl	8000168 <__aeabi_dsub>
 80053a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053a6:	f7fb fb09 	bl	80009bc <__aeabi_dcmplt>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	f040 80b7 	bne.w	800551e <_dtoa_r+0x6e6>
 80053b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053b2:	429f      	cmp	r7, r3
 80053b4:	f43f af7a 	beq.w	80052ac <_dtoa_r+0x474>
 80053b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053bc:	2200      	movs	r2, #0
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <_dtoa_r+0x5b0>)
 80053c0:	f7fb f88a 	bl	80004d8 <__aeabi_dmul>
 80053c4:	2200      	movs	r2, #0
 80053c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <_dtoa_r+0x5b0>)
 80053d0:	f7fb f882 	bl	80004d8 <__aeabi_dmul>
 80053d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d8:	e7c3      	b.n	8005362 <_dtoa_r+0x52a>
 80053da:	bf00      	nop
 80053dc:	080083a8 	.word	0x080083a8
 80053e0:	08008380 	.word	0x08008380
 80053e4:	3ff00000 	.word	0x3ff00000
 80053e8:	40240000 	.word	0x40240000
 80053ec:	401c0000 	.word	0x401c0000
 80053f0:	40140000 	.word	0x40140000
 80053f4:	3fe00000 	.word	0x3fe00000
 80053f8:	4630      	mov	r0, r6
 80053fa:	4639      	mov	r1, r7
 80053fc:	f7fb f86c 	bl	80004d8 <__aeabi_dmul>
 8005400:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005402:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005406:	9c03      	ldr	r4, [sp, #12]
 8005408:	9314      	str	r3, [sp, #80]	; 0x50
 800540a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800540e:	f7fb fb13 	bl	8000a38 <__aeabi_d2iz>
 8005412:	9015      	str	r0, [sp, #84]	; 0x54
 8005414:	f7fa fff6 	bl	8000404 <__aeabi_i2d>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005420:	f7fa fea2 	bl	8000168 <__aeabi_dsub>
 8005424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005426:	4606      	mov	r6, r0
 8005428:	3330      	adds	r3, #48	; 0x30
 800542a:	f804 3b01 	strb.w	r3, [r4], #1
 800542e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005430:	460f      	mov	r7, r1
 8005432:	429c      	cmp	r4, r3
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	d124      	bne.n	8005484 <_dtoa_r+0x64c>
 800543a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800543e:	4bb0      	ldr	r3, [pc, #704]	; (8005700 <_dtoa_r+0x8c8>)
 8005440:	f7fa fe94 	bl	800016c <__adddf3>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f7fb fad4 	bl	80009f8 <__aeabi_dcmpgt>
 8005450:	2800      	cmp	r0, #0
 8005452:	d163      	bne.n	800551c <_dtoa_r+0x6e4>
 8005454:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005458:	2000      	movs	r0, #0
 800545a:	49a9      	ldr	r1, [pc, #676]	; (8005700 <_dtoa_r+0x8c8>)
 800545c:	f7fa fe84 	bl	8000168 <__aeabi_dsub>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4630      	mov	r0, r6
 8005466:	4639      	mov	r1, r7
 8005468:	f7fb faa8 	bl	80009bc <__aeabi_dcmplt>
 800546c:	2800      	cmp	r0, #0
 800546e:	f43f af1d 	beq.w	80052ac <_dtoa_r+0x474>
 8005472:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005474:	1e7b      	subs	r3, r7, #1
 8005476:	9314      	str	r3, [sp, #80]	; 0x50
 8005478:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d0f8      	beq.n	8005472 <_dtoa_r+0x63a>
 8005480:	46c2      	mov	sl, r8
 8005482:	e03b      	b.n	80054fc <_dtoa_r+0x6c4>
 8005484:	4b9f      	ldr	r3, [pc, #636]	; (8005704 <_dtoa_r+0x8cc>)
 8005486:	f7fb f827 	bl	80004d8 <__aeabi_dmul>
 800548a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800548e:	e7bc      	b.n	800540a <_dtoa_r+0x5d2>
 8005490:	9f03      	ldr	r7, [sp, #12]
 8005492:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800549a:	4640      	mov	r0, r8
 800549c:	4649      	mov	r1, r9
 800549e:	f7fb f945 	bl	800072c <__aeabi_ddiv>
 80054a2:	f7fb fac9 	bl	8000a38 <__aeabi_d2iz>
 80054a6:	4604      	mov	r4, r0
 80054a8:	f7fa ffac 	bl	8000404 <__aeabi_i2d>
 80054ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054b0:	f7fb f812 	bl	80004d8 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fa fe54 	bl	8000168 <__aeabi_dsub>
 80054c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054c4:	f807 6b01 	strb.w	r6, [r7], #1
 80054c8:	9e03      	ldr	r6, [sp, #12]
 80054ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054ce:	1bbe      	subs	r6, r7, r6
 80054d0:	45b4      	cmp	ip, r6
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	d136      	bne.n	8005546 <_dtoa_r+0x70e>
 80054d8:	f7fa fe48 	bl	800016c <__adddf3>
 80054dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e0:	4680      	mov	r8, r0
 80054e2:	4689      	mov	r9, r1
 80054e4:	f7fb fa88 	bl	80009f8 <__aeabi_dcmpgt>
 80054e8:	bb58      	cbnz	r0, 8005542 <_dtoa_r+0x70a>
 80054ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fb fa59 	bl	80009a8 <__aeabi_dcmpeq>
 80054f6:	b108      	cbz	r0, 80054fc <_dtoa_r+0x6c4>
 80054f8:	07e1      	lsls	r1, r4, #31
 80054fa:	d422      	bmi.n	8005542 <_dtoa_r+0x70a>
 80054fc:	4628      	mov	r0, r5
 80054fe:	4659      	mov	r1, fp
 8005500:	f000 fe7a 	bl	80061f8 <_Bfree>
 8005504:	2300      	movs	r3, #0
 8005506:	703b      	strb	r3, [r7, #0]
 8005508:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800550a:	f10a 0001 	add.w	r0, sl, #1
 800550e:	6018      	str	r0, [r3, #0]
 8005510:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005512:	2b00      	cmp	r3, #0
 8005514:	f43f acde 	beq.w	8004ed4 <_dtoa_r+0x9c>
 8005518:	601f      	str	r7, [r3, #0]
 800551a:	e4db      	b.n	8004ed4 <_dtoa_r+0x9c>
 800551c:	4627      	mov	r7, r4
 800551e:	463b      	mov	r3, r7
 8005520:	461f      	mov	r7, r3
 8005522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005526:	2a39      	cmp	r2, #57	; 0x39
 8005528:	d107      	bne.n	800553a <_dtoa_r+0x702>
 800552a:	9a03      	ldr	r2, [sp, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d1f7      	bne.n	8005520 <_dtoa_r+0x6e8>
 8005530:	2230      	movs	r2, #48	; 0x30
 8005532:	9903      	ldr	r1, [sp, #12]
 8005534:	f108 0801 	add.w	r8, r8, #1
 8005538:	700a      	strb	r2, [r1, #0]
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	3201      	adds	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e79e      	b.n	8005480 <_dtoa_r+0x648>
 8005542:	46d0      	mov	r8, sl
 8005544:	e7eb      	b.n	800551e <_dtoa_r+0x6e6>
 8005546:	2200      	movs	r2, #0
 8005548:	4b6e      	ldr	r3, [pc, #440]	; (8005704 <_dtoa_r+0x8cc>)
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	2200      	movs	r2, #0
 8005550:	2300      	movs	r3, #0
 8005552:	4680      	mov	r8, r0
 8005554:	4689      	mov	r9, r1
 8005556:	f7fb fa27 	bl	80009a8 <__aeabi_dcmpeq>
 800555a:	2800      	cmp	r0, #0
 800555c:	d09b      	beq.n	8005496 <_dtoa_r+0x65e>
 800555e:	e7cd      	b.n	80054fc <_dtoa_r+0x6c4>
 8005560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005562:	2a00      	cmp	r2, #0
 8005564:	f000 80d0 	beq.w	8005708 <_dtoa_r+0x8d0>
 8005568:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800556a:	2a01      	cmp	r2, #1
 800556c:	f300 80ae 	bgt.w	80056cc <_dtoa_r+0x894>
 8005570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005572:	2a00      	cmp	r2, #0
 8005574:	f000 80a6 	beq.w	80056c4 <_dtoa_r+0x88c>
 8005578:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800557c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800557e:	9f06      	ldr	r7, [sp, #24]
 8005580:	9a06      	ldr	r2, [sp, #24]
 8005582:	2101      	movs	r1, #1
 8005584:	441a      	add	r2, r3
 8005586:	9206      	str	r2, [sp, #24]
 8005588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800558a:	4628      	mov	r0, r5
 800558c:	441a      	add	r2, r3
 800558e:	9209      	str	r2, [sp, #36]	; 0x24
 8005590:	f000 ff32 	bl	80063f8 <__i2b>
 8005594:	4606      	mov	r6, r0
 8005596:	2f00      	cmp	r7, #0
 8005598:	dd0c      	ble.n	80055b4 <_dtoa_r+0x77c>
 800559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	dd09      	ble.n	80055b4 <_dtoa_r+0x77c>
 80055a0:	42bb      	cmp	r3, r7
 80055a2:	bfa8      	it	ge
 80055a4:	463b      	movge	r3, r7
 80055a6:	9a06      	ldr	r2, [sp, #24]
 80055a8:	1aff      	subs	r7, r7, r3
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	9206      	str	r2, [sp, #24]
 80055ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	9309      	str	r3, [sp, #36]	; 0x24
 80055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b6:	b1f3      	cbz	r3, 80055f6 <_dtoa_r+0x7be>
 80055b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80a8 	beq.w	8005710 <_dtoa_r+0x8d8>
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	dd10      	ble.n	80055e6 <_dtoa_r+0x7ae>
 80055c4:	4631      	mov	r1, r6
 80055c6:	4622      	mov	r2, r4
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 ffd3 	bl	8006574 <__pow5mult>
 80055ce:	465a      	mov	r2, fp
 80055d0:	4601      	mov	r1, r0
 80055d2:	4606      	mov	r6, r0
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 ff25 	bl	8006424 <__multiply>
 80055da:	4680      	mov	r8, r0
 80055dc:	4659      	mov	r1, fp
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 fe0a 	bl	80061f8 <_Bfree>
 80055e4:	46c3      	mov	fp, r8
 80055e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e8:	1b1a      	subs	r2, r3, r4
 80055ea:	d004      	beq.n	80055f6 <_dtoa_r+0x7be>
 80055ec:	4659      	mov	r1, fp
 80055ee:	4628      	mov	r0, r5
 80055f0:	f000 ffc0 	bl	8006574 <__pow5mult>
 80055f4:	4683      	mov	fp, r0
 80055f6:	2101      	movs	r1, #1
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 fefd 	bl	80063f8 <__i2b>
 80055fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005600:	4604      	mov	r4, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f340 8086 	ble.w	8005714 <_dtoa_r+0x8dc>
 8005608:	461a      	mov	r2, r3
 800560a:	4601      	mov	r1, r0
 800560c:	4628      	mov	r0, r5
 800560e:	f000 ffb1 	bl	8006574 <__pow5mult>
 8005612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005614:	4604      	mov	r4, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	dd7f      	ble.n	800571a <_dtoa_r+0x8e2>
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005624:	6918      	ldr	r0, [r3, #16]
 8005626:	f000 fe99 	bl	800635c <__hi0bits>
 800562a:	f1c0 0020 	rsb	r0, r0, #32
 800562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005630:	4418      	add	r0, r3
 8005632:	f010 001f 	ands.w	r0, r0, #31
 8005636:	f000 8092 	beq.w	800575e <_dtoa_r+0x926>
 800563a:	f1c0 0320 	rsb	r3, r0, #32
 800563e:	2b04      	cmp	r3, #4
 8005640:	f340 808a 	ble.w	8005758 <_dtoa_r+0x920>
 8005644:	f1c0 001c 	rsb	r0, r0, #28
 8005648:	9b06      	ldr	r3, [sp, #24]
 800564a:	4407      	add	r7, r0
 800564c:	4403      	add	r3, r0
 800564e:	9306      	str	r3, [sp, #24]
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	4403      	add	r3, r0
 8005654:	9309      	str	r3, [sp, #36]	; 0x24
 8005656:	9b06      	ldr	r3, [sp, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dd05      	ble.n	8005668 <_dtoa_r+0x830>
 800565c:	4659      	mov	r1, fp
 800565e:	461a      	mov	r2, r3
 8005660:	4628      	mov	r0, r5
 8005662:	f000 ffe1 	bl	8006628 <__lshift>
 8005666:	4683      	mov	fp, r0
 8005668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	dd05      	ble.n	800567a <_dtoa_r+0x842>
 800566e:	4621      	mov	r1, r4
 8005670:	461a      	mov	r2, r3
 8005672:	4628      	mov	r0, r5
 8005674:	f000 ffd8 	bl	8006628 <__lshift>
 8005678:	4604      	mov	r4, r0
 800567a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d070      	beq.n	8005762 <_dtoa_r+0x92a>
 8005680:	4621      	mov	r1, r4
 8005682:	4658      	mov	r0, fp
 8005684:	f001 f840 	bl	8006708 <__mcmp>
 8005688:	2800      	cmp	r0, #0
 800568a:	da6a      	bge.n	8005762 <_dtoa_r+0x92a>
 800568c:	2300      	movs	r3, #0
 800568e:	4659      	mov	r1, fp
 8005690:	220a      	movs	r2, #10
 8005692:	4628      	mov	r0, r5
 8005694:	f000 fdd2 	bl	800623c <__multadd>
 8005698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800569a:	4683      	mov	fp, r0
 800569c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8194 	beq.w	80059ce <_dtoa_r+0xb96>
 80056a6:	4631      	mov	r1, r6
 80056a8:	2300      	movs	r3, #0
 80056aa:	220a      	movs	r2, #10
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fdc5 	bl	800623c <__multadd>
 80056b2:	f1b9 0f00 	cmp.w	r9, #0
 80056b6:	4606      	mov	r6, r0
 80056b8:	f300 8093 	bgt.w	80057e2 <_dtoa_r+0x9aa>
 80056bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056be:	2b02      	cmp	r3, #2
 80056c0:	dc57      	bgt.n	8005772 <_dtoa_r+0x93a>
 80056c2:	e08e      	b.n	80057e2 <_dtoa_r+0x9aa>
 80056c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056ca:	e757      	b.n	800557c <_dtoa_r+0x744>
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	1e5c      	subs	r4, r3, #1
 80056d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	bfb7      	itett	lt
 80056d6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056d8:	1b1c      	subge	r4, r3, r4
 80056da:	1ae2      	sublt	r2, r4, r3
 80056dc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80056de:	bfbe      	ittt	lt
 80056e0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80056e2:	189b      	addlt	r3, r3, r2
 80056e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80056e6:	9b08      	ldr	r3, [sp, #32]
 80056e8:	bfb8      	it	lt
 80056ea:	2400      	movlt	r4, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfbb      	ittet	lt
 80056f0:	9b06      	ldrlt	r3, [sp, #24]
 80056f2:	9a08      	ldrlt	r2, [sp, #32]
 80056f4:	9f06      	ldrge	r7, [sp, #24]
 80056f6:	1a9f      	sublt	r7, r3, r2
 80056f8:	bfac      	ite	ge
 80056fa:	9b08      	ldrge	r3, [sp, #32]
 80056fc:	2300      	movlt	r3, #0
 80056fe:	e73f      	b.n	8005580 <_dtoa_r+0x748>
 8005700:	3fe00000 	.word	0x3fe00000
 8005704:	40240000 	.word	0x40240000
 8005708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800570a:	9f06      	ldr	r7, [sp, #24]
 800570c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800570e:	e742      	b.n	8005596 <_dtoa_r+0x75e>
 8005710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005712:	e76b      	b.n	80055ec <_dtoa_r+0x7b4>
 8005714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005716:	2b01      	cmp	r3, #1
 8005718:	dc19      	bgt.n	800574e <_dtoa_r+0x916>
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	b9bb      	cbnz	r3, 800574e <_dtoa_r+0x916>
 800571e:	9b05      	ldr	r3, [sp, #20]
 8005720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005724:	b99b      	cbnz	r3, 800574e <_dtoa_r+0x916>
 8005726:	9b05      	ldr	r3, [sp, #20]
 8005728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800572c:	0d1b      	lsrs	r3, r3, #20
 800572e:	051b      	lsls	r3, r3, #20
 8005730:	b183      	cbz	r3, 8005754 <_dtoa_r+0x91c>
 8005732:	f04f 0801 	mov.w	r8, #1
 8005736:	9b06      	ldr	r3, [sp, #24]
 8005738:	3301      	adds	r3, #1
 800573a:	9306      	str	r3, [sp, #24]
 800573c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573e:	3301      	adds	r3, #1
 8005740:	9309      	str	r3, [sp, #36]	; 0x24
 8005742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005744:	2b00      	cmp	r3, #0
 8005746:	f47f af6a 	bne.w	800561e <_dtoa_r+0x7e6>
 800574a:	2001      	movs	r0, #1
 800574c:	e76f      	b.n	800562e <_dtoa_r+0x7f6>
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	e7f6      	b.n	8005742 <_dtoa_r+0x90a>
 8005754:	4698      	mov	r8, r3
 8005756:	e7f4      	b.n	8005742 <_dtoa_r+0x90a>
 8005758:	f43f af7d 	beq.w	8005656 <_dtoa_r+0x81e>
 800575c:	4618      	mov	r0, r3
 800575e:	301c      	adds	r0, #28
 8005760:	e772      	b.n	8005648 <_dtoa_r+0x810>
 8005762:	9b08      	ldr	r3, [sp, #32]
 8005764:	2b00      	cmp	r3, #0
 8005766:	dc36      	bgt.n	80057d6 <_dtoa_r+0x99e>
 8005768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800576a:	2b02      	cmp	r3, #2
 800576c:	dd33      	ble.n	80057d6 <_dtoa_r+0x99e>
 800576e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005772:	f1b9 0f00 	cmp.w	r9, #0
 8005776:	d10d      	bne.n	8005794 <_dtoa_r+0x95c>
 8005778:	4621      	mov	r1, r4
 800577a:	464b      	mov	r3, r9
 800577c:	2205      	movs	r2, #5
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fd5c 	bl	800623c <__multadd>
 8005784:	4601      	mov	r1, r0
 8005786:	4604      	mov	r4, r0
 8005788:	4658      	mov	r0, fp
 800578a:	f000 ffbd 	bl	8006708 <__mcmp>
 800578e:	2800      	cmp	r0, #0
 8005790:	f73f adb8 	bgt.w	8005304 <_dtoa_r+0x4cc>
 8005794:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005796:	9f03      	ldr	r7, [sp, #12]
 8005798:	ea6f 0a03 	mvn.w	sl, r3
 800579c:	f04f 0800 	mov.w	r8, #0
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fd28 	bl	80061f8 <_Bfree>
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	f43f aea7 	beq.w	80054fc <_dtoa_r+0x6c4>
 80057ae:	f1b8 0f00 	cmp.w	r8, #0
 80057b2:	d005      	beq.n	80057c0 <_dtoa_r+0x988>
 80057b4:	45b0      	cmp	r8, r6
 80057b6:	d003      	beq.n	80057c0 <_dtoa_r+0x988>
 80057b8:	4641      	mov	r1, r8
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 fd1c 	bl	80061f8 <_Bfree>
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 fd18 	bl	80061f8 <_Bfree>
 80057c8:	e698      	b.n	80054fc <_dtoa_r+0x6c4>
 80057ca:	2400      	movs	r4, #0
 80057cc:	4626      	mov	r6, r4
 80057ce:	e7e1      	b.n	8005794 <_dtoa_r+0x95c>
 80057d0:	46c2      	mov	sl, r8
 80057d2:	4626      	mov	r6, r4
 80057d4:	e596      	b.n	8005304 <_dtoa_r+0x4cc>
 80057d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80fd 	beq.w	80059dc <_dtoa_r+0xba4>
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	dd05      	ble.n	80057f2 <_dtoa_r+0x9ba>
 80057e6:	4631      	mov	r1, r6
 80057e8:	463a      	mov	r2, r7
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 ff1c 	bl	8006628 <__lshift>
 80057f0:	4606      	mov	r6, r0
 80057f2:	f1b8 0f00 	cmp.w	r8, #0
 80057f6:	d05c      	beq.n	80058b2 <_dtoa_r+0xa7a>
 80057f8:	4628      	mov	r0, r5
 80057fa:	6871      	ldr	r1, [r6, #4]
 80057fc:	f000 fcbc 	bl	8006178 <_Balloc>
 8005800:	4607      	mov	r7, r0
 8005802:	b928      	cbnz	r0, 8005810 <_dtoa_r+0x9d8>
 8005804:	4602      	mov	r2, r0
 8005806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800580a:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <_dtoa_r+0xbd0>)
 800580c:	f7ff bb28 	b.w	8004e60 <_dtoa_r+0x28>
 8005810:	6932      	ldr	r2, [r6, #16]
 8005812:	f106 010c 	add.w	r1, r6, #12
 8005816:	3202      	adds	r2, #2
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	300c      	adds	r0, #12
 800581c:	f000 fc9e 	bl	800615c <memcpy>
 8005820:	2201      	movs	r2, #1
 8005822:	4639      	mov	r1, r7
 8005824:	4628      	mov	r0, r5
 8005826:	f000 feff 	bl	8006628 <__lshift>
 800582a:	46b0      	mov	r8, r6
 800582c:	4606      	mov	r6, r0
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	444b      	add	r3, r9
 8005838:	930a      	str	r3, [sp, #40]	; 0x28
 800583a:	9b04      	ldr	r3, [sp, #16]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	9309      	str	r3, [sp, #36]	; 0x24
 8005842:	9b08      	ldr	r3, [sp, #32]
 8005844:	4621      	mov	r1, r4
 8005846:	3b01      	subs	r3, #1
 8005848:	4658      	mov	r0, fp
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	f7ff fa66 	bl	8004d1c <quorem>
 8005850:	4603      	mov	r3, r0
 8005852:	4641      	mov	r1, r8
 8005854:	3330      	adds	r3, #48	; 0x30
 8005856:	9006      	str	r0, [sp, #24]
 8005858:	4658      	mov	r0, fp
 800585a:	930b      	str	r3, [sp, #44]	; 0x2c
 800585c:	f000 ff54 	bl	8006708 <__mcmp>
 8005860:	4632      	mov	r2, r6
 8005862:	4681      	mov	r9, r0
 8005864:	4621      	mov	r1, r4
 8005866:	4628      	mov	r0, r5
 8005868:	f000 ff6a 	bl	8006740 <__mdiff>
 800586c:	68c2      	ldr	r2, [r0, #12]
 800586e:	4607      	mov	r7, r0
 8005870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005872:	bb02      	cbnz	r2, 80058b6 <_dtoa_r+0xa7e>
 8005874:	4601      	mov	r1, r0
 8005876:	4658      	mov	r0, fp
 8005878:	f000 ff46 	bl	8006708 <__mcmp>
 800587c:	4602      	mov	r2, r0
 800587e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005880:	4639      	mov	r1, r7
 8005882:	4628      	mov	r0, r5
 8005884:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005888:	f000 fcb6 	bl	80061f8 <_Bfree>
 800588c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800588e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005890:	9f08      	ldr	r7, [sp, #32]
 8005892:	ea43 0102 	orr.w	r1, r3, r2
 8005896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005898:	430b      	orrs	r3, r1
 800589a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800589c:	d10d      	bne.n	80058ba <_dtoa_r+0xa82>
 800589e:	2b39      	cmp	r3, #57	; 0x39
 80058a0:	d029      	beq.n	80058f6 <_dtoa_r+0xabe>
 80058a2:	f1b9 0f00 	cmp.w	r9, #0
 80058a6:	dd01      	ble.n	80058ac <_dtoa_r+0xa74>
 80058a8:	9b06      	ldr	r3, [sp, #24]
 80058aa:	3331      	adds	r3, #49	; 0x31
 80058ac:	9a04      	ldr	r2, [sp, #16]
 80058ae:	7013      	strb	r3, [r2, #0]
 80058b0:	e776      	b.n	80057a0 <_dtoa_r+0x968>
 80058b2:	4630      	mov	r0, r6
 80058b4:	e7b9      	b.n	800582a <_dtoa_r+0x9f2>
 80058b6:	2201      	movs	r2, #1
 80058b8:	e7e2      	b.n	8005880 <_dtoa_r+0xa48>
 80058ba:	f1b9 0f00 	cmp.w	r9, #0
 80058be:	db06      	blt.n	80058ce <_dtoa_r+0xa96>
 80058c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058c2:	ea41 0909 	orr.w	r9, r1, r9
 80058c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c8:	ea59 0101 	orrs.w	r1, r9, r1
 80058cc:	d120      	bne.n	8005910 <_dtoa_r+0xad8>
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	ddec      	ble.n	80058ac <_dtoa_r+0xa74>
 80058d2:	4659      	mov	r1, fp
 80058d4:	2201      	movs	r2, #1
 80058d6:	4628      	mov	r0, r5
 80058d8:	9308      	str	r3, [sp, #32]
 80058da:	f000 fea5 	bl	8006628 <__lshift>
 80058de:	4621      	mov	r1, r4
 80058e0:	4683      	mov	fp, r0
 80058e2:	f000 ff11 	bl	8006708 <__mcmp>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	9b08      	ldr	r3, [sp, #32]
 80058ea:	dc02      	bgt.n	80058f2 <_dtoa_r+0xaba>
 80058ec:	d1de      	bne.n	80058ac <_dtoa_r+0xa74>
 80058ee:	07da      	lsls	r2, r3, #31
 80058f0:	d5dc      	bpl.n	80058ac <_dtoa_r+0xa74>
 80058f2:	2b39      	cmp	r3, #57	; 0x39
 80058f4:	d1d8      	bne.n	80058a8 <_dtoa_r+0xa70>
 80058f6:	2339      	movs	r3, #57	; 0x39
 80058f8:	9a04      	ldr	r2, [sp, #16]
 80058fa:	7013      	strb	r3, [r2, #0]
 80058fc:	463b      	mov	r3, r7
 80058fe:	461f      	mov	r7, r3
 8005900:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005904:	3b01      	subs	r3, #1
 8005906:	2a39      	cmp	r2, #57	; 0x39
 8005908:	d050      	beq.n	80059ac <_dtoa_r+0xb74>
 800590a:	3201      	adds	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e747      	b.n	80057a0 <_dtoa_r+0x968>
 8005910:	2a00      	cmp	r2, #0
 8005912:	dd03      	ble.n	800591c <_dtoa_r+0xae4>
 8005914:	2b39      	cmp	r3, #57	; 0x39
 8005916:	d0ee      	beq.n	80058f6 <_dtoa_r+0xabe>
 8005918:	3301      	adds	r3, #1
 800591a:	e7c7      	b.n	80058ac <_dtoa_r+0xa74>
 800591c:	9a08      	ldr	r2, [sp, #32]
 800591e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005920:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005924:	428a      	cmp	r2, r1
 8005926:	d02a      	beq.n	800597e <_dtoa_r+0xb46>
 8005928:	4659      	mov	r1, fp
 800592a:	2300      	movs	r3, #0
 800592c:	220a      	movs	r2, #10
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fc84 	bl	800623c <__multadd>
 8005934:	45b0      	cmp	r8, r6
 8005936:	4683      	mov	fp, r0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	f04f 020a 	mov.w	r2, #10
 8005940:	4641      	mov	r1, r8
 8005942:	4628      	mov	r0, r5
 8005944:	d107      	bne.n	8005956 <_dtoa_r+0xb1e>
 8005946:	f000 fc79 	bl	800623c <__multadd>
 800594a:	4680      	mov	r8, r0
 800594c:	4606      	mov	r6, r0
 800594e:	9b08      	ldr	r3, [sp, #32]
 8005950:	3301      	adds	r3, #1
 8005952:	9308      	str	r3, [sp, #32]
 8005954:	e775      	b.n	8005842 <_dtoa_r+0xa0a>
 8005956:	f000 fc71 	bl	800623c <__multadd>
 800595a:	4631      	mov	r1, r6
 800595c:	4680      	mov	r8, r0
 800595e:	2300      	movs	r3, #0
 8005960:	220a      	movs	r2, #10
 8005962:	4628      	mov	r0, r5
 8005964:	f000 fc6a 	bl	800623c <__multadd>
 8005968:	4606      	mov	r6, r0
 800596a:	e7f0      	b.n	800594e <_dtoa_r+0xb16>
 800596c:	f1b9 0f00 	cmp.w	r9, #0
 8005970:	bfcc      	ite	gt
 8005972:	464f      	movgt	r7, r9
 8005974:	2701      	movle	r7, #1
 8005976:	f04f 0800 	mov.w	r8, #0
 800597a:	9a03      	ldr	r2, [sp, #12]
 800597c:	4417      	add	r7, r2
 800597e:	4659      	mov	r1, fp
 8005980:	2201      	movs	r2, #1
 8005982:	4628      	mov	r0, r5
 8005984:	9308      	str	r3, [sp, #32]
 8005986:	f000 fe4f 	bl	8006628 <__lshift>
 800598a:	4621      	mov	r1, r4
 800598c:	4683      	mov	fp, r0
 800598e:	f000 febb 	bl	8006708 <__mcmp>
 8005992:	2800      	cmp	r0, #0
 8005994:	dcb2      	bgt.n	80058fc <_dtoa_r+0xac4>
 8005996:	d102      	bne.n	800599e <_dtoa_r+0xb66>
 8005998:	9b08      	ldr	r3, [sp, #32]
 800599a:	07db      	lsls	r3, r3, #31
 800599c:	d4ae      	bmi.n	80058fc <_dtoa_r+0xac4>
 800599e:	463b      	mov	r3, r7
 80059a0:	461f      	mov	r7, r3
 80059a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059a6:	2a30      	cmp	r2, #48	; 0x30
 80059a8:	d0fa      	beq.n	80059a0 <_dtoa_r+0xb68>
 80059aa:	e6f9      	b.n	80057a0 <_dtoa_r+0x968>
 80059ac:	9a03      	ldr	r2, [sp, #12]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d1a5      	bne.n	80058fe <_dtoa_r+0xac6>
 80059b2:	2331      	movs	r3, #49	; 0x31
 80059b4:	f10a 0a01 	add.w	sl, sl, #1
 80059b8:	e779      	b.n	80058ae <_dtoa_r+0xa76>
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <_dtoa_r+0xbd4>)
 80059bc:	f7ff baa8 	b.w	8004f10 <_dtoa_r+0xd8>
 80059c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f47f aa81 	bne.w	8004eca <_dtoa_r+0x92>
 80059c8:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <_dtoa_r+0xbd8>)
 80059ca:	f7ff baa1 	b.w	8004f10 <_dtoa_r+0xd8>
 80059ce:	f1b9 0f00 	cmp.w	r9, #0
 80059d2:	dc03      	bgt.n	80059dc <_dtoa_r+0xba4>
 80059d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f73f aecb 	bgt.w	8005772 <_dtoa_r+0x93a>
 80059dc:	9f03      	ldr	r7, [sp, #12]
 80059de:	4621      	mov	r1, r4
 80059e0:	4658      	mov	r0, fp
 80059e2:	f7ff f99b 	bl	8004d1c <quorem>
 80059e6:	9a03      	ldr	r2, [sp, #12]
 80059e8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80059ec:	f807 3b01 	strb.w	r3, [r7], #1
 80059f0:	1aba      	subs	r2, r7, r2
 80059f2:	4591      	cmp	r9, r2
 80059f4:	ddba      	ble.n	800596c <_dtoa_r+0xb34>
 80059f6:	4659      	mov	r1, fp
 80059f8:	2300      	movs	r3, #0
 80059fa:	220a      	movs	r2, #10
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 fc1d 	bl	800623c <__multadd>
 8005a02:	4683      	mov	fp, r0
 8005a04:	e7eb      	b.n	80059de <_dtoa_r+0xba6>
 8005a06:	bf00      	nop
 8005a08:	08008298 	.word	0x08008298
 8005a0c:	0800809c 	.word	0x0800809c
 8005a10:	08008219 	.word	0x08008219

08005a14 <rshift>:
 8005a14:	6903      	ldr	r3, [r0, #16]
 8005a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005a1e:	f100 0414 	add.w	r4, r0, #20
 8005a22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005a26:	dd46      	ble.n	8005ab6 <rshift+0xa2>
 8005a28:	f011 011f 	ands.w	r1, r1, #31
 8005a2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005a30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005a34:	d10c      	bne.n	8005a50 <rshift+0x3c>
 8005a36:	4629      	mov	r1, r5
 8005a38:	f100 0710 	add.w	r7, r0, #16
 8005a3c:	42b1      	cmp	r1, r6
 8005a3e:	d335      	bcc.n	8005aac <rshift+0x98>
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	1eea      	subs	r2, r5, #3
 8005a46:	4296      	cmp	r6, r2
 8005a48:	bf38      	it	cc
 8005a4a:	2300      	movcc	r3, #0
 8005a4c:	4423      	add	r3, r4
 8005a4e:	e015      	b.n	8005a7c <rshift+0x68>
 8005a50:	46a1      	mov	r9, r4
 8005a52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005a56:	f1c1 0820 	rsb	r8, r1, #32
 8005a5a:	40cf      	lsrs	r7, r1
 8005a5c:	f105 0e04 	add.w	lr, r5, #4
 8005a60:	4576      	cmp	r6, lr
 8005a62:	46f4      	mov	ip, lr
 8005a64:	d816      	bhi.n	8005a94 <rshift+0x80>
 8005a66:	1a9a      	subs	r2, r3, r2
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	3a04      	subs	r2, #4
 8005a6c:	3501      	adds	r5, #1
 8005a6e:	42ae      	cmp	r6, r5
 8005a70:	bf38      	it	cc
 8005a72:	2200      	movcc	r2, #0
 8005a74:	18a3      	adds	r3, r4, r2
 8005a76:	50a7      	str	r7, [r4, r2]
 8005a78:	b107      	cbz	r7, 8005a7c <rshift+0x68>
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	eba3 0204 	sub.w	r2, r3, r4
 8005a82:	bf08      	it	eq
 8005a84:	2300      	moveq	r3, #0
 8005a86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005a8a:	6102      	str	r2, [r0, #16]
 8005a8c:	bf08      	it	eq
 8005a8e:	6143      	streq	r3, [r0, #20]
 8005a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a94:	f8dc c000 	ldr.w	ip, [ip]
 8005a98:	fa0c fc08 	lsl.w	ip, ip, r8
 8005a9c:	ea4c 0707 	orr.w	r7, ip, r7
 8005aa0:	f849 7b04 	str.w	r7, [r9], #4
 8005aa4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005aa8:	40cf      	lsrs	r7, r1
 8005aaa:	e7d9      	b.n	8005a60 <rshift+0x4c>
 8005aac:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ab0:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ab4:	e7c2      	b.n	8005a3c <rshift+0x28>
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	e7e0      	b.n	8005a7c <rshift+0x68>

08005aba <__hexdig_fun>:
 8005aba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d802      	bhi.n	8005ac8 <__hexdig_fun+0xe>
 8005ac2:	3820      	subs	r0, #32
 8005ac4:	b2c0      	uxtb	r0, r0
 8005ac6:	4770      	bx	lr
 8005ac8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d801      	bhi.n	8005ad4 <__hexdig_fun+0x1a>
 8005ad0:	3847      	subs	r0, #71	; 0x47
 8005ad2:	e7f7      	b.n	8005ac4 <__hexdig_fun+0xa>
 8005ad4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d801      	bhi.n	8005ae0 <__hexdig_fun+0x26>
 8005adc:	3827      	subs	r0, #39	; 0x27
 8005ade:	e7f1      	b.n	8005ac4 <__hexdig_fun+0xa>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	4770      	bx	lr

08005ae4 <__gethex>:
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	b08b      	sub	sp, #44	; 0x2c
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	4bb2      	ldr	r3, [pc, #712]	; (8005db8 <__gethex+0x2d4>)
 8005aee:	9002      	str	r0, [sp, #8]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	468b      	mov	fp, r1
 8005af4:	4618      	mov	r0, r3
 8005af6:	4690      	mov	r8, r2
 8005af8:	9303      	str	r3, [sp, #12]
 8005afa:	f7fa fb29 	bl	8000150 <strlen>
 8005afe:	4682      	mov	sl, r0
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	f8db 2000 	ldr.w	r2, [fp]
 8005b06:	4403      	add	r3, r0
 8005b08:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005b0c:	9306      	str	r3, [sp, #24]
 8005b0e:	1c93      	adds	r3, r2, #2
 8005b10:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005b14:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005b18:	32fe      	adds	r2, #254	; 0xfe
 8005b1a:	18d1      	adds	r1, r2, r3
 8005b1c:	461f      	mov	r7, r3
 8005b1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b22:	9101      	str	r1, [sp, #4]
 8005b24:	2830      	cmp	r0, #48	; 0x30
 8005b26:	d0f8      	beq.n	8005b1a <__gethex+0x36>
 8005b28:	f7ff ffc7 	bl	8005aba <__hexdig_fun>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d13a      	bne.n	8005ba8 <__gethex+0xc4>
 8005b32:	4652      	mov	r2, sl
 8005b34:	4638      	mov	r0, r7
 8005b36:	9903      	ldr	r1, [sp, #12]
 8005b38:	f001 fa4a 	bl	8006fd0 <strncmp>
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d166      	bne.n	8005c10 <__gethex+0x12c>
 8005b42:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005b46:	eb07 060a 	add.w	r6, r7, sl
 8005b4a:	f7ff ffb6 	bl	8005aba <__hexdig_fun>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d060      	beq.n	8005c14 <__gethex+0x130>
 8005b52:	4633      	mov	r3, r6
 8005b54:	7818      	ldrb	r0, [r3, #0]
 8005b56:	461f      	mov	r7, r3
 8005b58:	2830      	cmp	r0, #48	; 0x30
 8005b5a:	f103 0301 	add.w	r3, r3, #1
 8005b5e:	d0f9      	beq.n	8005b54 <__gethex+0x70>
 8005b60:	f7ff ffab 	bl	8005aba <__hexdig_fun>
 8005b64:	2301      	movs	r3, #1
 8005b66:	fab0 f480 	clz	r4, r0
 8005b6a:	4635      	mov	r5, r6
 8005b6c:	0964      	lsrs	r4, r4, #5
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	463a      	mov	r2, r7
 8005b72:	4616      	mov	r6, r2
 8005b74:	7830      	ldrb	r0, [r6, #0]
 8005b76:	3201      	adds	r2, #1
 8005b78:	f7ff ff9f 	bl	8005aba <__hexdig_fun>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d1f8      	bne.n	8005b72 <__gethex+0x8e>
 8005b80:	4652      	mov	r2, sl
 8005b82:	4630      	mov	r0, r6
 8005b84:	9903      	ldr	r1, [sp, #12]
 8005b86:	f001 fa23 	bl	8006fd0 <strncmp>
 8005b8a:	b980      	cbnz	r0, 8005bae <__gethex+0xca>
 8005b8c:	b94d      	cbnz	r5, 8005ba2 <__gethex+0xbe>
 8005b8e:	eb06 050a 	add.w	r5, r6, sl
 8005b92:	462a      	mov	r2, r5
 8005b94:	4616      	mov	r6, r2
 8005b96:	7830      	ldrb	r0, [r6, #0]
 8005b98:	3201      	adds	r2, #1
 8005b9a:	f7ff ff8e 	bl	8005aba <__hexdig_fun>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d1f8      	bne.n	8005b94 <__gethex+0xb0>
 8005ba2:	1bad      	subs	r5, r5, r6
 8005ba4:	00ad      	lsls	r5, r5, #2
 8005ba6:	e004      	b.n	8005bb2 <__gethex+0xce>
 8005ba8:	2400      	movs	r4, #0
 8005baa:	4625      	mov	r5, r4
 8005bac:	e7e0      	b.n	8005b70 <__gethex+0x8c>
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	d1f7      	bne.n	8005ba2 <__gethex+0xbe>
 8005bb2:	7833      	ldrb	r3, [r6, #0]
 8005bb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d139      	bne.n	8005c30 <__gethex+0x14c>
 8005bbc:	7873      	ldrb	r3, [r6, #1]
 8005bbe:	2b2b      	cmp	r3, #43	; 0x2b
 8005bc0:	d02a      	beq.n	8005c18 <__gethex+0x134>
 8005bc2:	2b2d      	cmp	r3, #45	; 0x2d
 8005bc4:	d02c      	beq.n	8005c20 <__gethex+0x13c>
 8005bc6:	f04f 0900 	mov.w	r9, #0
 8005bca:	1c71      	adds	r1, r6, #1
 8005bcc:	7808      	ldrb	r0, [r1, #0]
 8005bce:	f7ff ff74 	bl	8005aba <__hexdig_fun>
 8005bd2:	1e43      	subs	r3, r0, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b18      	cmp	r3, #24
 8005bd8:	d82a      	bhi.n	8005c30 <__gethex+0x14c>
 8005bda:	f1a0 0210 	sub.w	r2, r0, #16
 8005bde:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005be2:	f7ff ff6a 	bl	8005aba <__hexdig_fun>
 8005be6:	1e43      	subs	r3, r0, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b18      	cmp	r3, #24
 8005bec:	d91b      	bls.n	8005c26 <__gethex+0x142>
 8005bee:	f1b9 0f00 	cmp.w	r9, #0
 8005bf2:	d000      	beq.n	8005bf6 <__gethex+0x112>
 8005bf4:	4252      	negs	r2, r2
 8005bf6:	4415      	add	r5, r2
 8005bf8:	f8cb 1000 	str.w	r1, [fp]
 8005bfc:	b1d4      	cbz	r4, 8005c34 <__gethex+0x150>
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2700      	movne	r7, #0
 8005c06:	2706      	moveq	r7, #6
 8005c08:	4638      	mov	r0, r7
 8005c0a:	b00b      	add	sp, #44	; 0x2c
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	463e      	mov	r6, r7
 8005c12:	4625      	mov	r5, r4
 8005c14:	2401      	movs	r4, #1
 8005c16:	e7cc      	b.n	8005bb2 <__gethex+0xce>
 8005c18:	f04f 0900 	mov.w	r9, #0
 8005c1c:	1cb1      	adds	r1, r6, #2
 8005c1e:	e7d5      	b.n	8005bcc <__gethex+0xe8>
 8005c20:	f04f 0901 	mov.w	r9, #1
 8005c24:	e7fa      	b.n	8005c1c <__gethex+0x138>
 8005c26:	230a      	movs	r3, #10
 8005c28:	fb03 0202 	mla	r2, r3, r2, r0
 8005c2c:	3a10      	subs	r2, #16
 8005c2e:	e7d6      	b.n	8005bde <__gethex+0xfa>
 8005c30:	4631      	mov	r1, r6
 8005c32:	e7e1      	b.n	8005bf8 <__gethex+0x114>
 8005c34:	4621      	mov	r1, r4
 8005c36:	1bf3      	subs	r3, r6, r7
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	dc0a      	bgt.n	8005c54 <__gethex+0x170>
 8005c3e:	9802      	ldr	r0, [sp, #8]
 8005c40:	f000 fa9a 	bl	8006178 <_Balloc>
 8005c44:	4604      	mov	r4, r0
 8005c46:	b940      	cbnz	r0, 8005c5a <__gethex+0x176>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	21de      	movs	r1, #222	; 0xde
 8005c4c:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <__gethex+0x2d8>)
 8005c4e:	485c      	ldr	r0, [pc, #368]	; (8005dc0 <__gethex+0x2dc>)
 8005c50:	f001 f9e0 	bl	8007014 <__assert_func>
 8005c54:	3101      	adds	r1, #1
 8005c56:	105b      	asrs	r3, r3, #1
 8005c58:	e7ef      	b.n	8005c3a <__gethex+0x156>
 8005c5a:	f04f 0b00 	mov.w	fp, #0
 8005c5e:	f100 0914 	add.w	r9, r0, #20
 8005c62:	f1ca 0301 	rsb	r3, sl, #1
 8005c66:	f8cd 9010 	str.w	r9, [sp, #16]
 8005c6a:	f8cd b004 	str.w	fp, [sp, #4]
 8005c6e:	9308      	str	r3, [sp, #32]
 8005c70:	42b7      	cmp	r7, r6
 8005c72:	d33f      	bcc.n	8005cf4 <__gethex+0x210>
 8005c74:	9f04      	ldr	r7, [sp, #16]
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	f847 3b04 	str.w	r3, [r7], #4
 8005c7c:	eba7 0709 	sub.w	r7, r7, r9
 8005c80:	10bf      	asrs	r7, r7, #2
 8005c82:	6127      	str	r7, [r4, #16]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fb69 	bl	800635c <__hi0bits>
 8005c8a:	017f      	lsls	r7, r7, #5
 8005c8c:	f8d8 6000 	ldr.w	r6, [r8]
 8005c90:	1a3f      	subs	r7, r7, r0
 8005c92:	42b7      	cmp	r7, r6
 8005c94:	dd62      	ble.n	8005d5c <__gethex+0x278>
 8005c96:	1bbf      	subs	r7, r7, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 ff03 	bl	8006aa6 <__any_on>
 8005ca0:	4682      	mov	sl, r0
 8005ca2:	b1a8      	cbz	r0, 8005cd0 <__gethex+0x1ec>
 8005ca4:	f04f 0a01 	mov.w	sl, #1
 8005ca8:	1e7b      	subs	r3, r7, #1
 8005caa:	1159      	asrs	r1, r3, #5
 8005cac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005cb0:	f003 021f 	and.w	r2, r3, #31
 8005cb4:	fa0a f202 	lsl.w	r2, sl, r2
 8005cb8:	420a      	tst	r2, r1
 8005cba:	d009      	beq.n	8005cd0 <__gethex+0x1ec>
 8005cbc:	4553      	cmp	r3, sl
 8005cbe:	dd05      	ble.n	8005ccc <__gethex+0x1e8>
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	1eb9      	subs	r1, r7, #2
 8005cc4:	f000 feef 	bl	8006aa6 <__any_on>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d144      	bne.n	8005d56 <__gethex+0x272>
 8005ccc:	f04f 0a02 	mov.w	sl, #2
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7ff fe9e 	bl	8005a14 <rshift>
 8005cd8:	443d      	add	r5, r7
 8005cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cde:	42ab      	cmp	r3, r5
 8005ce0:	da4a      	bge.n	8005d78 <__gethex+0x294>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	9802      	ldr	r0, [sp, #8]
 8005ce6:	f000 fa87 	bl	80061f8 <_Bfree>
 8005cea:	2300      	movs	r3, #0
 8005cec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cee:	27a3      	movs	r7, #163	; 0xa3
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e789      	b.n	8005c08 <__gethex+0x124>
 8005cf4:	1e73      	subs	r3, r6, #1
 8005cf6:	9a06      	ldr	r2, [sp, #24]
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d019      	beq.n	8005d36 <__gethex+0x252>
 8005d02:	f1bb 0f20 	cmp.w	fp, #32
 8005d06:	d107      	bne.n	8005d18 <__gethex+0x234>
 8005d08:	9b04      	ldr	r3, [sp, #16]
 8005d0a:	9a01      	ldr	r2, [sp, #4]
 8005d0c:	f843 2b04 	str.w	r2, [r3], #4
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	2300      	movs	r3, #0
 8005d14:	469b      	mov	fp, r3
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005d1c:	f7ff fecd 	bl	8005aba <__hexdig_fun>
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	f000 000f 	and.w	r0, r0, #15
 8005d26:	fa00 f00b 	lsl.w	r0, r0, fp
 8005d2a:	4303      	orrs	r3, r0
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	f10b 0b04 	add.w	fp, fp, #4
 8005d32:	9b07      	ldr	r3, [sp, #28]
 8005d34:	e00d      	b.n	8005d52 <__gethex+0x26e>
 8005d36:	9a08      	ldr	r2, [sp, #32]
 8005d38:	1e73      	subs	r3, r6, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	42bb      	cmp	r3, r7
 8005d3e:	d3e0      	bcc.n	8005d02 <__gethex+0x21e>
 8005d40:	4618      	mov	r0, r3
 8005d42:	4652      	mov	r2, sl
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	9309      	str	r3, [sp, #36]	; 0x24
 8005d48:	f001 f942 	bl	8006fd0 <strncmp>
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d1d7      	bne.n	8005d02 <__gethex+0x21e>
 8005d52:	461e      	mov	r6, r3
 8005d54:	e78c      	b.n	8005c70 <__gethex+0x18c>
 8005d56:	f04f 0a03 	mov.w	sl, #3
 8005d5a:	e7b9      	b.n	8005cd0 <__gethex+0x1ec>
 8005d5c:	da09      	bge.n	8005d72 <__gethex+0x28e>
 8005d5e:	1bf7      	subs	r7, r6, r7
 8005d60:	4621      	mov	r1, r4
 8005d62:	463a      	mov	r2, r7
 8005d64:	9802      	ldr	r0, [sp, #8]
 8005d66:	f000 fc5f 	bl	8006628 <__lshift>
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	1bed      	subs	r5, r5, r7
 8005d6e:	f100 0914 	add.w	r9, r0, #20
 8005d72:	f04f 0a00 	mov.w	sl, #0
 8005d76:	e7b0      	b.n	8005cda <__gethex+0x1f6>
 8005d78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005d7c:	42a8      	cmp	r0, r5
 8005d7e:	dd72      	ble.n	8005e66 <__gethex+0x382>
 8005d80:	1b45      	subs	r5, r0, r5
 8005d82:	42ae      	cmp	r6, r5
 8005d84:	dc35      	bgt.n	8005df2 <__gethex+0x30e>
 8005d86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d029      	beq.n	8005de2 <__gethex+0x2fe>
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d02b      	beq.n	8005dea <__gethex+0x306>
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d11c      	bne.n	8005dd0 <__gethex+0x2ec>
 8005d96:	42ae      	cmp	r6, r5
 8005d98:	d11a      	bne.n	8005dd0 <__gethex+0x2ec>
 8005d9a:	2e01      	cmp	r6, #1
 8005d9c:	d112      	bne.n	8005dc4 <__gethex+0x2e0>
 8005d9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005da2:	9a05      	ldr	r2, [sp, #20]
 8005da4:	2762      	movs	r7, #98	; 0x62
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	2301      	movs	r3, #1
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	f8c9 3000 	str.w	r3, [r9]
 8005db0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005db2:	601c      	str	r4, [r3, #0]
 8005db4:	e728      	b.n	8005c08 <__gethex+0x124>
 8005db6:	bf00      	nop
 8005db8:	08008310 	.word	0x08008310
 8005dbc:	08008298 	.word	0x08008298
 8005dc0:	080082a9 	.word	0x080082a9
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	1e71      	subs	r1, r6, #1
 8005dc8:	f000 fe6d 	bl	8006aa6 <__any_on>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d1e6      	bne.n	8005d9e <__gethex+0x2ba>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	9802      	ldr	r0, [sp, #8]
 8005dd4:	f000 fa10 	bl	80061f8 <_Bfree>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ddc:	2750      	movs	r7, #80	; 0x50
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e712      	b.n	8005c08 <__gethex+0x124>
 8005de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f3      	bne.n	8005dd0 <__gethex+0x2ec>
 8005de8:	e7d9      	b.n	8005d9e <__gethex+0x2ba>
 8005dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1d6      	bne.n	8005d9e <__gethex+0x2ba>
 8005df0:	e7ee      	b.n	8005dd0 <__gethex+0x2ec>
 8005df2:	1e6f      	subs	r7, r5, #1
 8005df4:	f1ba 0f00 	cmp.w	sl, #0
 8005df8:	d132      	bne.n	8005e60 <__gethex+0x37c>
 8005dfa:	b127      	cbz	r7, 8005e06 <__gethex+0x322>
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f000 fe51 	bl	8006aa6 <__any_on>
 8005e04:	4682      	mov	sl, r0
 8005e06:	2101      	movs	r1, #1
 8005e08:	117b      	asrs	r3, r7, #5
 8005e0a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005e0e:	f007 071f 	and.w	r7, r7, #31
 8005e12:	fa01 f707 	lsl.w	r7, r1, r7
 8005e16:	421f      	tst	r7, r3
 8005e18:	f04f 0702 	mov.w	r7, #2
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	bf18      	it	ne
 8005e22:	f04a 0a02 	orrne.w	sl, sl, #2
 8005e26:	1b76      	subs	r6, r6, r5
 8005e28:	f7ff fdf4 	bl	8005a14 <rshift>
 8005e2c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005e30:	f1ba 0f00 	cmp.w	sl, #0
 8005e34:	d048      	beq.n	8005ec8 <__gethex+0x3e4>
 8005e36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d015      	beq.n	8005e6a <__gethex+0x386>
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d017      	beq.n	8005e72 <__gethex+0x38e>
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d109      	bne.n	8005e5a <__gethex+0x376>
 8005e46:	f01a 0f02 	tst.w	sl, #2
 8005e4a:	d006      	beq.n	8005e5a <__gethex+0x376>
 8005e4c:	f8d9 0000 	ldr.w	r0, [r9]
 8005e50:	ea4a 0a00 	orr.w	sl, sl, r0
 8005e54:	f01a 0f01 	tst.w	sl, #1
 8005e58:	d10e      	bne.n	8005e78 <__gethex+0x394>
 8005e5a:	f047 0710 	orr.w	r7, r7, #16
 8005e5e:	e033      	b.n	8005ec8 <__gethex+0x3e4>
 8005e60:	f04f 0a01 	mov.w	sl, #1
 8005e64:	e7cf      	b.n	8005e06 <__gethex+0x322>
 8005e66:	2701      	movs	r7, #1
 8005e68:	e7e2      	b.n	8005e30 <__gethex+0x34c>
 8005e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e6c:	f1c3 0301 	rsb	r3, r3, #1
 8005e70:	9315      	str	r3, [sp, #84]	; 0x54
 8005e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <__gethex+0x376>
 8005e78:	f04f 0c00 	mov.w	ip, #0
 8005e7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005e80:	f104 0314 	add.w	r3, r4, #20
 8005e84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005e88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e96:	d01c      	beq.n	8005ed2 <__gethex+0x3ee>
 8005e98:	3201      	adds	r2, #1
 8005e9a:	6002      	str	r2, [r0, #0]
 8005e9c:	2f02      	cmp	r7, #2
 8005e9e:	f104 0314 	add.w	r3, r4, #20
 8005ea2:	d13d      	bne.n	8005f20 <__gethex+0x43c>
 8005ea4:	f8d8 2000 	ldr.w	r2, [r8]
 8005ea8:	3a01      	subs	r2, #1
 8005eaa:	42b2      	cmp	r2, r6
 8005eac:	d10a      	bne.n	8005ec4 <__gethex+0x3e0>
 8005eae:	2201      	movs	r2, #1
 8005eb0:	1171      	asrs	r1, r6, #5
 8005eb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005eb6:	f006 061f 	and.w	r6, r6, #31
 8005eba:	fa02 f606 	lsl.w	r6, r2, r6
 8005ebe:	421e      	tst	r6, r3
 8005ec0:	bf18      	it	ne
 8005ec2:	4617      	movne	r7, r2
 8005ec4:	f047 0720 	orr.w	r7, r7, #32
 8005ec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eca:	601c      	str	r4, [r3, #0]
 8005ecc:	9b05      	ldr	r3, [sp, #20]
 8005ece:	601d      	str	r5, [r3, #0]
 8005ed0:	e69a      	b.n	8005c08 <__gethex+0x124>
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	f843 cc04 	str.w	ip, [r3, #-4]
 8005ed8:	d8d8      	bhi.n	8005e8c <__gethex+0x3a8>
 8005eda:	68a3      	ldr	r3, [r4, #8]
 8005edc:	459b      	cmp	fp, r3
 8005ede:	db17      	blt.n	8005f10 <__gethex+0x42c>
 8005ee0:	6861      	ldr	r1, [r4, #4]
 8005ee2:	9802      	ldr	r0, [sp, #8]
 8005ee4:	3101      	adds	r1, #1
 8005ee6:	f000 f947 	bl	8006178 <_Balloc>
 8005eea:	4681      	mov	r9, r0
 8005eec:	b918      	cbnz	r0, 8005ef6 <__gethex+0x412>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	2184      	movs	r1, #132	; 0x84
 8005ef2:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <__gethex+0x474>)
 8005ef4:	e6ab      	b.n	8005c4e <__gethex+0x16a>
 8005ef6:	6922      	ldr	r2, [r4, #16]
 8005ef8:	f104 010c 	add.w	r1, r4, #12
 8005efc:	3202      	adds	r2, #2
 8005efe:	0092      	lsls	r2, r2, #2
 8005f00:	300c      	adds	r0, #12
 8005f02:	f000 f92b 	bl	800615c <memcpy>
 8005f06:	4621      	mov	r1, r4
 8005f08:	9802      	ldr	r0, [sp, #8]
 8005f0a:	f000 f975 	bl	80061f8 <_Bfree>
 8005f0e:	464c      	mov	r4, r9
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	6122      	str	r2, [r4, #16]
 8005f16:	2201      	movs	r2, #1
 8005f18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f1c:	615a      	str	r2, [r3, #20]
 8005f1e:	e7bd      	b.n	8005e9c <__gethex+0x3b8>
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	455a      	cmp	r2, fp
 8005f24:	dd0b      	ble.n	8005f3e <__gethex+0x45a>
 8005f26:	2101      	movs	r1, #1
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7ff fd73 	bl	8005a14 <rshift>
 8005f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f32:	3501      	adds	r5, #1
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	f6ff aed4 	blt.w	8005ce2 <__gethex+0x1fe>
 8005f3a:	2701      	movs	r7, #1
 8005f3c:	e7c2      	b.n	8005ec4 <__gethex+0x3e0>
 8005f3e:	f016 061f 	ands.w	r6, r6, #31
 8005f42:	d0fa      	beq.n	8005f3a <__gethex+0x456>
 8005f44:	4453      	add	r3, sl
 8005f46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005f4a:	f000 fa07 	bl	800635c <__hi0bits>
 8005f4e:	f1c6 0620 	rsb	r6, r6, #32
 8005f52:	42b0      	cmp	r0, r6
 8005f54:	dbe7      	blt.n	8005f26 <__gethex+0x442>
 8005f56:	e7f0      	b.n	8005f3a <__gethex+0x456>
 8005f58:	08008298 	.word	0x08008298

08005f5c <L_shift>:
 8005f5c:	f1c2 0208 	rsb	r2, r2, #8
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	b570      	push	{r4, r5, r6, lr}
 8005f64:	f1c2 0620 	rsb	r6, r2, #32
 8005f68:	6843      	ldr	r3, [r0, #4]
 8005f6a:	6804      	ldr	r4, [r0, #0]
 8005f6c:	fa03 f506 	lsl.w	r5, r3, r6
 8005f70:	432c      	orrs	r4, r5
 8005f72:	40d3      	lsrs	r3, r2
 8005f74:	6004      	str	r4, [r0, #0]
 8005f76:	f840 3f04 	str.w	r3, [r0, #4]!
 8005f7a:	4288      	cmp	r0, r1
 8005f7c:	d3f4      	bcc.n	8005f68 <L_shift+0xc>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}

08005f80 <__match>:
 8005f80:	b530      	push	{r4, r5, lr}
 8005f82:	6803      	ldr	r3, [r0, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f8a:	b914      	cbnz	r4, 8005f92 <__match+0x12>
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	2001      	movs	r0, #1
 8005f90:	bd30      	pop	{r4, r5, pc}
 8005f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005f9a:	2d19      	cmp	r5, #25
 8005f9c:	bf98      	it	ls
 8005f9e:	3220      	addls	r2, #32
 8005fa0:	42a2      	cmp	r2, r4
 8005fa2:	d0f0      	beq.n	8005f86 <__match+0x6>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e7f3      	b.n	8005f90 <__match+0x10>

08005fa8 <__hexnan>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	2500      	movs	r5, #0
 8005fae:	680b      	ldr	r3, [r1, #0]
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	115e      	asrs	r6, r3, #5
 8005fb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005fb8:	f013 031f 	ands.w	r3, r3, #31
 8005fbc:	bf18      	it	ne
 8005fbe:	3604      	addne	r6, #4
 8005fc0:	1f37      	subs	r7, r6, #4
 8005fc2:	46b9      	mov	r9, r7
 8005fc4:	463c      	mov	r4, r7
 8005fc6:	46ab      	mov	fp, r5
 8005fc8:	b087      	sub	sp, #28
 8005fca:	4690      	mov	r8, r2
 8005fcc:	6802      	ldr	r2, [r0, #0]
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	f846 5c04 	str.w	r5, [r6, #-4]
 8005fd4:	9502      	str	r5, [sp, #8]
 8005fd6:	7851      	ldrb	r1, [r2, #1]
 8005fd8:	1c53      	adds	r3, r2, #1
 8005fda:	9303      	str	r3, [sp, #12]
 8005fdc:	b341      	cbz	r1, 8006030 <__hexnan+0x88>
 8005fde:	4608      	mov	r0, r1
 8005fe0:	9205      	str	r2, [sp, #20]
 8005fe2:	9104      	str	r1, [sp, #16]
 8005fe4:	f7ff fd69 	bl	8005aba <__hexdig_fun>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d14f      	bne.n	800608c <__hexnan+0xe4>
 8005fec:	9904      	ldr	r1, [sp, #16]
 8005fee:	9a05      	ldr	r2, [sp, #20]
 8005ff0:	2920      	cmp	r1, #32
 8005ff2:	d818      	bhi.n	8006026 <__hexnan+0x7e>
 8005ff4:	9b02      	ldr	r3, [sp, #8]
 8005ff6:	459b      	cmp	fp, r3
 8005ff8:	dd13      	ble.n	8006022 <__hexnan+0x7a>
 8005ffa:	454c      	cmp	r4, r9
 8005ffc:	d206      	bcs.n	800600c <__hexnan+0x64>
 8005ffe:	2d07      	cmp	r5, #7
 8006000:	dc04      	bgt.n	800600c <__hexnan+0x64>
 8006002:	462a      	mov	r2, r5
 8006004:	4649      	mov	r1, r9
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff ffa8 	bl	8005f5c <L_shift>
 800600c:	4544      	cmp	r4, r8
 800600e:	d950      	bls.n	80060b2 <__hexnan+0x10a>
 8006010:	2300      	movs	r3, #0
 8006012:	f1a4 0904 	sub.w	r9, r4, #4
 8006016:	f844 3c04 	str.w	r3, [r4, #-4]
 800601a:	461d      	mov	r5, r3
 800601c:	464c      	mov	r4, r9
 800601e:	f8cd b008 	str.w	fp, [sp, #8]
 8006022:	9a03      	ldr	r2, [sp, #12]
 8006024:	e7d7      	b.n	8005fd6 <__hexnan+0x2e>
 8006026:	2929      	cmp	r1, #41	; 0x29
 8006028:	d156      	bne.n	80060d8 <__hexnan+0x130>
 800602a:	3202      	adds	r2, #2
 800602c:	f8ca 2000 	str.w	r2, [sl]
 8006030:	f1bb 0f00 	cmp.w	fp, #0
 8006034:	d050      	beq.n	80060d8 <__hexnan+0x130>
 8006036:	454c      	cmp	r4, r9
 8006038:	d206      	bcs.n	8006048 <__hexnan+0xa0>
 800603a:	2d07      	cmp	r5, #7
 800603c:	dc04      	bgt.n	8006048 <__hexnan+0xa0>
 800603e:	462a      	mov	r2, r5
 8006040:	4649      	mov	r1, r9
 8006042:	4620      	mov	r0, r4
 8006044:	f7ff ff8a 	bl	8005f5c <L_shift>
 8006048:	4544      	cmp	r4, r8
 800604a:	d934      	bls.n	80060b6 <__hexnan+0x10e>
 800604c:	4623      	mov	r3, r4
 800604e:	f1a8 0204 	sub.w	r2, r8, #4
 8006052:	f853 1b04 	ldr.w	r1, [r3], #4
 8006056:	429f      	cmp	r7, r3
 8006058:	f842 1f04 	str.w	r1, [r2, #4]!
 800605c:	d2f9      	bcs.n	8006052 <__hexnan+0xaa>
 800605e:	1b3b      	subs	r3, r7, r4
 8006060:	f023 0303 	bic.w	r3, r3, #3
 8006064:	3304      	adds	r3, #4
 8006066:	3401      	adds	r4, #1
 8006068:	3e03      	subs	r6, #3
 800606a:	42b4      	cmp	r4, r6
 800606c:	bf88      	it	hi
 800606e:	2304      	movhi	r3, #4
 8006070:	2200      	movs	r2, #0
 8006072:	4443      	add	r3, r8
 8006074:	f843 2b04 	str.w	r2, [r3], #4
 8006078:	429f      	cmp	r7, r3
 800607a:	d2fb      	bcs.n	8006074 <__hexnan+0xcc>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b91b      	cbnz	r3, 8006088 <__hexnan+0xe0>
 8006080:	4547      	cmp	r7, r8
 8006082:	d127      	bne.n	80060d4 <__hexnan+0x12c>
 8006084:	2301      	movs	r3, #1
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	2005      	movs	r0, #5
 800608a:	e026      	b.n	80060da <__hexnan+0x132>
 800608c:	3501      	adds	r5, #1
 800608e:	2d08      	cmp	r5, #8
 8006090:	f10b 0b01 	add.w	fp, fp, #1
 8006094:	dd06      	ble.n	80060a4 <__hexnan+0xfc>
 8006096:	4544      	cmp	r4, r8
 8006098:	d9c3      	bls.n	8006022 <__hexnan+0x7a>
 800609a:	2300      	movs	r3, #0
 800609c:	2501      	movs	r5, #1
 800609e:	f844 3c04 	str.w	r3, [r4, #-4]
 80060a2:	3c04      	subs	r4, #4
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	f000 000f 	and.w	r0, r0, #15
 80060aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80060ae:	6022      	str	r2, [r4, #0]
 80060b0:	e7b7      	b.n	8006022 <__hexnan+0x7a>
 80060b2:	2508      	movs	r5, #8
 80060b4:	e7b5      	b.n	8006022 <__hexnan+0x7a>
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0df      	beq.n	800607c <__hexnan+0xd4>
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	f1c3 0320 	rsb	r3, r3, #32
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80060cc:	401a      	ands	r2, r3
 80060ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80060d2:	e7d3      	b.n	800607c <__hexnan+0xd4>
 80060d4:	3f04      	subs	r7, #4
 80060d6:	e7d1      	b.n	800607c <__hexnan+0xd4>
 80060d8:	2004      	movs	r0, #4
 80060da:	b007      	add	sp, #28
 80060dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060e0 <_localeconv_r>:
 80060e0:	4800      	ldr	r0, [pc, #0]	; (80060e4 <_localeconv_r+0x4>)
 80060e2:	4770      	bx	lr
 80060e4:	2000016c 	.word	0x2000016c

080060e8 <_lseek_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	2200      	movs	r2, #0
 80060f2:	4d05      	ldr	r5, [pc, #20]	; (8006108 <_lseek_r+0x20>)
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fb f908 	bl	800130c <_lseek>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_lseek_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_lseek_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20000390 	.word	0x20000390

0800610c <malloc>:
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <malloc+0xc>)
 800610e:	4601      	mov	r1, r0
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	f000 bd65 	b.w	8006be0 <_malloc_r>
 8006116:	bf00      	nop
 8006118:	20000014 	.word	0x20000014

0800611c <__ascii_mbtowc>:
 800611c:	b082      	sub	sp, #8
 800611e:	b901      	cbnz	r1, 8006122 <__ascii_mbtowc+0x6>
 8006120:	a901      	add	r1, sp, #4
 8006122:	b142      	cbz	r2, 8006136 <__ascii_mbtowc+0x1a>
 8006124:	b14b      	cbz	r3, 800613a <__ascii_mbtowc+0x1e>
 8006126:	7813      	ldrb	r3, [r2, #0]
 8006128:	600b      	str	r3, [r1, #0]
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	1e10      	subs	r0, r2, #0
 800612e:	bf18      	it	ne
 8006130:	2001      	movne	r0, #1
 8006132:	b002      	add	sp, #8
 8006134:	4770      	bx	lr
 8006136:	4610      	mov	r0, r2
 8006138:	e7fb      	b.n	8006132 <__ascii_mbtowc+0x16>
 800613a:	f06f 0001 	mvn.w	r0, #1
 800613e:	e7f8      	b.n	8006132 <__ascii_mbtowc+0x16>

08006140 <memchr>:
 8006140:	4603      	mov	r3, r0
 8006142:	b510      	push	{r4, lr}
 8006144:	b2c9      	uxtb	r1, r1
 8006146:	4402      	add	r2, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	4618      	mov	r0, r3
 800614c:	d101      	bne.n	8006152 <memchr+0x12>
 800614e:	2000      	movs	r0, #0
 8006150:	e003      	b.n	800615a <memchr+0x1a>
 8006152:	7804      	ldrb	r4, [r0, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	428c      	cmp	r4, r1
 8006158:	d1f6      	bne.n	8006148 <memchr+0x8>
 800615a:	bd10      	pop	{r4, pc}

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	4291      	cmp	r1, r2
 8006170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <_Balloc>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800617c:	4604      	mov	r4, r0
 800617e:	460d      	mov	r5, r1
 8006180:	b976      	cbnz	r6, 80061a0 <_Balloc+0x28>
 8006182:	2010      	movs	r0, #16
 8006184:	f7ff ffc2 	bl	800610c <malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	6260      	str	r0, [r4, #36]	; 0x24
 800618c:	b920      	cbnz	r0, 8006198 <_Balloc+0x20>
 800618e:	2166      	movs	r1, #102	; 0x66
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <_Balloc+0x78>)
 8006192:	4818      	ldr	r0, [pc, #96]	; (80061f4 <_Balloc+0x7c>)
 8006194:	f000 ff3e 	bl	8007014 <__assert_func>
 8006198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800619c:	6006      	str	r6, [r0, #0]
 800619e:	60c6      	str	r6, [r0, #12]
 80061a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061a2:	68f3      	ldr	r3, [r6, #12]
 80061a4:	b183      	cbz	r3, 80061c8 <_Balloc+0x50>
 80061a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061ae:	b9b8      	cbnz	r0, 80061e0 <_Balloc+0x68>
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f605 	lsl.w	r6, r1, r5
 80061b6:	1d72      	adds	r2, r6, #5
 80061b8:	4620      	mov	r0, r4
 80061ba:	0092      	lsls	r2, r2, #2
 80061bc:	f000 fc94 	bl	8006ae8 <_calloc_r>
 80061c0:	b160      	cbz	r0, 80061dc <_Balloc+0x64>
 80061c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061c6:	e00e      	b.n	80061e6 <_Balloc+0x6e>
 80061c8:	2221      	movs	r2, #33	; 0x21
 80061ca:	2104      	movs	r1, #4
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fc8b 	bl	8006ae8 <_calloc_r>
 80061d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d4:	60f0      	str	r0, [r6, #12]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e4      	bne.n	80061a6 <_Balloc+0x2e>
 80061dc:	2000      	movs	r0, #0
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	6802      	ldr	r2, [r0, #0]
 80061e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061e6:	2300      	movs	r3, #0
 80061e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061ec:	e7f7      	b.n	80061de <_Balloc+0x66>
 80061ee:	bf00      	nop
 80061f0:	08008226 	.word	0x08008226
 80061f4:	08008324 	.word	0x08008324

080061f8 <_Bfree>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061fc:	4605      	mov	r5, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	b976      	cbnz	r6, 8006220 <_Bfree+0x28>
 8006202:	2010      	movs	r0, #16
 8006204:	f7ff ff82 	bl	800610c <malloc>
 8006208:	4602      	mov	r2, r0
 800620a:	6268      	str	r0, [r5, #36]	; 0x24
 800620c:	b920      	cbnz	r0, 8006218 <_Bfree+0x20>
 800620e:	218a      	movs	r1, #138	; 0x8a
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <_Bfree+0x3c>)
 8006212:	4809      	ldr	r0, [pc, #36]	; (8006238 <_Bfree+0x40>)
 8006214:	f000 fefe 	bl	8007014 <__assert_func>
 8006218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800621c:	6006      	str	r6, [r0, #0]
 800621e:	60c6      	str	r6, [r0, #12]
 8006220:	b13c      	cbz	r4, 8006232 <_Bfree+0x3a>
 8006222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006224:	6862      	ldr	r2, [r4, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800622c:	6021      	str	r1, [r4, #0]
 800622e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	08008226 	.word	0x08008226
 8006238:	08008324 	.word	0x08008324

0800623c <__multadd>:
 800623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	4607      	mov	r7, r0
 8006242:	460c      	mov	r4, r1
 8006244:	461e      	mov	r6, r3
 8006246:	2000      	movs	r0, #0
 8006248:	690d      	ldr	r5, [r1, #16]
 800624a:	f101 0c14 	add.w	ip, r1, #20
 800624e:	f8dc 3000 	ldr.w	r3, [ip]
 8006252:	3001      	adds	r0, #1
 8006254:	b299      	uxth	r1, r3
 8006256:	fb02 6101 	mla	r1, r2, r1, r6
 800625a:	0c1e      	lsrs	r6, r3, #16
 800625c:	0c0b      	lsrs	r3, r1, #16
 800625e:	fb02 3306 	mla	r3, r2, r6, r3
 8006262:	b289      	uxth	r1, r1
 8006264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006268:	4285      	cmp	r5, r0
 800626a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800626e:	f84c 1b04 	str.w	r1, [ip], #4
 8006272:	dcec      	bgt.n	800624e <__multadd+0x12>
 8006274:	b30e      	cbz	r6, 80062ba <__multadd+0x7e>
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	42ab      	cmp	r3, r5
 800627a:	dc19      	bgt.n	80062b0 <__multadd+0x74>
 800627c:	6861      	ldr	r1, [r4, #4]
 800627e:	4638      	mov	r0, r7
 8006280:	3101      	adds	r1, #1
 8006282:	f7ff ff79 	bl	8006178 <_Balloc>
 8006286:	4680      	mov	r8, r0
 8006288:	b928      	cbnz	r0, 8006296 <__multadd+0x5a>
 800628a:	4602      	mov	r2, r0
 800628c:	21b5      	movs	r1, #181	; 0xb5
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <__multadd+0x84>)
 8006290:	480c      	ldr	r0, [pc, #48]	; (80062c4 <__multadd+0x88>)
 8006292:	f000 febf 	bl	8007014 <__assert_func>
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	f104 010c 	add.w	r1, r4, #12
 800629c:	3202      	adds	r2, #2
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	300c      	adds	r0, #12
 80062a2:	f7ff ff5b 	bl	800615c <memcpy>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff ffa5 	bl	80061f8 <_Bfree>
 80062ae:	4644      	mov	r4, r8
 80062b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062b4:	3501      	adds	r5, #1
 80062b6:	615e      	str	r6, [r3, #20]
 80062b8:	6125      	str	r5, [r4, #16]
 80062ba:	4620      	mov	r0, r4
 80062bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c0:	08008298 	.word	0x08008298
 80062c4:	08008324 	.word	0x08008324

080062c8 <__s2b>:
 80062c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062cc:	4615      	mov	r5, r2
 80062ce:	2209      	movs	r2, #9
 80062d0:	461f      	mov	r7, r3
 80062d2:	3308      	adds	r3, #8
 80062d4:	460c      	mov	r4, r1
 80062d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062da:	4606      	mov	r6, r0
 80062dc:	2201      	movs	r2, #1
 80062de:	2100      	movs	r1, #0
 80062e0:	429a      	cmp	r2, r3
 80062e2:	db09      	blt.n	80062f8 <__s2b+0x30>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ff47 	bl	8006178 <_Balloc>
 80062ea:	b940      	cbnz	r0, 80062fe <__s2b+0x36>
 80062ec:	4602      	mov	r2, r0
 80062ee:	21ce      	movs	r1, #206	; 0xce
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <__s2b+0x8c>)
 80062f2:	4819      	ldr	r0, [pc, #100]	; (8006358 <__s2b+0x90>)
 80062f4:	f000 fe8e 	bl	8007014 <__assert_func>
 80062f8:	0052      	lsls	r2, r2, #1
 80062fa:	3101      	adds	r1, #1
 80062fc:	e7f0      	b.n	80062e0 <__s2b+0x18>
 80062fe:	9b08      	ldr	r3, [sp, #32]
 8006300:	2d09      	cmp	r5, #9
 8006302:	6143      	str	r3, [r0, #20]
 8006304:	f04f 0301 	mov.w	r3, #1
 8006308:	6103      	str	r3, [r0, #16]
 800630a:	dd16      	ble.n	800633a <__s2b+0x72>
 800630c:	f104 0909 	add.w	r9, r4, #9
 8006310:	46c8      	mov	r8, r9
 8006312:	442c      	add	r4, r5
 8006314:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006318:	4601      	mov	r1, r0
 800631a:	220a      	movs	r2, #10
 800631c:	4630      	mov	r0, r6
 800631e:	3b30      	subs	r3, #48	; 0x30
 8006320:	f7ff ff8c 	bl	800623c <__multadd>
 8006324:	45a0      	cmp	r8, r4
 8006326:	d1f5      	bne.n	8006314 <__s2b+0x4c>
 8006328:	f1a5 0408 	sub.w	r4, r5, #8
 800632c:	444c      	add	r4, r9
 800632e:	1b2d      	subs	r5, r5, r4
 8006330:	1963      	adds	r3, r4, r5
 8006332:	42bb      	cmp	r3, r7
 8006334:	db04      	blt.n	8006340 <__s2b+0x78>
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633a:	2509      	movs	r5, #9
 800633c:	340a      	adds	r4, #10
 800633e:	e7f6      	b.n	800632e <__s2b+0x66>
 8006340:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006344:	4601      	mov	r1, r0
 8006346:	220a      	movs	r2, #10
 8006348:	4630      	mov	r0, r6
 800634a:	3b30      	subs	r3, #48	; 0x30
 800634c:	f7ff ff76 	bl	800623c <__multadd>
 8006350:	e7ee      	b.n	8006330 <__s2b+0x68>
 8006352:	bf00      	nop
 8006354:	08008298 	.word	0x08008298
 8006358:	08008324 	.word	0x08008324

0800635c <__hi0bits>:
 800635c:	0c02      	lsrs	r2, r0, #16
 800635e:	0412      	lsls	r2, r2, #16
 8006360:	4603      	mov	r3, r0
 8006362:	b9ca      	cbnz	r2, 8006398 <__hi0bits+0x3c>
 8006364:	0403      	lsls	r3, r0, #16
 8006366:	2010      	movs	r0, #16
 8006368:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800636c:	bf04      	itt	eq
 800636e:	021b      	lsleq	r3, r3, #8
 8006370:	3008      	addeq	r0, #8
 8006372:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006376:	bf04      	itt	eq
 8006378:	011b      	lsleq	r3, r3, #4
 800637a:	3004      	addeq	r0, #4
 800637c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006380:	bf04      	itt	eq
 8006382:	009b      	lsleq	r3, r3, #2
 8006384:	3002      	addeq	r0, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	db05      	blt.n	8006396 <__hi0bits+0x3a>
 800638a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800638e:	f100 0001 	add.w	r0, r0, #1
 8006392:	bf08      	it	eq
 8006394:	2020      	moveq	r0, #32
 8006396:	4770      	bx	lr
 8006398:	2000      	movs	r0, #0
 800639a:	e7e5      	b.n	8006368 <__hi0bits+0xc>

0800639c <__lo0bits>:
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	4602      	mov	r2, r0
 80063a0:	f013 0007 	ands.w	r0, r3, #7
 80063a4:	d00b      	beq.n	80063be <__lo0bits+0x22>
 80063a6:	07d9      	lsls	r1, r3, #31
 80063a8:	d421      	bmi.n	80063ee <__lo0bits+0x52>
 80063aa:	0798      	lsls	r0, r3, #30
 80063ac:	bf49      	itett	mi
 80063ae:	085b      	lsrmi	r3, r3, #1
 80063b0:	089b      	lsrpl	r3, r3, #2
 80063b2:	2001      	movmi	r0, #1
 80063b4:	6013      	strmi	r3, [r2, #0]
 80063b6:	bf5c      	itt	pl
 80063b8:	2002      	movpl	r0, #2
 80063ba:	6013      	strpl	r3, [r2, #0]
 80063bc:	4770      	bx	lr
 80063be:	b299      	uxth	r1, r3
 80063c0:	b909      	cbnz	r1, 80063c6 <__lo0bits+0x2a>
 80063c2:	2010      	movs	r0, #16
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	b2d9      	uxtb	r1, r3
 80063c8:	b909      	cbnz	r1, 80063ce <__lo0bits+0x32>
 80063ca:	3008      	adds	r0, #8
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	0719      	lsls	r1, r3, #28
 80063d0:	bf04      	itt	eq
 80063d2:	091b      	lsreq	r3, r3, #4
 80063d4:	3004      	addeq	r0, #4
 80063d6:	0799      	lsls	r1, r3, #30
 80063d8:	bf04      	itt	eq
 80063da:	089b      	lsreq	r3, r3, #2
 80063dc:	3002      	addeq	r0, #2
 80063de:	07d9      	lsls	r1, r3, #31
 80063e0:	d403      	bmi.n	80063ea <__lo0bits+0x4e>
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f100 0001 	add.w	r0, r0, #1
 80063e8:	d003      	beq.n	80063f2 <__lo0bits+0x56>
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4770      	bx	lr
 80063ee:	2000      	movs	r0, #0
 80063f0:	4770      	bx	lr
 80063f2:	2020      	movs	r0, #32
 80063f4:	4770      	bx	lr
	...

080063f8 <__i2b>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	2101      	movs	r1, #1
 80063fe:	f7ff febb 	bl	8006178 <_Balloc>
 8006402:	4602      	mov	r2, r0
 8006404:	b928      	cbnz	r0, 8006412 <__i2b+0x1a>
 8006406:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800640a:	4b04      	ldr	r3, [pc, #16]	; (800641c <__i2b+0x24>)
 800640c:	4804      	ldr	r0, [pc, #16]	; (8006420 <__i2b+0x28>)
 800640e:	f000 fe01 	bl	8007014 <__assert_func>
 8006412:	2301      	movs	r3, #1
 8006414:	6144      	str	r4, [r0, #20]
 8006416:	6103      	str	r3, [r0, #16]
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	08008298 	.word	0x08008298
 8006420:	08008324 	.word	0x08008324

08006424 <__multiply>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4691      	mov	r9, r2
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006430:	460c      	mov	r4, r1
 8006432:	429a      	cmp	r2, r3
 8006434:	bfbe      	ittt	lt
 8006436:	460b      	movlt	r3, r1
 8006438:	464c      	movlt	r4, r9
 800643a:	4699      	movlt	r9, r3
 800643c:	6927      	ldr	r7, [r4, #16]
 800643e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006442:	68a3      	ldr	r3, [r4, #8]
 8006444:	6861      	ldr	r1, [r4, #4]
 8006446:	eb07 060a 	add.w	r6, r7, sl
 800644a:	42b3      	cmp	r3, r6
 800644c:	b085      	sub	sp, #20
 800644e:	bfb8      	it	lt
 8006450:	3101      	addlt	r1, #1
 8006452:	f7ff fe91 	bl	8006178 <_Balloc>
 8006456:	b930      	cbnz	r0, 8006466 <__multiply+0x42>
 8006458:	4602      	mov	r2, r0
 800645a:	f240 115d 	movw	r1, #349	; 0x15d
 800645e:	4b43      	ldr	r3, [pc, #268]	; (800656c <__multiply+0x148>)
 8006460:	4843      	ldr	r0, [pc, #268]	; (8006570 <__multiply+0x14c>)
 8006462:	f000 fdd7 	bl	8007014 <__assert_func>
 8006466:	f100 0514 	add.w	r5, r0, #20
 800646a:	462b      	mov	r3, r5
 800646c:	2200      	movs	r2, #0
 800646e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006472:	4543      	cmp	r3, r8
 8006474:	d321      	bcc.n	80064ba <__multiply+0x96>
 8006476:	f104 0314 	add.w	r3, r4, #20
 800647a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800647e:	f109 0314 	add.w	r3, r9, #20
 8006482:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006486:	9202      	str	r2, [sp, #8]
 8006488:	1b3a      	subs	r2, r7, r4
 800648a:	3a15      	subs	r2, #21
 800648c:	f022 0203 	bic.w	r2, r2, #3
 8006490:	3204      	adds	r2, #4
 8006492:	f104 0115 	add.w	r1, r4, #21
 8006496:	428f      	cmp	r7, r1
 8006498:	bf38      	it	cc
 800649a:	2204      	movcc	r2, #4
 800649c:	9201      	str	r2, [sp, #4]
 800649e:	9a02      	ldr	r2, [sp, #8]
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d80c      	bhi.n	80064c0 <__multiply+0x9c>
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	dd03      	ble.n	80064b2 <__multiply+0x8e>
 80064aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d059      	beq.n	8006566 <__multiply+0x142>
 80064b2:	6106      	str	r6, [r0, #16]
 80064b4:	b005      	add	sp, #20
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	f843 2b04 	str.w	r2, [r3], #4
 80064be:	e7d8      	b.n	8006472 <__multiply+0x4e>
 80064c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80064c4:	f1ba 0f00 	cmp.w	sl, #0
 80064c8:	d023      	beq.n	8006512 <__multiply+0xee>
 80064ca:	46a9      	mov	r9, r5
 80064cc:	f04f 0c00 	mov.w	ip, #0
 80064d0:	f104 0e14 	add.w	lr, r4, #20
 80064d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064d8:	f8d9 1000 	ldr.w	r1, [r9]
 80064dc:	fa1f fb82 	uxth.w	fp, r2
 80064e0:	b289      	uxth	r1, r1
 80064e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80064e6:	4461      	add	r1, ip
 80064e8:	f8d9 c000 	ldr.w	ip, [r9]
 80064ec:	0c12      	lsrs	r2, r2, #16
 80064ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80064f2:	fb0a c202 	mla	r2, sl, r2, ip
 80064f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064fa:	b289      	uxth	r1, r1
 80064fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006500:	4577      	cmp	r7, lr
 8006502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006506:	f849 1b04 	str.w	r1, [r9], #4
 800650a:	d8e3      	bhi.n	80064d4 <__multiply+0xb0>
 800650c:	9a01      	ldr	r2, [sp, #4]
 800650e:	f845 c002 	str.w	ip, [r5, r2]
 8006512:	9a03      	ldr	r2, [sp, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	d020      	beq.n	8006562 <__multiply+0x13e>
 8006520:	46ae      	mov	lr, r5
 8006522:	f04f 0a00 	mov.w	sl, #0
 8006526:	6829      	ldr	r1, [r5, #0]
 8006528:	f104 0c14 	add.w	ip, r4, #20
 800652c:	f8bc b000 	ldrh.w	fp, [ip]
 8006530:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006534:	b289      	uxth	r1, r1
 8006536:	fb09 220b 	mla	r2, r9, fp, r2
 800653a:	4492      	add	sl, r2
 800653c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006540:	f84e 1b04 	str.w	r1, [lr], #4
 8006544:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006548:	f8be 1000 	ldrh.w	r1, [lr]
 800654c:	0c12      	lsrs	r2, r2, #16
 800654e:	fb09 1102 	mla	r1, r9, r2, r1
 8006552:	4567      	cmp	r7, ip
 8006554:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006558:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800655c:	d8e6      	bhi.n	800652c <__multiply+0x108>
 800655e:	9a01      	ldr	r2, [sp, #4]
 8006560:	50a9      	str	r1, [r5, r2]
 8006562:	3504      	adds	r5, #4
 8006564:	e79b      	b.n	800649e <__multiply+0x7a>
 8006566:	3e01      	subs	r6, #1
 8006568:	e79d      	b.n	80064a6 <__multiply+0x82>
 800656a:	bf00      	nop
 800656c:	08008298 	.word	0x08008298
 8006570:	08008324 	.word	0x08008324

08006574 <__pow5mult>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4615      	mov	r5, r2
 800657a:	f012 0203 	ands.w	r2, r2, #3
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	d007      	beq.n	8006594 <__pow5mult+0x20>
 8006584:	4c25      	ldr	r4, [pc, #148]	; (800661c <__pow5mult+0xa8>)
 8006586:	3a01      	subs	r2, #1
 8006588:	2300      	movs	r3, #0
 800658a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800658e:	f7ff fe55 	bl	800623c <__multadd>
 8006592:	4607      	mov	r7, r0
 8006594:	10ad      	asrs	r5, r5, #2
 8006596:	d03d      	beq.n	8006614 <__pow5mult+0xa0>
 8006598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800659a:	b97c      	cbnz	r4, 80065bc <__pow5mult+0x48>
 800659c:	2010      	movs	r0, #16
 800659e:	f7ff fdb5 	bl	800610c <malloc>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6270      	str	r0, [r6, #36]	; 0x24
 80065a6:	b928      	cbnz	r0, 80065b4 <__pow5mult+0x40>
 80065a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065ac:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <__pow5mult+0xac>)
 80065ae:	481d      	ldr	r0, [pc, #116]	; (8006624 <__pow5mult+0xb0>)
 80065b0:	f000 fd30 	bl	8007014 <__assert_func>
 80065b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065b8:	6004      	str	r4, [r0, #0]
 80065ba:	60c4      	str	r4, [r0, #12]
 80065bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065c4:	b94c      	cbnz	r4, 80065da <__pow5mult+0x66>
 80065c6:	f240 2171 	movw	r1, #625	; 0x271
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ff14 	bl	80063f8 <__i2b>
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80065d8:	6003      	str	r3, [r0, #0]
 80065da:	f04f 0900 	mov.w	r9, #0
 80065de:	07eb      	lsls	r3, r5, #31
 80065e0:	d50a      	bpl.n	80065f8 <__pow5mult+0x84>
 80065e2:	4639      	mov	r1, r7
 80065e4:	4622      	mov	r2, r4
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7ff ff1c 	bl	8006424 <__multiply>
 80065ec:	4680      	mov	r8, r0
 80065ee:	4639      	mov	r1, r7
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7ff fe01 	bl	80061f8 <_Bfree>
 80065f6:	4647      	mov	r7, r8
 80065f8:	106d      	asrs	r5, r5, #1
 80065fa:	d00b      	beq.n	8006614 <__pow5mult+0xa0>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	b938      	cbnz	r0, 8006610 <__pow5mult+0x9c>
 8006600:	4622      	mov	r2, r4
 8006602:	4621      	mov	r1, r4
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ff0d 	bl	8006424 <__multiply>
 800660a:	6020      	str	r0, [r4, #0]
 800660c:	f8c0 9000 	str.w	r9, [r0]
 8006610:	4604      	mov	r4, r0
 8006612:	e7e4      	b.n	80065de <__pow5mult+0x6a>
 8006614:	4638      	mov	r0, r7
 8006616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661a:	bf00      	nop
 800661c:	08008470 	.word	0x08008470
 8006620:	08008226 	.word	0x08008226
 8006624:	08008324 	.word	0x08008324

08006628 <__lshift>:
 8006628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800662c:	460c      	mov	r4, r1
 800662e:	4607      	mov	r7, r0
 8006630:	4691      	mov	r9, r2
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	6849      	ldr	r1, [r1, #4]
 8006636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006640:	f108 0601 	add.w	r6, r8, #1
 8006644:	42b3      	cmp	r3, r6
 8006646:	db0b      	blt.n	8006660 <__lshift+0x38>
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff fd95 	bl	8006178 <_Balloc>
 800664e:	4605      	mov	r5, r0
 8006650:	b948      	cbnz	r0, 8006666 <__lshift+0x3e>
 8006652:	4602      	mov	r2, r0
 8006654:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006658:	4b29      	ldr	r3, [pc, #164]	; (8006700 <__lshift+0xd8>)
 800665a:	482a      	ldr	r0, [pc, #168]	; (8006704 <__lshift+0xdc>)
 800665c:	f000 fcda 	bl	8007014 <__assert_func>
 8006660:	3101      	adds	r1, #1
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	e7ee      	b.n	8006644 <__lshift+0x1c>
 8006666:	2300      	movs	r3, #0
 8006668:	f100 0114 	add.w	r1, r0, #20
 800666c:	f100 0210 	add.w	r2, r0, #16
 8006670:	4618      	mov	r0, r3
 8006672:	4553      	cmp	r3, sl
 8006674:	db37      	blt.n	80066e6 <__lshift+0xbe>
 8006676:	6920      	ldr	r0, [r4, #16]
 8006678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800667c:	f104 0314 	add.w	r3, r4, #20
 8006680:	f019 091f 	ands.w	r9, r9, #31
 8006684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006688:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800668c:	d02f      	beq.n	80066ee <__lshift+0xc6>
 800668e:	468a      	mov	sl, r1
 8006690:	f04f 0c00 	mov.w	ip, #0
 8006694:	f1c9 0e20 	rsb	lr, r9, #32
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	fa02 f209 	lsl.w	r2, r2, r9
 800669e:	ea42 020c 	orr.w	r2, r2, ip
 80066a2:	f84a 2b04 	str.w	r2, [sl], #4
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	4298      	cmp	r0, r3
 80066ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066b0:	d8f2      	bhi.n	8006698 <__lshift+0x70>
 80066b2:	1b03      	subs	r3, r0, r4
 80066b4:	3b15      	subs	r3, #21
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	3304      	adds	r3, #4
 80066bc:	f104 0215 	add.w	r2, r4, #21
 80066c0:	4290      	cmp	r0, r2
 80066c2:	bf38      	it	cc
 80066c4:	2304      	movcc	r3, #4
 80066c6:	f841 c003 	str.w	ip, [r1, r3]
 80066ca:	f1bc 0f00 	cmp.w	ip, #0
 80066ce:	d001      	beq.n	80066d4 <__lshift+0xac>
 80066d0:	f108 0602 	add.w	r6, r8, #2
 80066d4:	3e01      	subs	r6, #1
 80066d6:	4638      	mov	r0, r7
 80066d8:	4621      	mov	r1, r4
 80066da:	612e      	str	r6, [r5, #16]
 80066dc:	f7ff fd8c 	bl	80061f8 <_Bfree>
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80066ea:	3301      	adds	r3, #1
 80066ec:	e7c1      	b.n	8006672 <__lshift+0x4a>
 80066ee:	3904      	subs	r1, #4
 80066f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f4:	4298      	cmp	r0, r3
 80066f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80066fa:	d8f9      	bhi.n	80066f0 <__lshift+0xc8>
 80066fc:	e7ea      	b.n	80066d4 <__lshift+0xac>
 80066fe:	bf00      	nop
 8006700:	08008298 	.word	0x08008298
 8006704:	08008324 	.word	0x08008324

08006708 <__mcmp>:
 8006708:	4603      	mov	r3, r0
 800670a:	690a      	ldr	r2, [r1, #16]
 800670c:	6900      	ldr	r0, [r0, #16]
 800670e:	b530      	push	{r4, r5, lr}
 8006710:	1a80      	subs	r0, r0, r2
 8006712:	d10d      	bne.n	8006730 <__mcmp+0x28>
 8006714:	3314      	adds	r3, #20
 8006716:	3114      	adds	r1, #20
 8006718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800671c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006728:	4295      	cmp	r5, r2
 800672a:	d002      	beq.n	8006732 <__mcmp+0x2a>
 800672c:	d304      	bcc.n	8006738 <__mcmp+0x30>
 800672e:	2001      	movs	r0, #1
 8006730:	bd30      	pop	{r4, r5, pc}
 8006732:	42a3      	cmp	r3, r4
 8006734:	d3f4      	bcc.n	8006720 <__mcmp+0x18>
 8006736:	e7fb      	b.n	8006730 <__mcmp+0x28>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e7f8      	b.n	8006730 <__mcmp+0x28>
	...

08006740 <__mdiff>:
 8006740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	460d      	mov	r5, r1
 8006746:	4607      	mov	r7, r0
 8006748:	4611      	mov	r1, r2
 800674a:	4628      	mov	r0, r5
 800674c:	4614      	mov	r4, r2
 800674e:	f7ff ffdb 	bl	8006708 <__mcmp>
 8006752:	1e06      	subs	r6, r0, #0
 8006754:	d111      	bne.n	800677a <__mdiff+0x3a>
 8006756:	4631      	mov	r1, r6
 8006758:	4638      	mov	r0, r7
 800675a:	f7ff fd0d 	bl	8006178 <_Balloc>
 800675e:	4602      	mov	r2, r0
 8006760:	b928      	cbnz	r0, 800676e <__mdiff+0x2e>
 8006762:	f240 2132 	movw	r1, #562	; 0x232
 8006766:	4b3a      	ldr	r3, [pc, #232]	; (8006850 <__mdiff+0x110>)
 8006768:	483a      	ldr	r0, [pc, #232]	; (8006854 <__mdiff+0x114>)
 800676a:	f000 fc53 	bl	8007014 <__assert_func>
 800676e:	2301      	movs	r3, #1
 8006770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006774:	4610      	mov	r0, r2
 8006776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677a:	bfa4      	itt	ge
 800677c:	4623      	movge	r3, r4
 800677e:	462c      	movge	r4, r5
 8006780:	4638      	mov	r0, r7
 8006782:	6861      	ldr	r1, [r4, #4]
 8006784:	bfa6      	itte	ge
 8006786:	461d      	movge	r5, r3
 8006788:	2600      	movge	r6, #0
 800678a:	2601      	movlt	r6, #1
 800678c:	f7ff fcf4 	bl	8006178 <_Balloc>
 8006790:	4602      	mov	r2, r0
 8006792:	b918      	cbnz	r0, 800679c <__mdiff+0x5c>
 8006794:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006798:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <__mdiff+0x110>)
 800679a:	e7e5      	b.n	8006768 <__mdiff+0x28>
 800679c:	f102 0814 	add.w	r8, r2, #20
 80067a0:	46c2      	mov	sl, r8
 80067a2:	f04f 0c00 	mov.w	ip, #0
 80067a6:	6927      	ldr	r7, [r4, #16]
 80067a8:	60c6      	str	r6, [r0, #12]
 80067aa:	692e      	ldr	r6, [r5, #16]
 80067ac:	f104 0014 	add.w	r0, r4, #20
 80067b0:	f105 0914 	add.w	r9, r5, #20
 80067b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80067b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067bc:	3410      	adds	r4, #16
 80067be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80067c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80067c6:	fa1f f18b 	uxth.w	r1, fp
 80067ca:	448c      	add	ip, r1
 80067cc:	b299      	uxth	r1, r3
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	ebac 0101 	sub.w	r1, ip, r1
 80067d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067dc:	b289      	uxth	r1, r1
 80067de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80067e2:	454e      	cmp	r6, r9
 80067e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067e8:	f84a 3b04 	str.w	r3, [sl], #4
 80067ec:	d8e7      	bhi.n	80067be <__mdiff+0x7e>
 80067ee:	1b73      	subs	r3, r6, r5
 80067f0:	3b15      	subs	r3, #21
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	3515      	adds	r5, #21
 80067f8:	3304      	adds	r3, #4
 80067fa:	42ae      	cmp	r6, r5
 80067fc:	bf38      	it	cc
 80067fe:	2304      	movcc	r3, #4
 8006800:	4418      	add	r0, r3
 8006802:	4443      	add	r3, r8
 8006804:	461e      	mov	r6, r3
 8006806:	4605      	mov	r5, r0
 8006808:	4575      	cmp	r5, lr
 800680a:	d30e      	bcc.n	800682a <__mdiff+0xea>
 800680c:	f10e 0103 	add.w	r1, lr, #3
 8006810:	1a09      	subs	r1, r1, r0
 8006812:	f021 0103 	bic.w	r1, r1, #3
 8006816:	3803      	subs	r0, #3
 8006818:	4586      	cmp	lr, r0
 800681a:	bf38      	it	cc
 800681c:	2100      	movcc	r1, #0
 800681e:	4419      	add	r1, r3
 8006820:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006824:	b18b      	cbz	r3, 800684a <__mdiff+0x10a>
 8006826:	6117      	str	r7, [r2, #16]
 8006828:	e7a4      	b.n	8006774 <__mdiff+0x34>
 800682a:	f855 8b04 	ldr.w	r8, [r5], #4
 800682e:	fa1f f188 	uxth.w	r1, r8
 8006832:	4461      	add	r1, ip
 8006834:	140c      	asrs	r4, r1, #16
 8006836:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800683a:	b289      	uxth	r1, r1
 800683c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006840:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006844:	f846 1b04 	str.w	r1, [r6], #4
 8006848:	e7de      	b.n	8006808 <__mdiff+0xc8>
 800684a:	3f01      	subs	r7, #1
 800684c:	e7e8      	b.n	8006820 <__mdiff+0xe0>
 800684e:	bf00      	nop
 8006850:	08008298 	.word	0x08008298
 8006854:	08008324 	.word	0x08008324

08006858 <__ulp>:
 8006858:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <__ulp+0x48>)
 800685a:	400b      	ands	r3, r1
 800685c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006860:	2b00      	cmp	r3, #0
 8006862:	dd02      	ble.n	800686a <__ulp+0x12>
 8006864:	2000      	movs	r0, #0
 8006866:	4619      	mov	r1, r3
 8006868:	4770      	bx	lr
 800686a:	425b      	negs	r3, r3
 800686c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006870:	f04f 0000 	mov.w	r0, #0
 8006874:	f04f 0100 	mov.w	r1, #0
 8006878:	ea4f 5223 	mov.w	r2, r3, asr #20
 800687c:	da04      	bge.n	8006888 <__ulp+0x30>
 800687e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006882:	fa43 f102 	asr.w	r1, r3, r2
 8006886:	4770      	bx	lr
 8006888:	f1a2 0314 	sub.w	r3, r2, #20
 800688c:	2b1e      	cmp	r3, #30
 800688e:	bfd6      	itet	le
 8006890:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006894:	2301      	movgt	r3, #1
 8006896:	fa22 f303 	lsrle.w	r3, r2, r3
 800689a:	4618      	mov	r0, r3
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	7ff00000 	.word	0x7ff00000

080068a4 <__b2d>:
 80068a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a8:	6907      	ldr	r7, [r0, #16]
 80068aa:	f100 0914 	add.w	r9, r0, #20
 80068ae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80068b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80068b6:	f1a7 0804 	sub.w	r8, r7, #4
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff fd4e 	bl	800635c <__hi0bits>
 80068c0:	f1c0 0320 	rsb	r3, r0, #32
 80068c4:	280a      	cmp	r0, #10
 80068c6:	600b      	str	r3, [r1, #0]
 80068c8:	491f      	ldr	r1, [pc, #124]	; (8006948 <__b2d+0xa4>)
 80068ca:	dc17      	bgt.n	80068fc <__b2d+0x58>
 80068cc:	45c1      	cmp	r9, r8
 80068ce:	bf28      	it	cs
 80068d0:	2200      	movcs	r2, #0
 80068d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80068d6:	fa26 f30c 	lsr.w	r3, r6, ip
 80068da:	bf38      	it	cc
 80068dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80068e0:	ea43 0501 	orr.w	r5, r3, r1
 80068e4:	f100 0315 	add.w	r3, r0, #21
 80068e8:	fa06 f303 	lsl.w	r3, r6, r3
 80068ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80068f0:	ea43 0402 	orr.w	r4, r3, r2
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fc:	45c1      	cmp	r9, r8
 80068fe:	bf2e      	itee	cs
 8006900:	2200      	movcs	r2, #0
 8006902:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006906:	f1a7 0808 	subcc.w	r8, r7, #8
 800690a:	f1b0 030b 	subs.w	r3, r0, #11
 800690e:	d016      	beq.n	800693e <__b2d+0x9a>
 8006910:	f1c3 0720 	rsb	r7, r3, #32
 8006914:	fa22 f107 	lsr.w	r1, r2, r7
 8006918:	45c8      	cmp	r8, r9
 800691a:	fa06 f603 	lsl.w	r6, r6, r3
 800691e:	ea46 0601 	orr.w	r6, r6, r1
 8006922:	bf94      	ite	ls
 8006924:	2100      	movls	r1, #0
 8006926:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800692a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800692e:	fa02 f003 	lsl.w	r0, r2, r3
 8006932:	40f9      	lsrs	r1, r7
 8006934:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006938:	ea40 0401 	orr.w	r4, r0, r1
 800693c:	e7da      	b.n	80068f4 <__b2d+0x50>
 800693e:	4614      	mov	r4, r2
 8006940:	ea46 0501 	orr.w	r5, r6, r1
 8006944:	e7d6      	b.n	80068f4 <__b2d+0x50>
 8006946:	bf00      	nop
 8006948:	3ff00000 	.word	0x3ff00000

0800694c <__d2b>:
 800694c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006950:	2101      	movs	r1, #1
 8006952:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006956:	4690      	mov	r8, r2
 8006958:	461d      	mov	r5, r3
 800695a:	f7ff fc0d 	bl	8006178 <_Balloc>
 800695e:	4604      	mov	r4, r0
 8006960:	b930      	cbnz	r0, 8006970 <__d2b+0x24>
 8006962:	4602      	mov	r2, r0
 8006964:	f240 310a 	movw	r1, #778	; 0x30a
 8006968:	4b24      	ldr	r3, [pc, #144]	; (80069fc <__d2b+0xb0>)
 800696a:	4825      	ldr	r0, [pc, #148]	; (8006a00 <__d2b+0xb4>)
 800696c:	f000 fb52 	bl	8007014 <__assert_func>
 8006970:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006974:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006978:	bb2d      	cbnz	r5, 80069c6 <__d2b+0x7a>
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	f1b8 0300 	subs.w	r3, r8, #0
 8006980:	d026      	beq.n	80069d0 <__d2b+0x84>
 8006982:	4668      	mov	r0, sp
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	f7ff fd09 	bl	800639c <__lo0bits>
 800698a:	9900      	ldr	r1, [sp, #0]
 800698c:	b1f0      	cbz	r0, 80069cc <__d2b+0x80>
 800698e:	9a01      	ldr	r2, [sp, #4]
 8006990:	f1c0 0320 	rsb	r3, r0, #32
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	430b      	orrs	r3, r1
 800699a:	40c2      	lsrs	r2, r0
 800699c:	6163      	str	r3, [r4, #20]
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2102      	movne	r1, #2
 80069a8:	2101      	moveq	r1, #1
 80069aa:	61a3      	str	r3, [r4, #24]
 80069ac:	6121      	str	r1, [r4, #16]
 80069ae:	b1c5      	cbz	r5, 80069e2 <__d2b+0x96>
 80069b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069b4:	4405      	add	r5, r0
 80069b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069ba:	603d      	str	r5, [r7, #0]
 80069bc:	6030      	str	r0, [r6, #0]
 80069be:	4620      	mov	r0, r4
 80069c0:	b002      	add	sp, #8
 80069c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ca:	e7d6      	b.n	800697a <__d2b+0x2e>
 80069cc:	6161      	str	r1, [r4, #20]
 80069ce:	e7e7      	b.n	80069a0 <__d2b+0x54>
 80069d0:	a801      	add	r0, sp, #4
 80069d2:	f7ff fce3 	bl	800639c <__lo0bits>
 80069d6:	2101      	movs	r1, #1
 80069d8:	9b01      	ldr	r3, [sp, #4]
 80069da:	6121      	str	r1, [r4, #16]
 80069dc:	6163      	str	r3, [r4, #20]
 80069de:	3020      	adds	r0, #32
 80069e0:	e7e5      	b.n	80069ae <__d2b+0x62>
 80069e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80069e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069ea:	6038      	str	r0, [r7, #0]
 80069ec:	6918      	ldr	r0, [r3, #16]
 80069ee:	f7ff fcb5 	bl	800635c <__hi0bits>
 80069f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80069f6:	6031      	str	r1, [r6, #0]
 80069f8:	e7e1      	b.n	80069be <__d2b+0x72>
 80069fa:	bf00      	nop
 80069fc:	08008298 	.word	0x08008298
 8006a00:	08008324 	.word	0x08008324

08006a04 <__ratio>:
 8006a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	4688      	mov	r8, r1
 8006a0a:	4669      	mov	r1, sp
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	f7ff ff49 	bl	80068a4 <__b2d>
 8006a12:	460f      	mov	r7, r1
 8006a14:	4604      	mov	r4, r0
 8006a16:	460d      	mov	r5, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	a901      	add	r1, sp, #4
 8006a1c:	f7ff ff42 	bl	80068a4 <__b2d>
 8006a20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a28:	468b      	mov	fp, r1
 8006a2a:	eba3 0c02 	sub.w	ip, r3, r2
 8006a2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfd5      	itete	le
 8006a3c:	460a      	movle	r2, r1
 8006a3e:	462a      	movgt	r2, r5
 8006a40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a44:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a48:	bfd8      	it	le
 8006a4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006a4e:	465b      	mov	r3, fp
 8006a50:	4602      	mov	r2, r0
 8006a52:	4639      	mov	r1, r7
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7f9 fe69 	bl	800072c <__aeabi_ddiv>
 8006a5a:	b003      	add	sp, #12
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a60 <__copybits>:
 8006a60:	3901      	subs	r1, #1
 8006a62:	b570      	push	{r4, r5, r6, lr}
 8006a64:	1149      	asrs	r1, r1, #5
 8006a66:	6914      	ldr	r4, [r2, #16]
 8006a68:	3101      	adds	r1, #1
 8006a6a:	f102 0314 	add.w	r3, r2, #20
 8006a6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a76:	1f05      	subs	r5, r0, #4
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d30c      	bcc.n	8006a96 <__copybits+0x36>
 8006a7c:	1aa3      	subs	r3, r4, r2
 8006a7e:	3b11      	subs	r3, #17
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	3211      	adds	r2, #17
 8006a86:	42a2      	cmp	r2, r4
 8006a88:	bf88      	it	hi
 8006a8a:	2300      	movhi	r3, #0
 8006a8c:	4418      	add	r0, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4288      	cmp	r0, r1
 8006a92:	d305      	bcc.n	8006aa0 <__copybits+0x40>
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a9e:	e7eb      	b.n	8006a78 <__copybits+0x18>
 8006aa0:	f840 3b04 	str.w	r3, [r0], #4
 8006aa4:	e7f4      	b.n	8006a90 <__copybits+0x30>

08006aa6 <__any_on>:
 8006aa6:	f100 0214 	add.w	r2, r0, #20
 8006aaa:	6900      	ldr	r0, [r0, #16]
 8006aac:	114b      	asrs	r3, r1, #5
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	db11      	blt.n	8006ad8 <__any_on+0x32>
 8006ab4:	dd0a      	ble.n	8006acc <__any_on+0x26>
 8006ab6:	f011 011f 	ands.w	r1, r1, #31
 8006aba:	d007      	beq.n	8006acc <__any_on+0x26>
 8006abc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ac0:	fa24 f001 	lsr.w	r0, r4, r1
 8006ac4:	fa00 f101 	lsl.w	r1, r0, r1
 8006ac8:	428c      	cmp	r4, r1
 8006aca:	d10b      	bne.n	8006ae4 <__any_on+0x3e>
 8006acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d803      	bhi.n	8006adc <__any_on+0x36>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	bd10      	pop	{r4, pc}
 8006ad8:	4603      	mov	r3, r0
 8006ada:	e7f7      	b.n	8006acc <__any_on+0x26>
 8006adc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d0f5      	beq.n	8006ad0 <__any_on+0x2a>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7f6      	b.n	8006ad6 <__any_on+0x30>

08006ae8 <_calloc_r>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	fba1 5402 	umull	r5, r4, r1, r2
 8006aee:	b934      	cbnz	r4, 8006afe <_calloc_r+0x16>
 8006af0:	4629      	mov	r1, r5
 8006af2:	f000 f875 	bl	8006be0 <_malloc_r>
 8006af6:	4606      	mov	r6, r0
 8006af8:	b928      	cbnz	r0, 8006b06 <_calloc_r+0x1e>
 8006afa:	4630      	mov	r0, r6
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	220c      	movs	r2, #12
 8006b00:	2600      	movs	r6, #0
 8006b02:	6002      	str	r2, [r0, #0]
 8006b04:	e7f9      	b.n	8006afa <_calloc_r+0x12>
 8006b06:	462a      	mov	r2, r5
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f7fc fb79 	bl	8003200 <memset>
 8006b0e:	e7f4      	b.n	8006afa <_calloc_r+0x12>

08006b10 <_free_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4605      	mov	r5, r0
 8006b14:	2900      	cmp	r1, #0
 8006b16:	d040      	beq.n	8006b9a <_free_r+0x8a>
 8006b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1c:	1f0c      	subs	r4, r1, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bfb8      	it	lt
 8006b22:	18e4      	addlt	r4, r4, r3
 8006b24:	f000 fc76 	bl	8007414 <__malloc_lock>
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <_free_r+0x8c>)
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	b933      	cbnz	r3, 8006b3c <_free_r+0x2c>
 8006b2e:	6063      	str	r3, [r4, #4]
 8006b30:	6014      	str	r4, [r2, #0]
 8006b32:	4628      	mov	r0, r5
 8006b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b38:	f000 bc72 	b.w	8007420 <__malloc_unlock>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d908      	bls.n	8006b52 <_free_r+0x42>
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	1821      	adds	r1, r4, r0
 8006b44:	428b      	cmp	r3, r1
 8006b46:	bf01      	itttt	eq
 8006b48:	6819      	ldreq	r1, [r3, #0]
 8006b4a:	685b      	ldreq	r3, [r3, #4]
 8006b4c:	1809      	addeq	r1, r1, r0
 8006b4e:	6021      	streq	r1, [r4, #0]
 8006b50:	e7ed      	b.n	8006b2e <_free_r+0x1e>
 8006b52:	461a      	mov	r2, r3
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	b10b      	cbz	r3, 8006b5c <_free_r+0x4c>
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d9fa      	bls.n	8006b52 <_free_r+0x42>
 8006b5c:	6811      	ldr	r1, [r2, #0]
 8006b5e:	1850      	adds	r0, r2, r1
 8006b60:	42a0      	cmp	r0, r4
 8006b62:	d10b      	bne.n	8006b7c <_free_r+0x6c>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	4401      	add	r1, r0
 8006b68:	1850      	adds	r0, r2, r1
 8006b6a:	4283      	cmp	r3, r0
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	d1e0      	bne.n	8006b32 <_free_r+0x22>
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4401      	add	r1, r0
 8006b76:	6011      	str	r1, [r2, #0]
 8006b78:	6053      	str	r3, [r2, #4]
 8006b7a:	e7da      	b.n	8006b32 <_free_r+0x22>
 8006b7c:	d902      	bls.n	8006b84 <_free_r+0x74>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	e7d6      	b.n	8006b32 <_free_r+0x22>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf01      	itttt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	1809      	addeq	r1, r1, r0
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6054      	str	r4, [r2, #4]
 8006b98:	e7cb      	b.n	8006b32 <_free_r+0x22>
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000388 	.word	0x20000388

08006ba0 <sbrk_aligned>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4e0e      	ldr	r6, [pc, #56]	; (8006bdc <sbrk_aligned+0x3c>)
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	6831      	ldr	r1, [r6, #0]
 8006ba8:	4605      	mov	r5, r0
 8006baa:	b911      	cbnz	r1, 8006bb2 <sbrk_aligned+0x12>
 8006bac:	f000 fa00 	bl	8006fb0 <_sbrk_r>
 8006bb0:	6030      	str	r0, [r6, #0]
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f9fb 	bl	8006fb0 <_sbrk_r>
 8006bba:	1c43      	adds	r3, r0, #1
 8006bbc:	d00a      	beq.n	8006bd4 <sbrk_aligned+0x34>
 8006bbe:	1cc4      	adds	r4, r0, #3
 8006bc0:	f024 0403 	bic.w	r4, r4, #3
 8006bc4:	42a0      	cmp	r0, r4
 8006bc6:	d007      	beq.n	8006bd8 <sbrk_aligned+0x38>
 8006bc8:	1a21      	subs	r1, r4, r0
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 f9f0 	bl	8006fb0 <_sbrk_r>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d101      	bne.n	8006bd8 <sbrk_aligned+0x38>
 8006bd4:	f04f 34ff 	mov.w	r4, #4294967295
 8006bd8:	4620      	mov	r0, r4
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	2000038c 	.word	0x2000038c

08006be0 <_malloc_r>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	1ccd      	adds	r5, r1, #3
 8006be6:	f025 0503 	bic.w	r5, r5, #3
 8006bea:	3508      	adds	r5, #8
 8006bec:	2d0c      	cmp	r5, #12
 8006bee:	bf38      	it	cc
 8006bf0:	250c      	movcc	r5, #12
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	db01      	blt.n	8006bfc <_malloc_r+0x1c>
 8006bf8:	42a9      	cmp	r1, r5
 8006bfa:	d905      	bls.n	8006c08 <_malloc_r+0x28>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	2600      	movs	r6, #0
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	4630      	mov	r0, r6
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c08:	4e2e      	ldr	r6, [pc, #184]	; (8006cc4 <_malloc_r+0xe4>)
 8006c0a:	f000 fc03 	bl	8007414 <__malloc_lock>
 8006c0e:	6833      	ldr	r3, [r6, #0]
 8006c10:	461c      	mov	r4, r3
 8006c12:	bb34      	cbnz	r4, 8006c62 <_malloc_r+0x82>
 8006c14:	4629      	mov	r1, r5
 8006c16:	4638      	mov	r0, r7
 8006c18:	f7ff ffc2 	bl	8006ba0 <sbrk_aligned>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	4604      	mov	r4, r0
 8006c20:	d14d      	bne.n	8006cbe <_malloc_r+0xde>
 8006c22:	6834      	ldr	r4, [r6, #0]
 8006c24:	4626      	mov	r6, r4
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	d140      	bne.n	8006cac <_malloc_r+0xcc>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4638      	mov	r0, r7
 8006c30:	eb04 0803 	add.w	r8, r4, r3
 8006c34:	f000 f9bc 	bl	8006fb0 <_sbrk_r>
 8006c38:	4580      	cmp	r8, r0
 8006c3a:	d13a      	bne.n	8006cb2 <_malloc_r+0xd2>
 8006c3c:	6821      	ldr	r1, [r4, #0]
 8006c3e:	3503      	adds	r5, #3
 8006c40:	1a6d      	subs	r5, r5, r1
 8006c42:	f025 0503 	bic.w	r5, r5, #3
 8006c46:	3508      	adds	r5, #8
 8006c48:	2d0c      	cmp	r5, #12
 8006c4a:	bf38      	it	cc
 8006c4c:	250c      	movcc	r5, #12
 8006c4e:	4638      	mov	r0, r7
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7ff ffa5 	bl	8006ba0 <sbrk_aligned>
 8006c56:	3001      	adds	r0, #1
 8006c58:	d02b      	beq.n	8006cb2 <_malloc_r+0xd2>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	442b      	add	r3, r5
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	e00e      	b.n	8006c80 <_malloc_r+0xa0>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	1b52      	subs	r2, r2, r5
 8006c66:	d41e      	bmi.n	8006ca6 <_malloc_r+0xc6>
 8006c68:	2a0b      	cmp	r2, #11
 8006c6a:	d916      	bls.n	8006c9a <_malloc_r+0xba>
 8006c6c:	1961      	adds	r1, r4, r5
 8006c6e:	42a3      	cmp	r3, r4
 8006c70:	6025      	str	r5, [r4, #0]
 8006c72:	bf18      	it	ne
 8006c74:	6059      	strne	r1, [r3, #4]
 8006c76:	6863      	ldr	r3, [r4, #4]
 8006c78:	bf08      	it	eq
 8006c7a:	6031      	streq	r1, [r6, #0]
 8006c7c:	5162      	str	r2, [r4, r5]
 8006c7e:	604b      	str	r3, [r1, #4]
 8006c80:	4638      	mov	r0, r7
 8006c82:	f104 060b 	add.w	r6, r4, #11
 8006c86:	f000 fbcb 	bl	8007420 <__malloc_unlock>
 8006c8a:	f026 0607 	bic.w	r6, r6, #7
 8006c8e:	1d23      	adds	r3, r4, #4
 8006c90:	1af2      	subs	r2, r6, r3
 8006c92:	d0b6      	beq.n	8006c02 <_malloc_r+0x22>
 8006c94:	1b9b      	subs	r3, r3, r6
 8006c96:	50a3      	str	r3, [r4, r2]
 8006c98:	e7b3      	b.n	8006c02 <_malloc_r+0x22>
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	bf0c      	ite	eq
 8006ca0:	6032      	streq	r2, [r6, #0]
 8006ca2:	605a      	strne	r2, [r3, #4]
 8006ca4:	e7ec      	b.n	8006c80 <_malloc_r+0xa0>
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	6864      	ldr	r4, [r4, #4]
 8006caa:	e7b2      	b.n	8006c12 <_malloc_r+0x32>
 8006cac:	4634      	mov	r4, r6
 8006cae:	6876      	ldr	r6, [r6, #4]
 8006cb0:	e7b9      	b.n	8006c26 <_malloc_r+0x46>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	f000 fbb2 	bl	8007420 <__malloc_unlock>
 8006cbc:	e7a1      	b.n	8006c02 <_malloc_r+0x22>
 8006cbe:	6025      	str	r5, [r4, #0]
 8006cc0:	e7de      	b.n	8006c80 <_malloc_r+0xa0>
 8006cc2:	bf00      	nop
 8006cc4:	20000388 	.word	0x20000388

08006cc8 <__ssputs_r>:
 8006cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ccc:	688e      	ldr	r6, [r1, #8]
 8006cce:	4682      	mov	sl, r0
 8006cd0:	429e      	cmp	r6, r3
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	4690      	mov	r8, r2
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	d838      	bhi.n	8006d4c <__ssputs_r+0x84>
 8006cda:	898a      	ldrh	r2, [r1, #12]
 8006cdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ce0:	d032      	beq.n	8006d48 <__ssputs_r+0x80>
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	6909      	ldr	r1, [r1, #16]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	eba5 0901 	sub.w	r9, r5, r1
 8006cec:	6965      	ldr	r5, [r4, #20]
 8006cee:	444b      	add	r3, r9
 8006cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cf8:	106d      	asrs	r5, r5, #1
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	bf38      	it	cc
 8006cfe:	461d      	movcc	r5, r3
 8006d00:	0553      	lsls	r3, r2, #21
 8006d02:	d531      	bpl.n	8006d68 <__ssputs_r+0xa0>
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7ff ff6b 	bl	8006be0 <_malloc_r>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	b950      	cbnz	r0, 8006d24 <__ssputs_r+0x5c>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	f8ca 3000 	str.w	r3, [sl]
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d24:	464a      	mov	r2, r9
 8006d26:	6921      	ldr	r1, [r4, #16]
 8006d28:	f7ff fa18 	bl	800615c <memcpy>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	6126      	str	r6, [r4, #16]
 8006d3a:	444e      	add	r6, r9
 8006d3c:	6026      	str	r6, [r4, #0]
 8006d3e:	463e      	mov	r6, r7
 8006d40:	6165      	str	r5, [r4, #20]
 8006d42:	eba5 0509 	sub.w	r5, r5, r9
 8006d46:	60a5      	str	r5, [r4, #8]
 8006d48:	42be      	cmp	r6, r7
 8006d4a:	d900      	bls.n	8006d4e <__ssputs_r+0x86>
 8006d4c:	463e      	mov	r6, r7
 8006d4e:	4632      	mov	r2, r6
 8006d50:	4641      	mov	r1, r8
 8006d52:	6820      	ldr	r0, [r4, #0]
 8006d54:	f000 fb44 	bl	80073e0 <memmove>
 8006d58:	68a3      	ldr	r3, [r4, #8]
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	1b9b      	subs	r3, r3, r6
 8006d5e:	60a3      	str	r3, [r4, #8]
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	4433      	add	r3, r6
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	e7db      	b.n	8006d20 <__ssputs_r+0x58>
 8006d68:	462a      	mov	r2, r5
 8006d6a:	f000 fb5f 	bl	800742c <_realloc_r>
 8006d6e:	4606      	mov	r6, r0
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d1e1      	bne.n	8006d38 <__ssputs_r+0x70>
 8006d74:	4650      	mov	r0, sl
 8006d76:	6921      	ldr	r1, [r4, #16]
 8006d78:	f7ff feca 	bl	8006b10 <_free_r>
 8006d7c:	e7c7      	b.n	8006d0e <__ssputs_r+0x46>
	...

08006d80 <_svfiprintf_r>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	4698      	mov	r8, r3
 8006d86:	898b      	ldrh	r3, [r1, #12]
 8006d88:	4607      	mov	r7, r0
 8006d8a:	061b      	lsls	r3, r3, #24
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	4614      	mov	r4, r2
 8006d90:	b09d      	sub	sp, #116	; 0x74
 8006d92:	d50e      	bpl.n	8006db2 <_svfiprintf_r+0x32>
 8006d94:	690b      	ldr	r3, [r1, #16]
 8006d96:	b963      	cbnz	r3, 8006db2 <_svfiprintf_r+0x32>
 8006d98:	2140      	movs	r1, #64	; 0x40
 8006d9a:	f7ff ff21 	bl	8006be0 <_malloc_r>
 8006d9e:	6028      	str	r0, [r5, #0]
 8006da0:	6128      	str	r0, [r5, #16]
 8006da2:	b920      	cbnz	r0, 8006dae <_svfiprintf_r+0x2e>
 8006da4:	230c      	movs	r3, #12
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	e0d1      	b.n	8006f52 <_svfiprintf_r+0x1d2>
 8006dae:	2340      	movs	r3, #64	; 0x40
 8006db0:	616b      	str	r3, [r5, #20]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9309      	str	r3, [sp, #36]	; 0x24
 8006db6:	2320      	movs	r3, #32
 8006db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dbc:	2330      	movs	r3, #48	; 0x30
 8006dbe:	f04f 0901 	mov.w	r9, #1
 8006dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f6c <_svfiprintf_r+0x1ec>
 8006dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dce:	4623      	mov	r3, r4
 8006dd0:	469a      	mov	sl, r3
 8006dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd6:	b10a      	cbz	r2, 8006ddc <_svfiprintf_r+0x5c>
 8006dd8:	2a25      	cmp	r2, #37	; 0x25
 8006dda:	d1f9      	bne.n	8006dd0 <_svfiprintf_r+0x50>
 8006ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8006de0:	d00b      	beq.n	8006dfa <_svfiprintf_r+0x7a>
 8006de2:	465b      	mov	r3, fp
 8006de4:	4622      	mov	r2, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7ff ff6d 	bl	8006cc8 <__ssputs_r>
 8006dee:	3001      	adds	r0, #1
 8006df0:	f000 80aa 	beq.w	8006f48 <_svfiprintf_r+0x1c8>
 8006df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df6:	445a      	add	r2, fp
 8006df8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80a2 	beq.w	8006f48 <_svfiprintf_r+0x1c8>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0e:	f10a 0a01 	add.w	sl, sl, #1
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	9307      	str	r3, [sp, #28]
 8006e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e1c:	4654      	mov	r4, sl
 8006e1e:	2205      	movs	r2, #5
 8006e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e24:	4851      	ldr	r0, [pc, #324]	; (8006f6c <_svfiprintf_r+0x1ec>)
 8006e26:	f7ff f98b 	bl	8006140 <memchr>
 8006e2a:	9a04      	ldr	r2, [sp, #16]
 8006e2c:	b9d8      	cbnz	r0, 8006e66 <_svfiprintf_r+0xe6>
 8006e2e:	06d0      	lsls	r0, r2, #27
 8006e30:	bf44      	itt	mi
 8006e32:	2320      	movmi	r3, #32
 8006e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e38:	0711      	lsls	r1, r2, #28
 8006e3a:	bf44      	itt	mi
 8006e3c:	232b      	movmi	r3, #43	; 0x2b
 8006e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e42:	f89a 3000 	ldrb.w	r3, [sl]
 8006e46:	2b2a      	cmp	r3, #42	; 0x2a
 8006e48:	d015      	beq.n	8006e76 <_svfiprintf_r+0xf6>
 8006e4a:	4654      	mov	r4, sl
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f04f 0c0a 	mov.w	ip, #10
 8006e52:	9a07      	ldr	r2, [sp, #28]
 8006e54:	4621      	mov	r1, r4
 8006e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e5a:	3b30      	subs	r3, #48	; 0x30
 8006e5c:	2b09      	cmp	r3, #9
 8006e5e:	d94e      	bls.n	8006efe <_svfiprintf_r+0x17e>
 8006e60:	b1b0      	cbz	r0, 8006e90 <_svfiprintf_r+0x110>
 8006e62:	9207      	str	r2, [sp, #28]
 8006e64:	e014      	b.n	8006e90 <_svfiprintf_r+0x110>
 8006e66:	eba0 0308 	sub.w	r3, r0, r8
 8006e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	46a2      	mov	sl, r4
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	e7d2      	b.n	8006e1c <_svfiprintf_r+0x9c>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	1d19      	adds	r1, r3, #4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	9103      	str	r1, [sp, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bfbb      	ittet	lt
 8006e82:	425b      	neglt	r3, r3
 8006e84:	f042 0202 	orrlt.w	r2, r2, #2
 8006e88:	9307      	strge	r3, [sp, #28]
 8006e8a:	9307      	strlt	r3, [sp, #28]
 8006e8c:	bfb8      	it	lt
 8006e8e:	9204      	strlt	r2, [sp, #16]
 8006e90:	7823      	ldrb	r3, [r4, #0]
 8006e92:	2b2e      	cmp	r3, #46	; 0x2e
 8006e94:	d10c      	bne.n	8006eb0 <_svfiprintf_r+0x130>
 8006e96:	7863      	ldrb	r3, [r4, #1]
 8006e98:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9a:	d135      	bne.n	8006f08 <_svfiprintf_r+0x188>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	3402      	adds	r4, #2
 8006ea0:	1d1a      	adds	r2, r3, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	9203      	str	r2, [sp, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfb8      	it	lt
 8006eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eae:	9305      	str	r3, [sp, #20]
 8006eb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006f70 <_svfiprintf_r+0x1f0>
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	7821      	ldrb	r1, [r4, #0]
 8006eba:	f7ff f941 	bl	8006140 <memchr>
 8006ebe:	b140      	cbz	r0, 8006ed2 <_svfiprintf_r+0x152>
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	eba0 000a 	sub.w	r0, r0, sl
 8006ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eca:	9b04      	ldr	r3, [sp, #16]
 8006ecc:	3401      	adds	r4, #1
 8006ece:	4303      	orrs	r3, r0
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed6:	2206      	movs	r2, #6
 8006ed8:	4826      	ldr	r0, [pc, #152]	; (8006f74 <_svfiprintf_r+0x1f4>)
 8006eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ede:	f7ff f92f 	bl	8006140 <memchr>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d038      	beq.n	8006f58 <_svfiprintf_r+0x1d8>
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <_svfiprintf_r+0x1f8>)
 8006ee8:	bb1b      	cbnz	r3, 8006f32 <_svfiprintf_r+0x1b2>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	3307      	adds	r3, #7
 8006eee:	f023 0307 	bic.w	r3, r3, #7
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	9303      	str	r3, [sp, #12]
 8006ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef8:	4433      	add	r3, r6
 8006efa:	9309      	str	r3, [sp, #36]	; 0x24
 8006efc:	e767      	b.n	8006dce <_svfiprintf_r+0x4e>
 8006efe:	460c      	mov	r4, r1
 8006f00:	2001      	movs	r0, #1
 8006f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f06:	e7a5      	b.n	8006e54 <_svfiprintf_r+0xd4>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f04f 0c0a 	mov.w	ip, #10
 8006f0e:	4619      	mov	r1, r3
 8006f10:	3401      	adds	r4, #1
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	4620      	mov	r0, r4
 8006f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f1a:	3a30      	subs	r2, #48	; 0x30
 8006f1c:	2a09      	cmp	r2, #9
 8006f1e:	d903      	bls.n	8006f28 <_svfiprintf_r+0x1a8>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0c5      	beq.n	8006eb0 <_svfiprintf_r+0x130>
 8006f24:	9105      	str	r1, [sp, #20]
 8006f26:	e7c3      	b.n	8006eb0 <_svfiprintf_r+0x130>
 8006f28:	4604      	mov	r4, r0
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f30:	e7f0      	b.n	8006f14 <_svfiprintf_r+0x194>
 8006f32:	ab03      	add	r3, sp, #12
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	462a      	mov	r2, r5
 8006f38:	4638      	mov	r0, r7
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <_svfiprintf_r+0x1fc>)
 8006f3c:	a904      	add	r1, sp, #16
 8006f3e:	f7fc fa05 	bl	800334c <_printf_float>
 8006f42:	1c42      	adds	r2, r0, #1
 8006f44:	4606      	mov	r6, r0
 8006f46:	d1d6      	bne.n	8006ef6 <_svfiprintf_r+0x176>
 8006f48:	89ab      	ldrh	r3, [r5, #12]
 8006f4a:	065b      	lsls	r3, r3, #25
 8006f4c:	f53f af2c 	bmi.w	8006da8 <_svfiprintf_r+0x28>
 8006f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f52:	b01d      	add	sp, #116	; 0x74
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	ab03      	add	r3, sp, #12
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	462a      	mov	r2, r5
 8006f5e:	4638      	mov	r0, r7
 8006f60:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <_svfiprintf_r+0x1fc>)
 8006f62:	a904      	add	r1, sp, #16
 8006f64:	f7fc fc8e 	bl	8003884 <_printf_i>
 8006f68:	e7eb      	b.n	8006f42 <_svfiprintf_r+0x1c2>
 8006f6a:	bf00      	nop
 8006f6c:	0800847c 	.word	0x0800847c
 8006f70:	08008482 	.word	0x08008482
 8006f74:	08008486 	.word	0x08008486
 8006f78:	0800334d 	.word	0x0800334d
 8006f7c:	08006cc9 	.word	0x08006cc9

08006f80 <_read_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4d05      	ldr	r5, [pc, #20]	; (8006fa0 <_read_r+0x20>)
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fa f95f 	bl	8001252 <_read>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_read_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_read_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20000390 	.word	0x20000390

08006fa4 <nan>:
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4901      	ldr	r1, [pc, #4]	; (8006fac <nan+0x8>)
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	7ff80000 	.word	0x7ff80000

08006fb0 <_sbrk_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4d05      	ldr	r5, [pc, #20]	; (8006fcc <_sbrk_r+0x1c>)
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fa f9b2 	bl	8001324 <_sbrk>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_sbrk_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_sbrk_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000390 	.word	0x20000390

08006fd0 <strncmp>:
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	b172      	cbz	r2, 8006ff4 <strncmp+0x24>
 8006fd6:	3901      	subs	r1, #1
 8006fd8:	1884      	adds	r4, r0, r2
 8006fda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006fe2:	4290      	cmp	r0, r2
 8006fe4:	d101      	bne.n	8006fea <strncmp+0x1a>
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	d101      	bne.n	8006fee <strncmp+0x1e>
 8006fea:	1a80      	subs	r0, r0, r2
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d1f3      	bne.n	8006fda <strncmp+0xa>
 8006ff2:	e7fa      	b.n	8006fea <strncmp+0x1a>
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	e7f9      	b.n	8006fec <strncmp+0x1c>

08006ff8 <__ascii_wctomb>:
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	b141      	cbz	r1, 8007010 <__ascii_wctomb+0x18>
 8006ffe:	2aff      	cmp	r2, #255	; 0xff
 8007000:	d904      	bls.n	800700c <__ascii_wctomb+0x14>
 8007002:	228a      	movs	r2, #138	; 0x8a
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	4770      	bx	lr
 800700c:	2001      	movs	r0, #1
 800700e:	700a      	strb	r2, [r1, #0]
 8007010:	4770      	bx	lr
	...

08007014 <__assert_func>:
 8007014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007016:	4614      	mov	r4, r2
 8007018:	461a      	mov	r2, r3
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <__assert_func+0x2c>)
 800701c:	4605      	mov	r5, r0
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68d8      	ldr	r0, [r3, #12]
 8007022:	b14c      	cbz	r4, 8007038 <__assert_func+0x24>
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <__assert_func+0x30>)
 8007026:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800702a:	9100      	str	r1, [sp, #0]
 800702c:	462b      	mov	r3, r5
 800702e:	4906      	ldr	r1, [pc, #24]	; (8007048 <__assert_func+0x34>)
 8007030:	f000 f9a2 	bl	8007378 <fiprintf>
 8007034:	f000 fc40 	bl	80078b8 <abort>
 8007038:	4b04      	ldr	r3, [pc, #16]	; (800704c <__assert_func+0x38>)
 800703a:	461c      	mov	r4, r3
 800703c:	e7f3      	b.n	8007026 <__assert_func+0x12>
 800703e:	bf00      	nop
 8007040:	20000014 	.word	0x20000014
 8007044:	0800848d 	.word	0x0800848d
 8007048:	0800849a 	.word	0x0800849a
 800704c:	080084c8 	.word	0x080084c8

08007050 <__sflush_r>:
 8007050:	898a      	ldrh	r2, [r1, #12]
 8007052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007054:	4605      	mov	r5, r0
 8007056:	0710      	lsls	r0, r2, #28
 8007058:	460c      	mov	r4, r1
 800705a:	d457      	bmi.n	800710c <__sflush_r+0xbc>
 800705c:	684b      	ldr	r3, [r1, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	dc04      	bgt.n	800706c <__sflush_r+0x1c>
 8007062:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	dc01      	bgt.n	800706c <__sflush_r+0x1c>
 8007068:	2000      	movs	r0, #0
 800706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800706e:	2e00      	cmp	r6, #0
 8007070:	d0fa      	beq.n	8007068 <__sflush_r+0x18>
 8007072:	2300      	movs	r3, #0
 8007074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007078:	682f      	ldr	r7, [r5, #0]
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	d032      	beq.n	80070e4 <__sflush_r+0x94>
 800707e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	075a      	lsls	r2, r3, #29
 8007084:	d505      	bpl.n	8007092 <__sflush_r+0x42>
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	1ac0      	subs	r0, r0, r3
 800708a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800708c:	b10b      	cbz	r3, 8007092 <__sflush_r+0x42>
 800708e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007090:	1ac0      	subs	r0, r0, r3
 8007092:	2300      	movs	r3, #0
 8007094:	4602      	mov	r2, r0
 8007096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007098:	4628      	mov	r0, r5
 800709a:	6a21      	ldr	r1, [r4, #32]
 800709c:	47b0      	blx	r6
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	d106      	bne.n	80070b2 <__sflush_r+0x62>
 80070a4:	6829      	ldr	r1, [r5, #0]
 80070a6:	291d      	cmp	r1, #29
 80070a8:	d82c      	bhi.n	8007104 <__sflush_r+0xb4>
 80070aa:	4a29      	ldr	r2, [pc, #164]	; (8007150 <__sflush_r+0x100>)
 80070ac:	40ca      	lsrs	r2, r1
 80070ae:	07d6      	lsls	r6, r2, #31
 80070b0:	d528      	bpl.n	8007104 <__sflush_r+0xb4>
 80070b2:	2200      	movs	r2, #0
 80070b4:	6062      	str	r2, [r4, #4]
 80070b6:	6922      	ldr	r2, [r4, #16]
 80070b8:	04d9      	lsls	r1, r3, #19
 80070ba:	6022      	str	r2, [r4, #0]
 80070bc:	d504      	bpl.n	80070c8 <__sflush_r+0x78>
 80070be:	1c42      	adds	r2, r0, #1
 80070c0:	d101      	bne.n	80070c6 <__sflush_r+0x76>
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	b903      	cbnz	r3, 80070c8 <__sflush_r+0x78>
 80070c6:	6560      	str	r0, [r4, #84]	; 0x54
 80070c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ca:	602f      	str	r7, [r5, #0]
 80070cc:	2900      	cmp	r1, #0
 80070ce:	d0cb      	beq.n	8007068 <__sflush_r+0x18>
 80070d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d4:	4299      	cmp	r1, r3
 80070d6:	d002      	beq.n	80070de <__sflush_r+0x8e>
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff fd19 	bl	8006b10 <_free_r>
 80070de:	2000      	movs	r0, #0
 80070e0:	6360      	str	r0, [r4, #52]	; 0x34
 80070e2:	e7c2      	b.n	800706a <__sflush_r+0x1a>
 80070e4:	6a21      	ldr	r1, [r4, #32]
 80070e6:	2301      	movs	r3, #1
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b0      	blx	r6
 80070ec:	1c41      	adds	r1, r0, #1
 80070ee:	d1c7      	bne.n	8007080 <__sflush_r+0x30>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0c4      	beq.n	8007080 <__sflush_r+0x30>
 80070f6:	2b1d      	cmp	r3, #29
 80070f8:	d001      	beq.n	80070fe <__sflush_r+0xae>
 80070fa:	2b16      	cmp	r3, #22
 80070fc:	d101      	bne.n	8007102 <__sflush_r+0xb2>
 80070fe:	602f      	str	r7, [r5, #0]
 8007100:	e7b2      	b.n	8007068 <__sflush_r+0x18>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7ae      	b.n	800706a <__sflush_r+0x1a>
 800710c:	690f      	ldr	r7, [r1, #16]
 800710e:	2f00      	cmp	r7, #0
 8007110:	d0aa      	beq.n	8007068 <__sflush_r+0x18>
 8007112:	0793      	lsls	r3, r2, #30
 8007114:	bf18      	it	ne
 8007116:	2300      	movne	r3, #0
 8007118:	680e      	ldr	r6, [r1, #0]
 800711a:	bf08      	it	eq
 800711c:	694b      	ldreq	r3, [r1, #20]
 800711e:	1bf6      	subs	r6, r6, r7
 8007120:	600f      	str	r7, [r1, #0]
 8007122:	608b      	str	r3, [r1, #8]
 8007124:	2e00      	cmp	r6, #0
 8007126:	dd9f      	ble.n	8007068 <__sflush_r+0x18>
 8007128:	4633      	mov	r3, r6
 800712a:	463a      	mov	r2, r7
 800712c:	4628      	mov	r0, r5
 800712e:	6a21      	ldr	r1, [r4, #32]
 8007130:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007134:	47e0      	blx	ip
 8007136:	2800      	cmp	r0, #0
 8007138:	dc06      	bgt.n	8007148 <__sflush_r+0xf8>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	e790      	b.n	800706a <__sflush_r+0x1a>
 8007148:	4407      	add	r7, r0
 800714a:	1a36      	subs	r6, r6, r0
 800714c:	e7ea      	b.n	8007124 <__sflush_r+0xd4>
 800714e:	bf00      	nop
 8007150:	20400001 	.word	0x20400001

08007154 <_fflush_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	690b      	ldr	r3, [r1, #16]
 8007158:	4605      	mov	r5, r0
 800715a:	460c      	mov	r4, r1
 800715c:	b913      	cbnz	r3, 8007164 <_fflush_r+0x10>
 800715e:	2500      	movs	r5, #0
 8007160:	4628      	mov	r0, r5
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	b118      	cbz	r0, 800716e <_fflush_r+0x1a>
 8007166:	6983      	ldr	r3, [r0, #24]
 8007168:	b90b      	cbnz	r3, 800716e <_fflush_r+0x1a>
 800716a:	f000 f887 	bl	800727c <__sinit>
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <_fflush_r+0x6c>)
 8007170:	429c      	cmp	r4, r3
 8007172:	d11b      	bne.n	80071ac <_fflush_r+0x58>
 8007174:	686c      	ldr	r4, [r5, #4]
 8007176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0ef      	beq.n	800715e <_fflush_r+0xa>
 800717e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007180:	07d0      	lsls	r0, r2, #31
 8007182:	d404      	bmi.n	800718e <_fflush_r+0x3a>
 8007184:	0599      	lsls	r1, r3, #22
 8007186:	d402      	bmi.n	800718e <_fflush_r+0x3a>
 8007188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718a:	f000 f927 	bl	80073dc <__retarget_lock_acquire_recursive>
 800718e:	4628      	mov	r0, r5
 8007190:	4621      	mov	r1, r4
 8007192:	f7ff ff5d 	bl	8007050 <__sflush_r>
 8007196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007198:	4605      	mov	r5, r0
 800719a:	07da      	lsls	r2, r3, #31
 800719c:	d4e0      	bmi.n	8007160 <_fflush_r+0xc>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	059b      	lsls	r3, r3, #22
 80071a2:	d4dd      	bmi.n	8007160 <_fflush_r+0xc>
 80071a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a6:	f000 f91a 	bl	80073de <__retarget_lock_release_recursive>
 80071aa:	e7d9      	b.n	8007160 <_fflush_r+0xc>
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <_fflush_r+0x70>)
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d101      	bne.n	80071b6 <_fflush_r+0x62>
 80071b2:	68ac      	ldr	r4, [r5, #8]
 80071b4:	e7df      	b.n	8007176 <_fflush_r+0x22>
 80071b6:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <_fflush_r+0x74>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	bf08      	it	eq
 80071bc:	68ec      	ldreq	r4, [r5, #12]
 80071be:	e7da      	b.n	8007176 <_fflush_r+0x22>
 80071c0:	080084ec 	.word	0x080084ec
 80071c4:	0800850c 	.word	0x0800850c
 80071c8:	080084cc 	.word	0x080084cc

080071cc <std>:
 80071cc:	2300      	movs	r3, #0
 80071ce:	b510      	push	{r4, lr}
 80071d0:	4604      	mov	r4, r0
 80071d2:	e9c0 3300 	strd	r3, r3, [r0]
 80071d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071da:	6083      	str	r3, [r0, #8]
 80071dc:	8181      	strh	r1, [r0, #12]
 80071de:	6643      	str	r3, [r0, #100]	; 0x64
 80071e0:	81c2      	strh	r2, [r0, #14]
 80071e2:	6183      	str	r3, [r0, #24]
 80071e4:	4619      	mov	r1, r3
 80071e6:	2208      	movs	r2, #8
 80071e8:	305c      	adds	r0, #92	; 0x5c
 80071ea:	f7fc f809 	bl	8003200 <memset>
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <std+0x38>)
 80071f0:	6224      	str	r4, [r4, #32]
 80071f2:	6263      	str	r3, [r4, #36]	; 0x24
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <std+0x3c>)
 80071f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <std+0x40>)
 80071fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <std+0x44>)
 80071fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007200:	bd10      	pop	{r4, pc}
 8007202:	bf00      	nop
 8007204:	08003f35 	.word	0x08003f35
 8007208:	08003f57 	.word	0x08003f57
 800720c:	08003f8f 	.word	0x08003f8f
 8007210:	08003fb3 	.word	0x08003fb3

08007214 <_cleanup_r>:
 8007214:	4901      	ldr	r1, [pc, #4]	; (800721c <_cleanup_r+0x8>)
 8007216:	f000 b8c1 	b.w	800739c <_fwalk_reent>
 800721a:	bf00      	nop
 800721c:	08007155 	.word	0x08007155

08007220 <__sfmoreglue>:
 8007220:	2268      	movs	r2, #104	; 0x68
 8007222:	b570      	push	{r4, r5, r6, lr}
 8007224:	1e4d      	subs	r5, r1, #1
 8007226:	4355      	muls	r5, r2
 8007228:	460e      	mov	r6, r1
 800722a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800722e:	f7ff fcd7 	bl	8006be0 <_malloc_r>
 8007232:	4604      	mov	r4, r0
 8007234:	b140      	cbz	r0, 8007248 <__sfmoreglue+0x28>
 8007236:	2100      	movs	r1, #0
 8007238:	e9c0 1600 	strd	r1, r6, [r0]
 800723c:	300c      	adds	r0, #12
 800723e:	60a0      	str	r0, [r4, #8]
 8007240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007244:	f7fb ffdc 	bl	8003200 <memset>
 8007248:	4620      	mov	r0, r4
 800724a:	bd70      	pop	{r4, r5, r6, pc}

0800724c <__sfp_lock_acquire>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__sfp_lock_acquire+0x8>)
 800724e:	f000 b8c5 	b.w	80073dc <__retarget_lock_acquire_recursive>
 8007252:	bf00      	nop
 8007254:	20000395 	.word	0x20000395

08007258 <__sfp_lock_release>:
 8007258:	4801      	ldr	r0, [pc, #4]	; (8007260 <__sfp_lock_release+0x8>)
 800725a:	f000 b8c0 	b.w	80073de <__retarget_lock_release_recursive>
 800725e:	bf00      	nop
 8007260:	20000395 	.word	0x20000395

08007264 <__sinit_lock_acquire>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__sinit_lock_acquire+0x8>)
 8007266:	f000 b8b9 	b.w	80073dc <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	20000396 	.word	0x20000396

08007270 <__sinit_lock_release>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__sinit_lock_release+0x8>)
 8007272:	f000 b8b4 	b.w	80073de <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	20000396 	.word	0x20000396

0800727c <__sinit>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4604      	mov	r4, r0
 8007280:	f7ff fff0 	bl	8007264 <__sinit_lock_acquire>
 8007284:	69a3      	ldr	r3, [r4, #24]
 8007286:	b11b      	cbz	r3, 8007290 <__sinit+0x14>
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	f7ff bff0 	b.w	8007270 <__sinit_lock_release>
 8007290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007294:	6523      	str	r3, [r4, #80]	; 0x50
 8007296:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <__sinit+0x68>)
 8007298:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <__sinit+0x6c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	62a2      	str	r2, [r4, #40]	; 0x28
 800729e:	42a3      	cmp	r3, r4
 80072a0:	bf08      	it	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	4620      	mov	r0, r4
 80072a6:	bf08      	it	eq
 80072a8:	61a3      	streq	r3, [r4, #24]
 80072aa:	f000 f81f 	bl	80072ec <__sfp>
 80072ae:	6060      	str	r0, [r4, #4]
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f81b 	bl	80072ec <__sfp>
 80072b6:	60a0      	str	r0, [r4, #8]
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 f817 	bl	80072ec <__sfp>
 80072be:	2200      	movs	r2, #0
 80072c0:	2104      	movs	r1, #4
 80072c2:	60e0      	str	r0, [r4, #12]
 80072c4:	6860      	ldr	r0, [r4, #4]
 80072c6:	f7ff ff81 	bl	80071cc <std>
 80072ca:	2201      	movs	r2, #1
 80072cc:	2109      	movs	r1, #9
 80072ce:	68a0      	ldr	r0, [r4, #8]
 80072d0:	f7ff ff7c 	bl	80071cc <std>
 80072d4:	2202      	movs	r2, #2
 80072d6:	2112      	movs	r1, #18
 80072d8:	68e0      	ldr	r0, [r4, #12]
 80072da:	f7ff ff77 	bl	80071cc <std>
 80072de:	2301      	movs	r3, #1
 80072e0:	61a3      	str	r3, [r4, #24]
 80072e2:	e7d1      	b.n	8007288 <__sinit+0xc>
 80072e4:	08008088 	.word	0x08008088
 80072e8:	08007215 	.word	0x08007215

080072ec <__sfp>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	4607      	mov	r7, r0
 80072f0:	f7ff ffac 	bl	800724c <__sfp_lock_acquire>
 80072f4:	4b1e      	ldr	r3, [pc, #120]	; (8007370 <__sfp+0x84>)
 80072f6:	681e      	ldr	r6, [r3, #0]
 80072f8:	69b3      	ldr	r3, [r6, #24]
 80072fa:	b913      	cbnz	r3, 8007302 <__sfp+0x16>
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff ffbd 	bl	800727c <__sinit>
 8007302:	3648      	adds	r6, #72	; 0x48
 8007304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007308:	3b01      	subs	r3, #1
 800730a:	d503      	bpl.n	8007314 <__sfp+0x28>
 800730c:	6833      	ldr	r3, [r6, #0]
 800730e:	b30b      	cbz	r3, 8007354 <__sfp+0x68>
 8007310:	6836      	ldr	r6, [r6, #0]
 8007312:	e7f7      	b.n	8007304 <__sfp+0x18>
 8007314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007318:	b9d5      	cbnz	r5, 8007350 <__sfp+0x64>
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <__sfp+0x88>)
 800731c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007320:	60e3      	str	r3, [r4, #12]
 8007322:	6665      	str	r5, [r4, #100]	; 0x64
 8007324:	f000 f859 	bl	80073da <__retarget_lock_init_recursive>
 8007328:	f7ff ff96 	bl	8007258 <__sfp_lock_release>
 800732c:	2208      	movs	r2, #8
 800732e:	4629      	mov	r1, r5
 8007330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007338:	6025      	str	r5, [r4, #0]
 800733a:	61a5      	str	r5, [r4, #24]
 800733c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007340:	f7fb ff5e 	bl	8003200 <memset>
 8007344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800734c:	4620      	mov	r0, r4
 800734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007350:	3468      	adds	r4, #104	; 0x68
 8007352:	e7d9      	b.n	8007308 <__sfp+0x1c>
 8007354:	2104      	movs	r1, #4
 8007356:	4638      	mov	r0, r7
 8007358:	f7ff ff62 	bl	8007220 <__sfmoreglue>
 800735c:	4604      	mov	r4, r0
 800735e:	6030      	str	r0, [r6, #0]
 8007360:	2800      	cmp	r0, #0
 8007362:	d1d5      	bne.n	8007310 <__sfp+0x24>
 8007364:	f7ff ff78 	bl	8007258 <__sfp_lock_release>
 8007368:	230c      	movs	r3, #12
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	e7ee      	b.n	800734c <__sfp+0x60>
 800736e:	bf00      	nop
 8007370:	08008088 	.word	0x08008088
 8007374:	ffff0001 	.word	0xffff0001

08007378 <fiprintf>:
 8007378:	b40e      	push	{r1, r2, r3}
 800737a:	b503      	push	{r0, r1, lr}
 800737c:	4601      	mov	r1, r0
 800737e:	ab03      	add	r3, sp, #12
 8007380:	4805      	ldr	r0, [pc, #20]	; (8007398 <fiprintf+0x20>)
 8007382:	f853 2b04 	ldr.w	r2, [r3], #4
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	f000 f8a5 	bl	80074d8 <_vfiprintf_r>
 800738e:	b002      	add	sp, #8
 8007390:	f85d eb04 	ldr.w	lr, [sp], #4
 8007394:	b003      	add	sp, #12
 8007396:	4770      	bx	lr
 8007398:	20000014 	.word	0x20000014

0800739c <_fwalk_reent>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4606      	mov	r6, r0
 80073a2:	4688      	mov	r8, r1
 80073a4:	2700      	movs	r7, #0
 80073a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073ae:	f1b9 0901 	subs.w	r9, r9, #1
 80073b2:	d505      	bpl.n	80073c0 <_fwalk_reent+0x24>
 80073b4:	6824      	ldr	r4, [r4, #0]
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	d1f7      	bne.n	80073aa <_fwalk_reent+0xe>
 80073ba:	4638      	mov	r0, r7
 80073bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c0:	89ab      	ldrh	r3, [r5, #12]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d907      	bls.n	80073d6 <_fwalk_reent+0x3a>
 80073c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073ca:	3301      	adds	r3, #1
 80073cc:	d003      	beq.n	80073d6 <_fwalk_reent+0x3a>
 80073ce:	4629      	mov	r1, r5
 80073d0:	4630      	mov	r0, r6
 80073d2:	47c0      	blx	r8
 80073d4:	4307      	orrs	r7, r0
 80073d6:	3568      	adds	r5, #104	; 0x68
 80073d8:	e7e9      	b.n	80073ae <_fwalk_reent+0x12>

080073da <__retarget_lock_init_recursive>:
 80073da:	4770      	bx	lr

080073dc <__retarget_lock_acquire_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_release_recursive>:
 80073de:	4770      	bx	lr

080073e0 <memmove>:
 80073e0:	4288      	cmp	r0, r1
 80073e2:	b510      	push	{r4, lr}
 80073e4:	eb01 0402 	add.w	r4, r1, r2
 80073e8:	d902      	bls.n	80073f0 <memmove+0x10>
 80073ea:	4284      	cmp	r4, r0
 80073ec:	4623      	mov	r3, r4
 80073ee:	d807      	bhi.n	8007400 <memmove+0x20>
 80073f0:	1e43      	subs	r3, r0, #1
 80073f2:	42a1      	cmp	r1, r4
 80073f4:	d008      	beq.n	8007408 <memmove+0x28>
 80073f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073fe:	e7f8      	b.n	80073f2 <memmove+0x12>
 8007400:	4601      	mov	r1, r0
 8007402:	4402      	add	r2, r0
 8007404:	428a      	cmp	r2, r1
 8007406:	d100      	bne.n	800740a <memmove+0x2a>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007412:	e7f7      	b.n	8007404 <memmove+0x24>

08007414 <__malloc_lock>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__malloc_lock+0x8>)
 8007416:	f7ff bfe1 	b.w	80073dc <__retarget_lock_acquire_recursive>
 800741a:	bf00      	nop
 800741c:	20000394 	.word	0x20000394

08007420 <__malloc_unlock>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__malloc_unlock+0x8>)
 8007422:	f7ff bfdc 	b.w	80073de <__retarget_lock_release_recursive>
 8007426:	bf00      	nop
 8007428:	20000394 	.word	0x20000394

0800742c <_realloc_r>:
 800742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007430:	4680      	mov	r8, r0
 8007432:	4614      	mov	r4, r2
 8007434:	460e      	mov	r6, r1
 8007436:	b921      	cbnz	r1, 8007442 <_realloc_r+0x16>
 8007438:	4611      	mov	r1, r2
 800743a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	f7ff bbcf 	b.w	8006be0 <_malloc_r>
 8007442:	b92a      	cbnz	r2, 8007450 <_realloc_r+0x24>
 8007444:	f7ff fb64 	bl	8006b10 <_free_r>
 8007448:	4625      	mov	r5, r4
 800744a:	4628      	mov	r0, r5
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	f000 fa9e 	bl	8007990 <_malloc_usable_size_r>
 8007454:	4284      	cmp	r4, r0
 8007456:	4607      	mov	r7, r0
 8007458:	d802      	bhi.n	8007460 <_realloc_r+0x34>
 800745a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800745e:	d812      	bhi.n	8007486 <_realloc_r+0x5a>
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fbbc 	bl	8006be0 <_malloc_r>
 8007468:	4605      	mov	r5, r0
 800746a:	2800      	cmp	r0, #0
 800746c:	d0ed      	beq.n	800744a <_realloc_r+0x1e>
 800746e:	42bc      	cmp	r4, r7
 8007470:	4622      	mov	r2, r4
 8007472:	4631      	mov	r1, r6
 8007474:	bf28      	it	cs
 8007476:	463a      	movcs	r2, r7
 8007478:	f7fe fe70 	bl	800615c <memcpy>
 800747c:	4631      	mov	r1, r6
 800747e:	4640      	mov	r0, r8
 8007480:	f7ff fb46 	bl	8006b10 <_free_r>
 8007484:	e7e1      	b.n	800744a <_realloc_r+0x1e>
 8007486:	4635      	mov	r5, r6
 8007488:	e7df      	b.n	800744a <_realloc_r+0x1e>

0800748a <__sfputc_r>:
 800748a:	6893      	ldr	r3, [r2, #8]
 800748c:	b410      	push	{r4}
 800748e:	3b01      	subs	r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	6093      	str	r3, [r2, #8]
 8007494:	da07      	bge.n	80074a6 <__sfputc_r+0x1c>
 8007496:	6994      	ldr	r4, [r2, #24]
 8007498:	42a3      	cmp	r3, r4
 800749a:	db01      	blt.n	80074a0 <__sfputc_r+0x16>
 800749c:	290a      	cmp	r1, #10
 800749e:	d102      	bne.n	80074a6 <__sfputc_r+0x1c>
 80074a0:	bc10      	pop	{r4}
 80074a2:	f000 b949 	b.w	8007738 <__swbuf_r>
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	1c58      	adds	r0, r3, #1
 80074aa:	6010      	str	r0, [r2, #0]
 80074ac:	7019      	strb	r1, [r3, #0]
 80074ae:	4608      	mov	r0, r1
 80074b0:	bc10      	pop	{r4}
 80074b2:	4770      	bx	lr

080074b4 <__sfputs_r>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	4614      	mov	r4, r2
 80074bc:	18d5      	adds	r5, r2, r3
 80074be:	42ac      	cmp	r4, r5
 80074c0:	d101      	bne.n	80074c6 <__sfputs_r+0x12>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e007      	b.n	80074d6 <__sfputs_r+0x22>
 80074c6:	463a      	mov	r2, r7
 80074c8:	4630      	mov	r0, r6
 80074ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ce:	f7ff ffdc 	bl	800748a <__sfputc_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d1f3      	bne.n	80074be <__sfputs_r+0xa>
 80074d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074d8 <_vfiprintf_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	460d      	mov	r5, r1
 80074de:	4614      	mov	r4, r2
 80074e0:	4698      	mov	r8, r3
 80074e2:	4606      	mov	r6, r0
 80074e4:	b09d      	sub	sp, #116	; 0x74
 80074e6:	b118      	cbz	r0, 80074f0 <_vfiprintf_r+0x18>
 80074e8:	6983      	ldr	r3, [r0, #24]
 80074ea:	b90b      	cbnz	r3, 80074f0 <_vfiprintf_r+0x18>
 80074ec:	f7ff fec6 	bl	800727c <__sinit>
 80074f0:	4b89      	ldr	r3, [pc, #548]	; (8007718 <_vfiprintf_r+0x240>)
 80074f2:	429d      	cmp	r5, r3
 80074f4:	d11b      	bne.n	800752e <_vfiprintf_r+0x56>
 80074f6:	6875      	ldr	r5, [r6, #4]
 80074f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d405      	bmi.n	800750a <_vfiprintf_r+0x32>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	059a      	lsls	r2, r3, #22
 8007502:	d402      	bmi.n	800750a <_vfiprintf_r+0x32>
 8007504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007506:	f7ff ff69 	bl	80073dc <__retarget_lock_acquire_recursive>
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	d501      	bpl.n	8007514 <_vfiprintf_r+0x3c>
 8007510:	692b      	ldr	r3, [r5, #16]
 8007512:	b9eb      	cbnz	r3, 8007550 <_vfiprintf_r+0x78>
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f960 	bl	80077dc <__swsetup_r>
 800751c:	b1c0      	cbz	r0, 8007550 <_vfiprintf_r+0x78>
 800751e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007520:	07dc      	lsls	r4, r3, #31
 8007522:	d50e      	bpl.n	8007542 <_vfiprintf_r+0x6a>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b01d      	add	sp, #116	; 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	4b7b      	ldr	r3, [pc, #492]	; (800771c <_vfiprintf_r+0x244>)
 8007530:	429d      	cmp	r5, r3
 8007532:	d101      	bne.n	8007538 <_vfiprintf_r+0x60>
 8007534:	68b5      	ldr	r5, [r6, #8]
 8007536:	e7df      	b.n	80074f8 <_vfiprintf_r+0x20>
 8007538:	4b79      	ldr	r3, [pc, #484]	; (8007720 <_vfiprintf_r+0x248>)
 800753a:	429d      	cmp	r5, r3
 800753c:	bf08      	it	eq
 800753e:	68f5      	ldreq	r5, [r6, #12]
 8007540:	e7da      	b.n	80074f8 <_vfiprintf_r+0x20>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	0598      	lsls	r0, r3, #22
 8007546:	d4ed      	bmi.n	8007524 <_vfiprintf_r+0x4c>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f7ff ff48 	bl	80073de <__retarget_lock_release_recursive>
 800754e:	e7e9      	b.n	8007524 <_vfiprintf_r+0x4c>
 8007550:	2300      	movs	r3, #0
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	2320      	movs	r3, #32
 8007556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800755a:	2330      	movs	r3, #48	; 0x30
 800755c:	f04f 0901 	mov.w	r9, #1
 8007560:	f8cd 800c 	str.w	r8, [sp, #12]
 8007564:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007724 <_vfiprintf_r+0x24c>
 8007568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800756c:	4623      	mov	r3, r4
 800756e:	469a      	mov	sl, r3
 8007570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007574:	b10a      	cbz	r2, 800757a <_vfiprintf_r+0xa2>
 8007576:	2a25      	cmp	r2, #37	; 0x25
 8007578:	d1f9      	bne.n	800756e <_vfiprintf_r+0x96>
 800757a:	ebba 0b04 	subs.w	fp, sl, r4
 800757e:	d00b      	beq.n	8007598 <_vfiprintf_r+0xc0>
 8007580:	465b      	mov	r3, fp
 8007582:	4622      	mov	r2, r4
 8007584:	4629      	mov	r1, r5
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff ff94 	bl	80074b4 <__sfputs_r>
 800758c:	3001      	adds	r0, #1
 800758e:	f000 80aa 	beq.w	80076e6 <_vfiprintf_r+0x20e>
 8007592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007594:	445a      	add	r2, fp
 8007596:	9209      	str	r2, [sp, #36]	; 0x24
 8007598:	f89a 3000 	ldrb.w	r3, [sl]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80a2 	beq.w	80076e6 <_vfiprintf_r+0x20e>
 80075a2:	2300      	movs	r3, #0
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ac:	f10a 0a01 	add.w	sl, sl, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b8:	931a      	str	r3, [sp, #104]	; 0x68
 80075ba:	4654      	mov	r4, sl
 80075bc:	2205      	movs	r2, #5
 80075be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c2:	4858      	ldr	r0, [pc, #352]	; (8007724 <_vfiprintf_r+0x24c>)
 80075c4:	f7fe fdbc 	bl	8006140 <memchr>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	b9d8      	cbnz	r0, 8007604 <_vfiprintf_r+0x12c>
 80075cc:	06d1      	lsls	r1, r2, #27
 80075ce:	bf44      	itt	mi
 80075d0:	2320      	movmi	r3, #32
 80075d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d6:	0713      	lsls	r3, r2, #28
 80075d8:	bf44      	itt	mi
 80075da:	232b      	movmi	r3, #43	; 0x2b
 80075dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e0:	f89a 3000 	ldrb.w	r3, [sl]
 80075e4:	2b2a      	cmp	r3, #42	; 0x2a
 80075e6:	d015      	beq.n	8007614 <_vfiprintf_r+0x13c>
 80075e8:	4654      	mov	r4, sl
 80075ea:	2000      	movs	r0, #0
 80075ec:	f04f 0c0a 	mov.w	ip, #10
 80075f0:	9a07      	ldr	r2, [sp, #28]
 80075f2:	4621      	mov	r1, r4
 80075f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f8:	3b30      	subs	r3, #48	; 0x30
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d94e      	bls.n	800769c <_vfiprintf_r+0x1c4>
 80075fe:	b1b0      	cbz	r0, 800762e <_vfiprintf_r+0x156>
 8007600:	9207      	str	r2, [sp, #28]
 8007602:	e014      	b.n	800762e <_vfiprintf_r+0x156>
 8007604:	eba0 0308 	sub.w	r3, r0, r8
 8007608:	fa09 f303 	lsl.w	r3, r9, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	46a2      	mov	sl, r4
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	e7d2      	b.n	80075ba <_vfiprintf_r+0xe2>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1d19      	adds	r1, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	9103      	str	r1, [sp, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfbb      	ittet	lt
 8007620:	425b      	neglt	r3, r3
 8007622:	f042 0202 	orrlt.w	r2, r2, #2
 8007626:	9307      	strge	r3, [sp, #28]
 8007628:	9307      	strlt	r3, [sp, #28]
 800762a:	bfb8      	it	lt
 800762c:	9204      	strlt	r2, [sp, #16]
 800762e:	7823      	ldrb	r3, [r4, #0]
 8007630:	2b2e      	cmp	r3, #46	; 0x2e
 8007632:	d10c      	bne.n	800764e <_vfiprintf_r+0x176>
 8007634:	7863      	ldrb	r3, [r4, #1]
 8007636:	2b2a      	cmp	r3, #42	; 0x2a
 8007638:	d135      	bne.n	80076a6 <_vfiprintf_r+0x1ce>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	3402      	adds	r4, #2
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	9203      	str	r2, [sp, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfb8      	it	lt
 8007648:	f04f 33ff 	movlt.w	r3, #4294967295
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007728 <_vfiprintf_r+0x250>
 8007652:	2203      	movs	r2, #3
 8007654:	4650      	mov	r0, sl
 8007656:	7821      	ldrb	r1, [r4, #0]
 8007658:	f7fe fd72 	bl	8006140 <memchr>
 800765c:	b140      	cbz	r0, 8007670 <_vfiprintf_r+0x198>
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	eba0 000a 	sub.w	r0, r0, sl
 8007664:	fa03 f000 	lsl.w	r0, r3, r0
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	3401      	adds	r4, #1
 800766c:	4303      	orrs	r3, r0
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007674:	2206      	movs	r2, #6
 8007676:	482d      	ldr	r0, [pc, #180]	; (800772c <_vfiprintf_r+0x254>)
 8007678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800767c:	f7fe fd60 	bl	8006140 <memchr>
 8007680:	2800      	cmp	r0, #0
 8007682:	d03f      	beq.n	8007704 <_vfiprintf_r+0x22c>
 8007684:	4b2a      	ldr	r3, [pc, #168]	; (8007730 <_vfiprintf_r+0x258>)
 8007686:	bb1b      	cbnz	r3, 80076d0 <_vfiprintf_r+0x1f8>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	3307      	adds	r3, #7
 800768c:	f023 0307 	bic.w	r3, r3, #7
 8007690:	3308      	adds	r3, #8
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007696:	443b      	add	r3, r7
 8007698:	9309      	str	r3, [sp, #36]	; 0x24
 800769a:	e767      	b.n	800756c <_vfiprintf_r+0x94>
 800769c:	460c      	mov	r4, r1
 800769e:	2001      	movs	r0, #1
 80076a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a4:	e7a5      	b.n	80075f2 <_vfiprintf_r+0x11a>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f04f 0c0a 	mov.w	ip, #10
 80076ac:	4619      	mov	r1, r3
 80076ae:	3401      	adds	r4, #1
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	4620      	mov	r0, r4
 80076b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b8:	3a30      	subs	r2, #48	; 0x30
 80076ba:	2a09      	cmp	r2, #9
 80076bc:	d903      	bls.n	80076c6 <_vfiprintf_r+0x1ee>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c5      	beq.n	800764e <_vfiprintf_r+0x176>
 80076c2:	9105      	str	r1, [sp, #20]
 80076c4:	e7c3      	b.n	800764e <_vfiprintf_r+0x176>
 80076c6:	4604      	mov	r4, r0
 80076c8:	2301      	movs	r3, #1
 80076ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ce:	e7f0      	b.n	80076b2 <_vfiprintf_r+0x1da>
 80076d0:	ab03      	add	r3, sp, #12
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4630      	mov	r0, r6
 80076d8:	4b16      	ldr	r3, [pc, #88]	; (8007734 <_vfiprintf_r+0x25c>)
 80076da:	a904      	add	r1, sp, #16
 80076dc:	f7fb fe36 	bl	800334c <_printf_float>
 80076e0:	4607      	mov	r7, r0
 80076e2:	1c78      	adds	r0, r7, #1
 80076e4:	d1d6      	bne.n	8007694 <_vfiprintf_r+0x1bc>
 80076e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e8:	07d9      	lsls	r1, r3, #31
 80076ea:	d405      	bmi.n	80076f8 <_vfiprintf_r+0x220>
 80076ec:	89ab      	ldrh	r3, [r5, #12]
 80076ee:	059a      	lsls	r2, r3, #22
 80076f0:	d402      	bmi.n	80076f8 <_vfiprintf_r+0x220>
 80076f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f4:	f7ff fe73 	bl	80073de <__retarget_lock_release_recursive>
 80076f8:	89ab      	ldrh	r3, [r5, #12]
 80076fa:	065b      	lsls	r3, r3, #25
 80076fc:	f53f af12 	bmi.w	8007524 <_vfiprintf_r+0x4c>
 8007700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007702:	e711      	b.n	8007528 <_vfiprintf_r+0x50>
 8007704:	ab03      	add	r3, sp, #12
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	462a      	mov	r2, r5
 800770a:	4630      	mov	r0, r6
 800770c:	4b09      	ldr	r3, [pc, #36]	; (8007734 <_vfiprintf_r+0x25c>)
 800770e:	a904      	add	r1, sp, #16
 8007710:	f7fc f8b8 	bl	8003884 <_printf_i>
 8007714:	e7e4      	b.n	80076e0 <_vfiprintf_r+0x208>
 8007716:	bf00      	nop
 8007718:	080084ec 	.word	0x080084ec
 800771c:	0800850c 	.word	0x0800850c
 8007720:	080084cc 	.word	0x080084cc
 8007724:	0800847c 	.word	0x0800847c
 8007728:	08008482 	.word	0x08008482
 800772c:	08008486 	.word	0x08008486
 8007730:	0800334d 	.word	0x0800334d
 8007734:	080074b5 	.word	0x080074b5

08007738 <__swbuf_r>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	460e      	mov	r6, r1
 800773c:	4614      	mov	r4, r2
 800773e:	4605      	mov	r5, r0
 8007740:	b118      	cbz	r0, 800774a <__swbuf_r+0x12>
 8007742:	6983      	ldr	r3, [r0, #24]
 8007744:	b90b      	cbnz	r3, 800774a <__swbuf_r+0x12>
 8007746:	f7ff fd99 	bl	800727c <__sinit>
 800774a:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <__swbuf_r+0x98>)
 800774c:	429c      	cmp	r4, r3
 800774e:	d12b      	bne.n	80077a8 <__swbuf_r+0x70>
 8007750:	686c      	ldr	r4, [r5, #4]
 8007752:	69a3      	ldr	r3, [r4, #24]
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	071a      	lsls	r2, r3, #28
 800775a:	d52f      	bpl.n	80077bc <__swbuf_r+0x84>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	b36b      	cbz	r3, 80077bc <__swbuf_r+0x84>
 8007760:	6923      	ldr	r3, [r4, #16]
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	b2f6      	uxtb	r6, r6
 8007766:	1ac0      	subs	r0, r0, r3
 8007768:	6963      	ldr	r3, [r4, #20]
 800776a:	4637      	mov	r7, r6
 800776c:	4283      	cmp	r3, r0
 800776e:	dc04      	bgt.n	800777a <__swbuf_r+0x42>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f7ff fcee 	bl	8007154 <_fflush_r>
 8007778:	bb30      	cbnz	r0, 80077c8 <__swbuf_r+0x90>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	3001      	adds	r0, #1
 800777e:	3b01      	subs	r3, #1
 8007780:	60a3      	str	r3, [r4, #8]
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	701e      	strb	r6, [r3, #0]
 800778a:	6963      	ldr	r3, [r4, #20]
 800778c:	4283      	cmp	r3, r0
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x62>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d506      	bpl.n	80077a4 <__swbuf_r+0x6c>
 8007796:	2e0a      	cmp	r6, #10
 8007798:	d104      	bne.n	80077a4 <__swbuf_r+0x6c>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f7ff fcd9 	bl	8007154 <_fflush_r>
 80077a2:	b988      	cbnz	r0, 80077c8 <__swbuf_r+0x90>
 80077a4:	4638      	mov	r0, r7
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <__swbuf_r+0x9c>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d101      	bne.n	80077b2 <__swbuf_r+0x7a>
 80077ae:	68ac      	ldr	r4, [r5, #8]
 80077b0:	e7cf      	b.n	8007752 <__swbuf_r+0x1a>
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <__swbuf_r+0xa0>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	bf08      	it	eq
 80077b8:	68ec      	ldreq	r4, [r5, #12]
 80077ba:	e7ca      	b.n	8007752 <__swbuf_r+0x1a>
 80077bc:	4621      	mov	r1, r4
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 f80c 	bl	80077dc <__swsetup_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d0cb      	beq.n	8007760 <__swbuf_r+0x28>
 80077c8:	f04f 37ff 	mov.w	r7, #4294967295
 80077cc:	e7ea      	b.n	80077a4 <__swbuf_r+0x6c>
 80077ce:	bf00      	nop
 80077d0:	080084ec 	.word	0x080084ec
 80077d4:	0800850c 	.word	0x0800850c
 80077d8:	080084cc 	.word	0x080084cc

080077dc <__swsetup_r>:
 80077dc:	4b32      	ldr	r3, [pc, #200]	; (80078a8 <__swsetup_r+0xcc>)
 80077de:	b570      	push	{r4, r5, r6, lr}
 80077e0:	681d      	ldr	r5, [r3, #0]
 80077e2:	4606      	mov	r6, r0
 80077e4:	460c      	mov	r4, r1
 80077e6:	b125      	cbz	r5, 80077f2 <__swsetup_r+0x16>
 80077e8:	69ab      	ldr	r3, [r5, #24]
 80077ea:	b913      	cbnz	r3, 80077f2 <__swsetup_r+0x16>
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff fd45 	bl	800727c <__sinit>
 80077f2:	4b2e      	ldr	r3, [pc, #184]	; (80078ac <__swsetup_r+0xd0>)
 80077f4:	429c      	cmp	r4, r3
 80077f6:	d10f      	bne.n	8007818 <__swsetup_r+0x3c>
 80077f8:	686c      	ldr	r4, [r5, #4]
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007800:	0719      	lsls	r1, r3, #28
 8007802:	d42c      	bmi.n	800785e <__swsetup_r+0x82>
 8007804:	06dd      	lsls	r5, r3, #27
 8007806:	d411      	bmi.n	800782c <__swsetup_r+0x50>
 8007808:	2309      	movs	r3, #9
 800780a:	6033      	str	r3, [r6, #0]
 800780c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	e03e      	b.n	8007896 <__swsetup_r+0xba>
 8007818:	4b25      	ldr	r3, [pc, #148]	; (80078b0 <__swsetup_r+0xd4>)
 800781a:	429c      	cmp	r4, r3
 800781c:	d101      	bne.n	8007822 <__swsetup_r+0x46>
 800781e:	68ac      	ldr	r4, [r5, #8]
 8007820:	e7eb      	b.n	80077fa <__swsetup_r+0x1e>
 8007822:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <__swsetup_r+0xd8>)
 8007824:	429c      	cmp	r4, r3
 8007826:	bf08      	it	eq
 8007828:	68ec      	ldreq	r4, [r5, #12]
 800782a:	e7e6      	b.n	80077fa <__swsetup_r+0x1e>
 800782c:	0758      	lsls	r0, r3, #29
 800782e:	d512      	bpl.n	8007856 <__swsetup_r+0x7a>
 8007830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007832:	b141      	cbz	r1, 8007846 <__swsetup_r+0x6a>
 8007834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007838:	4299      	cmp	r1, r3
 800783a:	d002      	beq.n	8007842 <__swsetup_r+0x66>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff f967 	bl	8006b10 <_free_r>
 8007842:	2300      	movs	r3, #0
 8007844:	6363      	str	r3, [r4, #52]	; 0x34
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	2300      	movs	r3, #0
 8007850:	6063      	str	r3, [r4, #4]
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f043 0308 	orr.w	r3, r3, #8
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	b94b      	cbnz	r3, 8007876 <__swsetup_r+0x9a>
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786c:	d003      	beq.n	8007876 <__swsetup_r+0x9a>
 800786e:	4621      	mov	r1, r4
 8007870:	4630      	mov	r0, r6
 8007872:	f000 f84d 	bl	8007910 <__smakebuf_r>
 8007876:	89a0      	ldrh	r0, [r4, #12]
 8007878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800787c:	f010 0301 	ands.w	r3, r0, #1
 8007880:	d00a      	beq.n	8007898 <__swsetup_r+0xbc>
 8007882:	2300      	movs	r3, #0
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	6963      	ldr	r3, [r4, #20]
 8007888:	425b      	negs	r3, r3
 800788a:	61a3      	str	r3, [r4, #24]
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	b943      	cbnz	r3, 80078a2 <__swsetup_r+0xc6>
 8007890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007894:	d1ba      	bne.n	800780c <__swsetup_r+0x30>
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	0781      	lsls	r1, r0, #30
 800789a:	bf58      	it	pl
 800789c:	6963      	ldrpl	r3, [r4, #20]
 800789e:	60a3      	str	r3, [r4, #8]
 80078a0:	e7f4      	b.n	800788c <__swsetup_r+0xb0>
 80078a2:	2000      	movs	r0, #0
 80078a4:	e7f7      	b.n	8007896 <__swsetup_r+0xba>
 80078a6:	bf00      	nop
 80078a8:	20000014 	.word	0x20000014
 80078ac:	080084ec 	.word	0x080084ec
 80078b0:	0800850c 	.word	0x0800850c
 80078b4:	080084cc 	.word	0x080084cc

080078b8 <abort>:
 80078b8:	2006      	movs	r0, #6
 80078ba:	b508      	push	{r3, lr}
 80078bc:	f000 f898 	bl	80079f0 <raise>
 80078c0:	2001      	movs	r0, #1
 80078c2:	f7f9 fcbc 	bl	800123e <_exit>

080078c6 <__swhatbuf_r>:
 80078c6:	b570      	push	{r4, r5, r6, lr}
 80078c8:	460e      	mov	r6, r1
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	4614      	mov	r4, r2
 80078d0:	2900      	cmp	r1, #0
 80078d2:	461d      	mov	r5, r3
 80078d4:	b096      	sub	sp, #88	; 0x58
 80078d6:	da08      	bge.n	80078ea <__swhatbuf_r+0x24>
 80078d8:	2200      	movs	r2, #0
 80078da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078de:	602a      	str	r2, [r5, #0]
 80078e0:	061a      	lsls	r2, r3, #24
 80078e2:	d410      	bmi.n	8007906 <__swhatbuf_r+0x40>
 80078e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e8:	e00e      	b.n	8007908 <__swhatbuf_r+0x42>
 80078ea:	466a      	mov	r2, sp
 80078ec:	f000 f89c 	bl	8007a28 <_fstat_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	dbf1      	blt.n	80078d8 <__swhatbuf_r+0x12>
 80078f4:	9a01      	ldr	r2, [sp, #4]
 80078f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078fe:	425a      	negs	r2, r3
 8007900:	415a      	adcs	r2, r3
 8007902:	602a      	str	r2, [r5, #0]
 8007904:	e7ee      	b.n	80078e4 <__swhatbuf_r+0x1e>
 8007906:	2340      	movs	r3, #64	; 0x40
 8007908:	2000      	movs	r0, #0
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	b016      	add	sp, #88	; 0x58
 800790e:	bd70      	pop	{r4, r5, r6, pc}

08007910 <__smakebuf_r>:
 8007910:	898b      	ldrh	r3, [r1, #12]
 8007912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007914:	079d      	lsls	r5, r3, #30
 8007916:	4606      	mov	r6, r0
 8007918:	460c      	mov	r4, r1
 800791a:	d507      	bpl.n	800792c <__smakebuf_r+0x1c>
 800791c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	2301      	movs	r3, #1
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	b002      	add	sp, #8
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	466a      	mov	r2, sp
 800792e:	ab01      	add	r3, sp, #4
 8007930:	f7ff ffc9 	bl	80078c6 <__swhatbuf_r>
 8007934:	9900      	ldr	r1, [sp, #0]
 8007936:	4605      	mov	r5, r0
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff f951 	bl	8006be0 <_malloc_r>
 800793e:	b948      	cbnz	r0, 8007954 <__smakebuf_r+0x44>
 8007940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007944:	059a      	lsls	r2, r3, #22
 8007946:	d4ef      	bmi.n	8007928 <__smakebuf_r+0x18>
 8007948:	f023 0303 	bic.w	r3, r3, #3
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	e7e3      	b.n	800791c <__smakebuf_r+0xc>
 8007954:	4b0d      	ldr	r3, [pc, #52]	; (800798c <__smakebuf_r+0x7c>)
 8007956:	62b3      	str	r3, [r6, #40]	; 0x28
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	6020      	str	r0, [r4, #0]
 800795c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	9b00      	ldr	r3, [sp, #0]
 8007964:	6120      	str	r0, [r4, #16]
 8007966:	6163      	str	r3, [r4, #20]
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	b15b      	cbz	r3, 8007984 <__smakebuf_r+0x74>
 800796c:	4630      	mov	r0, r6
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f000 f86b 	bl	8007a4c <_isatty_r>
 8007976:	b128      	cbz	r0, 8007984 <__smakebuf_r+0x74>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	f043 0301 	orr.w	r3, r3, #1
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	89a0      	ldrh	r0, [r4, #12]
 8007986:	4305      	orrs	r5, r0
 8007988:	81a5      	strh	r5, [r4, #12]
 800798a:	e7cd      	b.n	8007928 <__smakebuf_r+0x18>
 800798c:	08007215 	.word	0x08007215

08007990 <_malloc_usable_size_r>:
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f18      	subs	r0, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfbc      	itt	lt
 800799a:	580b      	ldrlt	r3, [r1, r0]
 800799c:	18c0      	addlt	r0, r0, r3
 800799e:	4770      	bx	lr

080079a0 <_raise_r>:
 80079a0:	291f      	cmp	r1, #31
 80079a2:	b538      	push	{r3, r4, r5, lr}
 80079a4:	4604      	mov	r4, r0
 80079a6:	460d      	mov	r5, r1
 80079a8:	d904      	bls.n	80079b4 <_raise_r+0x14>
 80079aa:	2316      	movs	r3, #22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079b6:	b112      	cbz	r2, 80079be <_raise_r+0x1e>
 80079b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079bc:	b94b      	cbnz	r3, 80079d2 <_raise_r+0x32>
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f830 	bl	8007a24 <_getpid_r>
 80079c4:	462a      	mov	r2, r5
 80079c6:	4601      	mov	r1, r0
 80079c8:	4620      	mov	r0, r4
 80079ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_kill_r>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d00a      	beq.n	80079ec <_raise_r+0x4c>
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	d103      	bne.n	80079e2 <_raise_r+0x42>
 80079da:	2316      	movs	r3, #22
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	2001      	movs	r0, #1
 80079e0:	e7e7      	b.n	80079b2 <_raise_r+0x12>
 80079e2:	2400      	movs	r4, #0
 80079e4:	4628      	mov	r0, r5
 80079e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079ea:	4798      	blx	r3
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7e0      	b.n	80079b2 <_raise_r+0x12>

080079f0 <raise>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <raise+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f7ff bfd3 	b.w	80079a0 <_raise_r>
 80079fa:	bf00      	nop
 80079fc:	20000014 	.word	0x20000014

08007a00 <_kill_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	2300      	movs	r3, #0
 8007a04:	4d06      	ldr	r5, [pc, #24]	; (8007a20 <_kill_r+0x20>)
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f7f9 fc06 	bl	800121e <_kill>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <_kill_r+0x1c>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b103      	cbz	r3, 8007a1c <_kill_r+0x1c>
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000390 	.word	0x20000390

08007a24 <_getpid_r>:
 8007a24:	f7f9 bbf4 	b.w	8001210 <_getpid>

08007a28 <_fstat_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4d06      	ldr	r5, [pc, #24]	; (8007a48 <_fstat_r+0x20>)
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	f7f9 fc50 	bl	80012da <_fstat>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d102      	bne.n	8007a44 <_fstat_r+0x1c>
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	b103      	cbz	r3, 8007a44 <_fstat_r+0x1c>
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	20000390 	.word	0x20000390

08007a4c <_isatty_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4d05      	ldr	r5, [pc, #20]	; (8007a68 <_isatty_r+0x1c>)
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f7f9 fc4e 	bl	80012f8 <_isatty>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_isatty_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_isatty_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20000390 	.word	0x20000390

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
