
ESTUDO_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  080083d0  080083d0  000183d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009084  08009084  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009084  08009084  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009084  08009084  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800908c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001ec  08009278  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08009278  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a639  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6d  00000000  00000000  0002a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea2  00000000  00000000  0002d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa46  00000000  00000000  0004558a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084beb  00000000  00000000  0004ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000d4c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080083b8 	.word	0x080083b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080083b8 	.word	0x080083b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_UARTEx_RxEventCallback>:
 * @param
 * @param
 * @retval ***NONE***
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
	/* Prevent unused argument(s) compilation warning */

	if (huart->Instance == USART3) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d135      	bne.n	8000c5a <HAL_UARTEx_RxEventCallback+0x82>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000bee:	2110      	movs	r1, #16
 8000bf0:	481d      	ldr	r0, [pc, #116]	; (8000c68 <HAL_UARTEx_RxEventCallback+0x90>)
 8000bf2:	f001 f981 	bl	8001ef8 <HAL_GPIO_TogglePin>
		HAL_UART_DMAPause(&huart3);
 8000bf6:	481d      	ldr	r0, [pc, #116]	; (8000c6c <HAL_UARTEx_RxEventCallback+0x94>)
 8000bf8:	f001 fe7b 	bl	80028f2 <HAL_UART_DMAPause>
		for (int i = 0; i < 11; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e018      	b.n	8000c34 <HAL_UARTEx_RxEventCallback+0x5c>
			if (!memcmp(DMA_RX_Buffer_3 + i, fistTERM, strlen(fistTERM))) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c06:	189c      	adds	r4, r3, r2
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c0a:	681d      	ldr	r5, [r3, #0]
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fa9d 	bl	8000150 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f002 fb51 	bl	80032c4 <memcmp>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <HAL_UARTEx_RxEventCallback+0x56>
				LORA_ReceivedCallback(DMA_RX_Buffer_3);
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c2a:	f000 f83f 	bl	8000cac <LORA_ReceivedCallback>
		for (int i = 0; i < 11; i++)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	dde3      	ble.n	8000c02 <HAL_UARTEx_RxEventCallback+0x2a>
			}
		HAL_UART_DMAResume(&huart3);
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_UARTEx_RxEventCallback+0x94>)
 8000c3c:	f001 fef5 	bl	8002a2a <HAL_UART_DMAResume>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 8000c40:	2246      	movs	r2, #70	; 0x46
 8000c42:	490b      	ldr	r1, [pc, #44]	; (8000c70 <HAL_UARTEx_RxEventCallback+0x98>)
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UARTEx_RxEventCallback+0x94>)
 8000c46:	f001 ff7d 	bl	8002b44 <HAL_UARTEx_ReceiveToIdle_DMA>
		DMA_RX_BUFFER_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0204 	bic.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bdb0      	pop	{r4, r5, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004800 	.word	0x40004800
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	2000031c 	.word	0x2000031c
 8000c70:	20000208 	.word	0x20000208
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000364 	.word	0x20000364

08000c7c <USART_Init>:
 * @brief
 * @param
 * @param
 * @retval ***NONE***
 */
void USART_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 8000c80:	2246      	movs	r2, #70	; 0x46
 8000c82:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <USART_Init+0x24>)
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <USART_Init+0x28>)
 8000c86:	f001 ff5d 	bl	8002b44 <HAL_UARTEx_ReceiveToIdle_DMA>
	DMA_RX_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <USART_Init+0x2c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <USART_Init+0x2c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0204 	bic.w	r2, r2, #4
 8000c98:	601a      	str	r2, [r3, #0]
//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2, DMA_RX_BUFFER_SIZE);
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000208 	.word	0x20000208
 8000ca4:	2000031c 	.word	0x2000031c
 8000ca8:	20000364 	.word	0x20000364

08000cac <LORA_ReceivedCallback>:

/* USER CODE END PV */

/* Private functions ------------------------------------------------------------*/
/* USER CODE BEGIN PF */
void LORA_ReceivedCallback(uint8_t buffer[50]) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	int posicao_inicial = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
	int posicao_final = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 70; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	e010      	b.n	8000ce4 <LORA_ReceivedCallback+0x38>
		if (!memcmp(buffer + i, "AT+", 3)) {
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	493a      	ldr	r1, [pc, #232]	; (8000db4 <LORA_ReceivedCallback+0x108>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 faf9 	bl	80032c4 <memcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <LORA_ReceivedCallback+0x32>
			posicao_inicial = i;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000cdc:	e005      	b.n	8000cea <LORA_ReceivedCallback+0x3e>
	for (int i = 0; i < 70; i++) {
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2b45      	cmp	r3, #69	; 0x45
 8000ce8:	ddeb      	ble.n	8000cc2 <LORA_ReceivedCallback+0x16>
		}
	}
	for (int i = posicao_inicial; i < 70; i++) {
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	e011      	b.n	8000d14 <LORA_ReceivedCallback+0x68>
		if (!memcmp(buffer + i, "<OK>", 4)) {
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	492f      	ldr	r1, [pc, #188]	; (8000db8 <LORA_ReceivedCallback+0x10c>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fae2 	bl	80032c4 <memcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <LORA_ReceivedCallback+0x62>
			posicao_final = i + 4;
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	623b      	str	r3, [r7, #32]
			break;
 8000d0c:	e005      	b.n	8000d1a <LORA_ReceivedCallback+0x6e>
	for (int i = posicao_inicial; i < 70; i++) {
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	3301      	adds	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2b45      	cmp	r3, #69	; 0x45
 8000d18:	ddea      	ble.n	8000cf0 <LORA_ReceivedCallback+0x44>
		}
	}
	if (posicao_inicial != 0 && posicao_final != 0) {
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d035      	beq.n	8000d8c <LORA_ReceivedCallback+0xe0>
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d032      	beq.n	8000d8c <LORA_ReceivedCallback+0xe0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000d26:	2102      	movs	r1, #2
 8000d28:	4824      	ldr	r0, [pc, #144]	; (8000dbc <LORA_ReceivedCallback+0x110>)
 8000d2a:	f001 f8e5 	bl	8001ef8 <HAL_GPIO_TogglePin>
		for (int i = posicao_inicial; i < 100; i++) {
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e016      	b.n	8000d62 <LORA_ReceivedCallback+0xb6>
			if (i <= posicao_final + 1)
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	3301      	adds	r3, #1
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dc09      	bgt.n	8000d52 <LORA_ReceivedCallback+0xa6>
				LORA_UART_BUFFER[i - posicao_inicial] = buffer[i];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	441a      	add	r2, r3
 8000d44:	6979      	ldr	r1, [r7, #20]
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	1acb      	subs	r3, r1, r3
 8000d4a:	7811      	ldrb	r1, [r2, #0]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <LORA_ReceivedCallback+0x114>)
 8000d4e:	54d1      	strb	r1, [r2, r3]
 8000d50:	e004      	b.n	8000d5c <LORA_ReceivedCallback+0xb0>
			else
				LORA_UART_BUFFER[i] = '\000';
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <LORA_ReceivedCallback+0x114>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	4413      	add	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
		for (int i = posicao_inicial; i < 100; i++) {
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	dde5      	ble.n	8000d34 <LORA_ReceivedCallback+0x88>
		}
		LORA_STATUS_RECEIVE = LORA_OK;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <LORA_ReceivedCallback+0x118>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e007      	b.n	8000d84 <LORA_ReceivedCallback+0xd8>
			buffer[i] = '\0';
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	3301      	adds	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	2b0e      	cmp	r3, #14
 8000d88:	ddf4      	ble.n	8000d74 <LORA_ReceivedCallback+0xc8>
		return;
 8000d8a:	e010      	b.n	8000dae <LORA_ReceivedCallback+0x102>
	}
	for (int i = 0; i < 15; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e007      	b.n	8000da2 <LORA_ReceivedCallback+0xf6>
		buffer[i] = '\0';
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; i++)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b0e      	cmp	r3, #14
 8000da6:	ddf4      	ble.n	8000d92 <LORA_ReceivedCallback+0xe6>
	LORA_STATUS_RECEIVE = LORA_FAILED;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LORA_ReceivedCallback+0x118>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
}
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	080083e0 	.word	0x080083e0
 8000db8:	080083e4 	.word	0x080083e4
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	20000250 	.word	0x20000250
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <LORA_TransmitCommand>:

LoRa_StatusTypeDef LORA_TransmitCommand(uint16_t _Timeout) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_TXcommand,
			strlen((char*) AT_TXcommand), _Timeout) != HAL_OK) {
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <LORA_TransmitCommand+0x38>)
 8000dd4:	f7ff f9bc 	bl	8000150 <strlen>
 8000dd8:	4603      	mov	r3, r0
	if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_TXcommand,
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <LORA_TransmitCommand+0x38>)
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <LORA_TransmitCommand+0x3c>)
 8000de2:	f001 fd03 	bl	80027ec <HAL_UART_Transmit>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <LORA_TransmitCommand+0x2e>
		HAL_Delay(20);
 8000dec:	2014      	movs	r0, #20
 8000dee:	f000 fbc7 	bl	8001580 <HAL_Delay>
		return LORA_FAILED;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <LORA_TransmitCommand+0x30>
	}
	return LORA_OK;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200002e8 	.word	0x200002e8
 8000e04:	2000031c 	.word	0x2000031c

08000e08 <LORA_ReceiveCommand>:

LoRa_StatusTypeDef LORA_ReceiveCommand(uint16_t _TimerWait, uint16_t _Periodo) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	4613      	mov	r3, r2
 8000e16:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
			strlen((char*) AT_RXcommand), 100);
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <LORA_ReceiveCommand+0x90>)
 8000e1a:	f7ff f999 	bl	8000150 <strlen>
 8000e1e:	4603      	mov	r3, r0
	HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	491c      	ldr	r1, [pc, #112]	; (8000e98 <LORA_ReceiveCommand+0x90>)
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <LORA_ReceiveCommand+0x94>)
 8000e28:	f001 fce0 	bl	80027ec <HAL_UART_Transmit>
	HAL_Delay(20);
 8000e2c:	2014      	movs	r0, #20
 8000e2e:	f000 fba7 	bl	8001580 <HAL_Delay>

	uint32_t Timer_start = HAL_GetTick();
 8000e32:	f000 fb9b 	bl	800156c <HAL_GetTick>
 8000e36:	60f8      	str	r0, [r7, #12]
	while (LORA_STATUS_RECEIVE != LORA_OK) {
 8000e38:	e025      	b.n	8000e86 <LORA_ReceiveCommand+0x7e>
		if (((HAL_GetTick() - Timer_start) % _Periodo) == 0)
 8000e3a:	f000 fb97 	bl	800156c <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	88ba      	ldrh	r2, [r7, #4]
 8000e46:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e4a:	fb01 f202 	mul.w	r2, r1, r2
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10e      	bne.n	8000e72 <LORA_ReceiveCommand+0x6a>
			if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
					strlen((char*) AT_RXcommand), 100) != HAL_OK)
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <LORA_ReceiveCommand+0x90>)
 8000e56:	f7ff f97b 	bl	8000150 <strlen>
 8000e5a:	4603      	mov	r3, r0
			if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LORA_ReceiveCommand+0x90>)
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <LORA_ReceiveCommand+0x94>)
 8000e64:	f001 fcc2 	bl	80027ec <HAL_UART_Transmit>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <LORA_ReceiveCommand+0x6a>
				return LORA_FAILED;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e00e      	b.n	8000e90 <LORA_ReceiveCommand+0x88>
		if ((HAL_GetTick() - Timer_start) > _TimerWait)
 8000e72:	f000 fb7b 	bl	800156c <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1ad2      	subs	r2, r2, r3
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d901      	bls.n	8000e86 <LORA_ReceiveCommand+0x7e>
			return LORA_TIMEOUT;
 8000e82:	2305      	movs	r3, #5
 8000e84:	e004      	b.n	8000e90 <LORA_ReceiveCommand+0x88>
	while (LORA_STATUS_RECEIVE != LORA_OK) {
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LORA_ReceiveCommand+0x98>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d1d5      	bne.n	8000e3a <LORA_ReceiveCommand+0x32>
	}
	return LORA_OK;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200002b4 	.word	0x200002b4
 8000e9c:	2000031c 	.word	0x2000031c
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <AT_DeviceAdressP2P>:
 * @param _Operacao: Modo de operação do comando
 * @param _Adress: Endereço de comunicação P2P
 * @retval Status de execução do comando
 */
LoRa_StatusTypeDef AT_DeviceAdressP2P(LoRa_OperationTypeDef _Operacao,
		LoRa_Adress *_Adress) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
	switch (_Operacao) {
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <AT_DeviceAdressP2P+0x18>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d018      	beq.n	8000eec <AT_DeviceAdressP2P+0x48>
				((uint32_t*) _Adress)[0]);
		if (LORA_TransmitCommand(100) != LORA_OK)
			return LORA_FAILED;
		break;
	default:
		break;
 8000eba:	e027      	b.n	8000f0c <AT_DeviceAdressP2P+0x68>
		sprintf((char*) AT_RXcommand, "AT+P2PDA\r\n");
 8000ebc:	4916      	ldr	r1, [pc, #88]	; (8000f18 <AT_DeviceAdressP2P+0x74>)
 8000ebe:	4817      	ldr	r0, [pc, #92]	; (8000f1c <AT_DeviceAdressP2P+0x78>)
 8000ec0:	f003 f88a 	bl	8003fd8 <siprintf>
		LORA_STATUS_RECEIVE = LORA_CLEAR;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <AT_DeviceAdressP2P+0x7c>)
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	701a      	strb	r2, [r3, #0]
		if (LORA_ReceiveCommand(1000, 10) != LORA_OK)
 8000eca:	210a      	movs	r1, #10
 8000ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed0:	f7ff ff9a 	bl	8000e08 <LORA_ReceiveCommand>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d001      	beq.n	8000ede <AT_DeviceAdressP2P+0x3a>
			return LORA_FAILED;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e017      	b.n	8000f0e <AT_DeviceAdressP2P+0x6a>
		sscanf(LORA_UART_BUFFER, "%s\r%8lx\r\n", AT_RXcommand,
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <AT_DeviceAdressP2P+0x78>)
 8000ee2:	4910      	ldr	r1, [pc, #64]	; (8000f24 <AT_DeviceAdressP2P+0x80>)
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <AT_DeviceAdressP2P+0x84>)
 8000ee6:	f003 f897 	bl	8004018 <siscanf>
		break;
 8000eea:	e00f      	b.n	8000f0c <AT_DeviceAdressP2P+0x68>
		sprintf((char*) AT_TXcommand, "AT+P2PDA %08lX\r\n",
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <AT_DeviceAdressP2P+0x88>)
 8000ef4:	480e      	ldr	r0, [pc, #56]	; (8000f30 <AT_DeviceAdressP2P+0x8c>)
 8000ef6:	f003 f86f 	bl	8003fd8 <siprintf>
		if (LORA_TransmitCommand(100) != LORA_OK)
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f7ff ff64 	bl	8000dc8 <LORA_TransmitCommand>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d001      	beq.n	8000f0a <AT_DeviceAdressP2P+0x66>
			return LORA_FAILED;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e001      	b.n	8000f0e <AT_DeviceAdressP2P+0x6a>
		break;
 8000f0a:	bf00      	nop
	}
	return LORA_OK;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	08008b70 	.word	0x08008b70
 8000f1c:	200002b4 	.word	0x200002b4
 8000f20:	20000004 	.word	0x20000004
 8000f24:	08008594 	.word	0x08008594
 8000f28:	20000250 	.word	0x20000250
 8000f2c:	08008b7c 	.word	0x08008b7c
 8000f30:	200002e8 	.word	0x200002e8

08000f34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f38:	f000 fac0 	bl	80014bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f3c:	f000 f822 	bl	8000f84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f40:	f000 f8ae 	bl	80010a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f44:	f000 f88e 	bl	8001064 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000f48:	f000 f862 	bl	8001010 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	USART_Init();
 8000f4c:	f7ff fe96 	bl	8000c7c <USART_Init>
//	AT_LoRaMacRegion(AT_OPERATION_READ, &regiao);
//	AT_LoRaMacRegion(AT_OPERATION_WRITE, &regiao);
//
//	AT_RegionalChannelListP2P(AT_OPERATION_READ, 0, &chanel);
//	AT_SystemReboot(AT_REBOOT_SYSTEM);
	AT_DeviceAdressP2P(AT_OPERATION_READ, &adress);
 8000f50:	4909      	ldr	r1, [pc, #36]	; (8000f78 <main+0x44>)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ffa6 	bl	8000ea4 <AT_DeviceAdressP2P>
	adress = 1264891;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <main+0x44>)
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <main+0x48>)
 8000f5c:	601a      	str	r2, [r3, #0]
	AT_DeviceAdressP2P(AT_OPERATION_WRITE, &adress);
 8000f5e:	4906      	ldr	r1, [pc, #24]	; (8000f78 <main+0x44>)
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ff9f 	bl	8000ea4 <AT_DeviceAdressP2P>
	adress = 91347;
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <main+0x44>)
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <main+0x4c>)
 8000f6a:	601a      	str	r2, [r3, #0]
	AT_DeviceAdressP2P(AT_OPERATION_READ, &adress);
 8000f6c:	4902      	ldr	r1, [pc, #8]	; (8000f78 <main+0x44>)
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ff98 	bl	8000ea4 <AT_DeviceAdressP2P>
	while (1) {
 8000f74:	e7fe      	b.n	8000f74 <main+0x40>
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	00134cfb 	.word	0x00134cfb
 8000f80:	000164d3 	.word	0x000164d3

08000f84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f9a6 	bl	80032e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 ffad 	bl	8001f2c <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x58>
		Error_Handler();
 8000fd8:	f000 f8ac 	bl	8001134 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fa1a 	bl	8002430 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x82>
		Error_Handler();
 8001002:	f000 f897 	bl	8001134 <Error_Handler>
	}
}
 8001006:	bf00      	nop
 8001008:	3740      	adds	r7, #64	; 0x40
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART3_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_USART3_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART3_UART_Init+0x4c>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART3_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART3_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART3_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART3_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART3_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART3_UART_Init+0x4c>)
 8001048:	f001 fb80 	bl	800274c <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001052:	f000 f86f 	bl	8001134 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000031c 	.word	0x2000031c
 8001060:	40004800 	.word	0x40004800

08001064 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_DMA_Init+0x38>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <MX_DMA_Init+0x38>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_DMA_Init+0x38>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	200d      	movs	r0, #13
 8001088:	f000 fb75 	bl	8001776 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800108c:	200d      	movs	r0, #13
 800108e:	f000 fb8e 	bl	80017ae <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_GPIO_Init+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_GPIO_Init+0x8c>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_GPIO_Init+0x8c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_GPIO_Init+0x8c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a16      	ldr	r2, [pc, #88]	; (800112c <MX_GPIO_Init+0x8c>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_GPIO_Init+0x8c>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_GPIO_Init+0x8c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a10      	ldr	r2, [pc, #64]	; (800112c <MX_GPIO_Init+0x8c>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_GPIO_Init+0x8c>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4,
 80010fc:	2200      	movs	r2, #0
 80010fe:	2113      	movs	r1, #19
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_GPIO_Init+0x90>)
 8001102:	f000 fee1 	bl	8001ec8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8001106:	2313      	movs	r3, #19
 8001108:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_GPIO_Init+0x90>)
 800111e:	f000 fd4f 	bl	8001bc0 <HAL_GPIO_Init>

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800

08001134 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_MspInit+0x5c>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a14      	ldr	r2, [pc, #80]	; (800119c <HAL_MspInit+0x5c>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_MspInit+0x5c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_MspInit+0x5c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_MspInit+0x5c>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_MspInit+0x5c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_MspInit+0x60>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_MspInit+0x60>)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <HAL_UART_MspInit+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d157      	bne.n	8001274 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ce:	61d3      	str	r3, [r2, #28]
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	481e      	ldr	r0, [pc, #120]	; (8001284 <HAL_UART_MspInit+0xe0>)
 800120a:	f000 fcd9 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800120e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <HAL_UART_MspInit+0xe0>)
 8001224:	f000 fccc 	bl	8001bc0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_UART_MspInit+0xe4>)
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <HAL_UART_MspInit+0xe8>)
 800122c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_UART_MspInit+0xe4>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_UART_MspInit+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_UART_MspInit+0xe4>)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_UART_MspInit+0xe4>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_UART_MspInit+0xe4>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_UART_MspInit+0xe4>)
 800124e:	2220      	movs	r2, #32
 8001250:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_UART_MspInit+0xe4>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <HAL_UART_MspInit+0xe4>)
 800125a:	f000 fac3 	bl	80017e4 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001264:	f7ff ff66 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_UART_MspInit+0xe4>)
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_UART_MspInit+0xe4>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004800 	.word	0x40004800
 8001280:	40021000 	.word	0x40021000
 8001284:	40010c00 	.word	0x40010c00
 8001288:	20000364 	.word	0x20000364
 800128c:	40020030 	.word	0x40020030

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f937 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <DMA1_Channel3_IRQHandler+0x10>)
 80012e6:	f000 fb37 	bl	8001958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000364 	.word	0x20000364

080012f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	return 1;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <_kill>:

int _kill(int pid, int sig)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800130c:	f001 ffb0 	bl	8003270 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	2216      	movs	r2, #22
 8001314:	601a      	str	r2, [r3, #0]
	return -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_exit>:

void _exit (int status)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800132a:	f04f 31ff 	mov.w	r1, #4294967295
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffe7 	bl	8001302 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001334:	e7fe      	b.n	8001334 <_exit+0x12>

08001336 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e00a      	b.n	800135e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001348:	f3af 8000 	nop.w
 800134c:	4601      	mov	r1, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbf0      	blt.n	8001348 <_read+0x12>
	}

return len;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e009      	b.n	8001396 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	60ba      	str	r2, [r7, #8]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbf1      	blt.n	8001382 <_write+0x12>
	}
	return len;
 800139e:	687b      	ldr	r3, [r7, #4]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_close>:

int _close(int file)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <_isatty>:

int _isatty(int file)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f001 ff1a 	bl	8003270 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20005000 	.word	0x20005000
 8001468:	00000400 	.word	0x00000400
 800146c:	200003a8 	.word	0x200003a8
 8001470:	200003c0 	.word	0x200003c0

08001474 <Reset_Handler>:

/* Call the clock system initialization function.*/
#    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001476:	490c      	ldr	r1, [pc, #48]	; (80014a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800148c:	4c09      	ldr	r4, [pc, #36]	; (80014b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f001 feef 	bl	800327c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149e:	f7ff fd49 	bl	8000f34 <main>
  bx lr
 80014a2:	4770      	bx	lr
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80014ac:	0800908c 	.word	0x0800908c
  ldr r2, =_sbss
 80014b0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80014b4:	200003c0 	.word	0x200003c0

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x28>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x28>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f947 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fe32 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f95f 	bl	80017ca <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f927 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000014 	.word	0x20000014
 8001544:	20000010 	.word	0x20000010

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x1c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_IncTick+0x20>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000014 	.word	0x20000014
 8001568:	200003ac 	.word	0x200003ac

0800156c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <HAL_GetTick+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	200003ac 	.word	0x200003ac

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fff0 	bl	800156c <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffe0 	bl	800156c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000014 	.word	0x20000014

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4906      	ldr	r1, [pc, #24]	; (8001660 <__NVIC_EnableIRQ+0x34>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff90 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff2d 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff42 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff90 	bl	80016b8 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5f 	bl	8001664 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff35 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e043      	b.n	8001882 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_DMA_Init+0xa8>)
 8001802:	4413      	add	r3, r2
 8001804:	4a22      	ldr	r2, [pc, #136]	; (8001890 <HAL_DMA_Init+0xac>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	009a      	lsls	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_DMA_Init+0xb0>)
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800182e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	bffdfff8 	.word	0xbffdfff8
 8001890:	cccccccd 	.word	0xcccccccd
 8001894:	40020000 	.word	0x40020000

08001898 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Start_IT+0x20>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e04b      	b.n	8001950 <HAL_DMA_Start_IT+0xb8>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d13a      	bne.n	8001942 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f937 	bl	8001b64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 020e 	orr.w	r2, r2, #14
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e00f      	b.n	8001930 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0204 	bic.w	r2, r2, #4
 800191e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 020a 	orr.w	r2, r2, #10
 800192e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e005      	b.n	800194e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800194a:	2302      	movs	r3, #2
 800194c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2204      	movs	r2, #4
 8001976:	409a      	lsls	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d04f      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xc8>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d04a      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0204 	bic.w	r2, r2, #4
 80019a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a66      	ldr	r2, [pc, #408]	; (8001b48 <HAL_DMA_IRQHandler+0x1f0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d029      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xae>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <HAL_DMA_IRQHandler+0x1f4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_IRQHandler+0xaa>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a63      	ldr	r2, [pc, #396]	; (8001b50 <HAL_DMA_IRQHandler+0x1f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01a      	beq.n	80019fc <HAL_DMA_IRQHandler+0xa4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a62      	ldr	r2, [pc, #392]	; (8001b54 <HAL_DMA_IRQHandler+0x1fc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d012      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x9e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <HAL_DMA_IRQHandler+0x200>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x98>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a5f      	ldr	r2, [pc, #380]	; (8001b5c <HAL_DMA_IRQHandler+0x204>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d102      	bne.n	80019ea <HAL_DMA_IRQHandler+0x92>
 80019e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019e8:	e00e      	b.n	8001a08 <HAL_DMA_IRQHandler+0xb0>
 80019ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019ee:	e00b      	b.n	8001a08 <HAL_DMA_IRQHandler+0xb0>
 80019f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019f4:	e008      	b.n	8001a08 <HAL_DMA_IRQHandler+0xb0>
 80019f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019fa:	e005      	b.n	8001a08 <HAL_DMA_IRQHandler+0xb0>
 80019fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a00:	e002      	b.n	8001a08 <HAL_DMA_IRQHandler+0xb0>
 8001a02:	2340      	movs	r3, #64	; 0x40
 8001a04:	e000      	b.n	8001a08 <HAL_DMA_IRQHandler+0xb0>
 8001a06:	2304      	movs	r3, #4
 8001a08:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_DMA_IRQHandler+0x208>)
 8001a0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8094 	beq.w	8001b3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a1e:	e08e      	b.n	8001b3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2202      	movs	r2, #2
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d056      	beq.n	8001ade <HAL_DMA_IRQHandler+0x186>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d051      	beq.n	8001ade <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10b      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 020a 	bic.w	r2, r2, #10
 8001a56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a38      	ldr	r2, [pc, #224]	; (8001b48 <HAL_DMA_IRQHandler+0x1f0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d029      	beq.n	8001abe <HAL_DMA_IRQHandler+0x166>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <HAL_DMA_IRQHandler+0x1f4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d022      	beq.n	8001aba <HAL_DMA_IRQHandler+0x162>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_DMA_IRQHandler+0x1f8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x15c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_DMA_IRQHandler+0x1fc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d012      	beq.n	8001aae <HAL_DMA_IRQHandler+0x156>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_DMA_IRQHandler+0x200>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x150>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <HAL_DMA_IRQHandler+0x204>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d102      	bne.n	8001aa2 <HAL_DMA_IRQHandler+0x14a>
 8001a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aa0:	e00e      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x168>
 8001aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa6:	e00b      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x168>
 8001aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aac:	e008      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x168>
 8001aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab2:	e005      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x168>
 8001ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab8:	e002      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x168>
 8001aba:	2320      	movs	r3, #32
 8001abc:	e000      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x168>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_DMA_IRQHandler+0x208>)
 8001ac2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d034      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001adc:	e02f      	b.n	8001b3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d028      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x1e8>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020e 	bic.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
    }
  }
  return;
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
}
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40020008 	.word	0x40020008
 8001b4c:	4002001c 	.word	0x4002001c
 8001b50:	40020030 	.word	0x40020030
 8001b54:	40020044 	.word	0x40020044
 8001b58:	40020058 	.word	0x40020058
 8001b5c:	4002006c 	.word	0x4002006c
 8001b60:	40020000 	.word	0x40020000

08001b64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d108      	bne.n	8001ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ba2:	e007      	b.n	8001bb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e169      	b.n	8001ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8158 	bne.w	8001ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	; (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001bfc:	4a98      	ldr	r2, [pc, #608]	; (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d875      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c02:	4a98      	ldr	r2, [pc, #608]	; (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d058      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c08:	4a96      	ldr	r2, [pc, #600]	; (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d86f      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c0e:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d052      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c14:	4a94      	ldr	r2, [pc, #592]	; (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d869      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c1a:	4a94      	ldr	r2, [pc, #592]	; (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d04c      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c20:	4a92      	ldr	r2, [pc, #584]	; (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d863      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c26:	4a92      	ldr	r2, [pc, #584]	; (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d046      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c2c:	4a90      	ldr	r2, [pc, #576]	; (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d85d      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d82a      	bhi.n	8001c8c <HAL_GPIO_Init+0xcc>
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d859      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <HAL_GPIO_Init+0x80>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001ca7 	.word	0x08001ca7
 8001c4c:	08001ce9 	.word	0x08001ce9
 8001c50:	08001cef 	.word	0x08001cef
 8001c54:	08001cef 	.word	0x08001cef
 8001c58:	08001cef 	.word	0x08001cef
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001cef 	.word	0x08001cef
 8001c64:	08001cef 	.word	0x08001cef
 8001c68:	08001cef 	.word	0x08001cef
 8001c6c:	08001cef 	.word	0x08001cef
 8001c70:	08001cef 	.word	0x08001cef
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cef 	.word	0x08001cef
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cef 	.word	0x08001cef
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cb1 	.word	0x08001cb1
 8001c8c:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <HAL_GPIO_Init+0x2b4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c92:	e02c      	b.n	8001cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e029      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e024      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	3308      	adds	r3, #8
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e01f      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e01a      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e013      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	611a      	str	r2, [r3, #16]
          break;
 8001cda:	e009      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	615a      	str	r2, [r3, #20]
          break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          break;
 8001cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d801      	bhi.n	8001cfa <HAL_GPIO_Init+0x13a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_Init+0x13e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d802      	bhi.n	8001d0c <HAL_GPIO_Init+0x14c>
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x152>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	210f      	movs	r1, #15
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80b1 	beq.w	8001ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d58:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <HAL_GPIO_Init+0x2c0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x1ec>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3f      	ldr	r2, [pc, #252]	; (8001e84 <HAL_GPIO_Init+0x2c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1e4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3d      	ldr	r2, [pc, #244]	; (8001e8c <HAL_GPIO_Init+0x2cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1e0>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001dac:	2300      	movs	r3, #0
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dbe:	492f      	ldr	r1, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	492c      	ldr	r1, [pc, #176]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4928      	ldr	r1, [pc, #160]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	491e      	ldr	r1, [pc, #120]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4914      	ldr	r1, [pc, #80]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d021      	beq.n	8001e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x2e2>
 8001e5e:	bf00      	nop
 8001e60:	10320000 	.word	0x10320000
 8001e64:	10310000 	.word	0x10310000
 8001e68:	10220000 	.word	0x10220000
 8001e6c:	10210000 	.word	0x10210000
 8001e70:	10120000 	.word	0x10120000
 8001e74:	10110000 	.word	0x10110000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4909      	ldr	r1, [pc, #36]	; (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ae8e 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	372c      	adds	r7, #44	; 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43d9      	mvns	r1, r3
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	400b      	ands	r3, r1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e272      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4c:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d00c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f58:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d112      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
 8001f64:	4b8c      	ldr	r3, [pc, #560]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d06c      	beq.n	8002058 <HAL_RCC_OscConfig+0x12c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d168      	bne.n	8002058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e24c      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x76>
 8001f94:	4b80      	ldr	r3, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e02e      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xbc>
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a71      	ldr	r2, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fab0 	bl	800156c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff faac 	bl	800156c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e200      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xe4>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fa9c 	bl	800156c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fa98 	bl	800156c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1ec      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x10c>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1c0      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4939      	ldr	r1, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fa51 	bl	800156c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7ff fa4d 	bl	800156c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1a1      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fa30 	bl	800156c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002110:	f7ff fa2c 	bl	800156c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e180      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03a      	beq.n	80021b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d019      	beq.n	8002176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7ff fa10 	bl	800156c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fa0c 	bl	800156c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e160      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216e:	2001      	movs	r0, #1
 8002170:	f000 face 	bl	8002710 <RCC_Delay>
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7ff f9f6 	bl	800156c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002182:	e00f      	b.n	80021a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff f9f2 	bl	800156c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d908      	bls.n	80021a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e146      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	42420000 	.word	0x42420000
 80021a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e9      	bne.n	8002184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a6 	beq.w	800230a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a87      	ldr	r2, [pc, #540]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b82      	ldr	r3, [pc, #520]	; (80023f4 <HAL_RCC_OscConfig+0x4c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x4c8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff f9b3 	bl	800156c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff f9af 	bl	800156c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e103      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4c8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x312>
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e02d      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002246:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a69      	ldr	r2, [pc, #420]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a66      	ldr	r2, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	e01c      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x356>
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7ff f963 	bl	800156c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff f95f 	bl	800156c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0b1      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <HAL_RCC_OscConfig+0x37e>
 80022cc:	e014      	b.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff f94d 	bl	800156c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff f949 	bl	800156c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e09b      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8087 	beq.w	8002422 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d061      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d146      	bne.n	80023b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_RCC_OscConfig+0x4cc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7ff f91d 	bl	800156c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7ff f919 	bl	800156c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e06d      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d108      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4921      	ldr	r1, [pc, #132]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a19      	ldr	r1, [r3, #32]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	430b      	orrs	r3, r1
 8002382:	491b      	ldr	r1, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x4cc>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff f8ed 	bl	800156c <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7ff f8e9 	bl	800156c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e03d      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x46a>
 80023b4:	e035      	b.n	8002422 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCC_OscConfig+0x4cc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7ff f8d6 	bl	800156c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff f8d2 	bl	800156c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e026      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x498>
 80023e2:	e01e      	b.n	8002422 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e019      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x500>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0d0      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4965      	ldr	r1, [pc, #404]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b8      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	494d      	ldr	r1, [pc, #308]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d040      	beq.n	8002550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e073      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06b      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250e:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f023 0203 	bic.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4936      	ldr	r1, [pc, #216]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002520:	f7ff f824 	bl	800156c <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	e00a      	b.n	800253e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002528:	f7ff f820 	bl	800156c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e053      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 020c 	and.w	r2, r3, #12
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	429a      	cmp	r2, r3
 800254e:	d1eb      	bne.n	8002528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d210      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 0207 	bic.w	r2, r3, #7
 8002566:	4922      	ldr	r1, [pc, #136]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e032      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4916      	ldr	r1, [pc, #88]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	490e      	ldr	r1, [pc, #56]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025be:	f000 f821 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	490a      	ldr	r1, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	5ccb      	ldrb	r3, [r1, r3]
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1cc>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe ff82 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08008b9c 	.word	0x08008b9c
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	20000010 	.word	0x20000010

08002604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_RCC_GetSysClockFreq+0x94>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b04      	cmp	r3, #4
 800262c:	d002      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x30>
 800262e:	2b08      	cmp	r3, #8
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x36>
 8002632:	e027      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_GetSysClockFreq+0x98>)
 8002636:	613b      	str	r3, [r7, #16]
      break;
 8002638:	e027      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0c9b      	lsrs	r3, r3, #18
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d010      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_GetSysClockFreq+0x94>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0c5b      	lsrs	r3, r3, #17
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_RCC_GetSysClockFreq+0x98>)
 8002666:	fb03 f202 	mul.w	r2, r3, r2
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e004      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	613b      	str	r3, [r7, #16]
      break;
 8002682:	e002      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetSysClockFreq+0x98>)
 8002686:	613b      	str	r3, [r7, #16]
      break;
 8002688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268a:	693b      	ldr	r3, [r7, #16]
}
 800268c:	4618      	mov	r0, r3
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	007a1200 	.word	0x007a1200
 80026a0:	08008bb4 	.word	0x08008bb4
 80026a4:	08008bc4 	.word	0x08008bc4
 80026a8:	003d0900 	.word	0x003d0900

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <HAL_RCC_GetHCLKFreq+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	2000000c 	.word	0x2000000c

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c4:	f7ff fff2 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08008bac 	.word	0x08008bac

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ec:	f7ff ffde 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	08008bac 	.word	0x08008bac

08002710 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <RCC_Delay+0x34>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <RCC_Delay+0x38>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0a5b      	lsrs	r3, r3, #9
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800272c:	bf00      	nop
  }
  while (Delay --);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	60fa      	str	r2, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f9      	bne.n	800272c <RCC_Delay+0x1c>
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	2000000c 	.word	0x2000000c
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e042      	b.n	80027e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fd16 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fcdf 	bl	8003154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	d16d      	bne.n	80028e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Transmit+0x2c>
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e066      	b.n	80028ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fe9f 	bl	800156c <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002860:	e02a      	b.n	80028b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fadf 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e036      	b.n	80028ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3302      	adds	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e007      	b.n	80028aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1cf      	bne.n	8002862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 faaf 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b09d      	sub	sp, #116	; 0x74
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b21      	cmp	r3, #33	; 0x21
 800291e:	d11c      	bne.n	800295a <HAL_UART_DMAPause+0x68>
 8002920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d019      	beq.n	800295a <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800293c:	66bb      	str	r3, [r7, #104]	; 0x68
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002946:	65ba      	str	r2, [r7, #88]	; 0x58
 8002948:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800294c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b22      	cmp	r3, #34	; 0x22
 800297a:	d150      	bne.n	8002a1e <HAL_UART_DMAPause+0x12c>
 800297c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04d      	beq.n	8002a1e <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002998:	667b      	str	r3, [r7, #100]	; 0x64
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029a2:	647a      	str	r2, [r7, #68]	; 0x44
 80029a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	623b      	str	r3, [r7, #32]
   return(result);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	663b      	str	r3, [r7, #96]	; 0x60
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029d6:	633a      	str	r2, [r7, #48]	; 0x30
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e5      	bne.n	80029b6 <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3314      	adds	r3, #20
 80029f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3314      	adds	r3, #20
 8002a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	e841 2300 	strex	r3, r2, [r1]
 8002a16:	617b      	str	r3, [r7, #20]
   return(result);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1e5      	bne.n	80029ea <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3774      	adds	r7, #116	; 0x74
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b09d      	sub	sp, #116	; 0x74
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b21      	cmp	r3, #33	; 0x21
 8002a3c:	d119      	bne.n	8002a72 <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a60:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e5      	bne.n	8002a3e <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b22      	cmp	r3, #34	; 0x22
 8002a7c:	d15c      	bne.n	8002b38 <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d019      	beq.n	8002ad0 <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002abc:	64ba      	str	r2, [r7, #72]	; 0x48
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e5      	bne.n	8002a9c <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3314      	adds	r3, #20
 8002aee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002af0:	637a      	str	r2, [r7, #52]	; 0x34
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3314      	adds	r3, #20
 8002b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	613b      	str	r3, [r7, #16]
   return(result);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b24:	623a      	str	r2, [r7, #32]
 8002b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69f9      	ldr	r1, [r7, #28]
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3774      	adds	r7, #116	; 0x74
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	; 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d14a      	bne.n	8002bf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e043      	b.n	8002bf6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f9c3 	bl	8002f0c <UART_Start_Receive_DMA>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d12c      	bne.n	8002bee <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d125      	bne.n	8002be8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f043 0310 	orr.w	r3, r3, #16
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8002bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6a39      	ldr	r1, [r7, #32]
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002be6:	e002      	b.n	8002bee <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bf2:	e000      	b.n	8002bf6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3730      	adds	r7, #48	; 0x30
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b09c      	sub	sp, #112	; 0x70
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d172      	bne.n	8002d36 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	2200      	movs	r2, #0
 8002c54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e5      	bne.n	8002c56 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3314      	adds	r3, #20
 8002c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002caa:	647a      	str	r2, [r7, #68]	; 0x44
 8002cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cde:	633a      	str	r2, [r7, #48]	; 0x30
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e5      	bne.n	8002cbe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d119      	bne.n	8002d36 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f023 0310 	bic.w	r3, r3, #16
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d22:	61fa      	str	r2, [r7, #28]
 8002d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	69b9      	ldr	r1, [r7, #24]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d4c:	f7fd ff44 	bl	8000bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d50:	e002      	b.n	8002d58 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002d52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d54:	f7ff ff53 	bl	8002bfe <HAL_UART_RxCpltCallback>
}
 8002d58:	bf00      	nop
 8002d5a:	3770      	adds	r7, #112	; 0x70
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d108      	bne.n	8002d8e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7fd ff26 	bl	8000bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d8c:	e002      	b.n	8002d94 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff ff3e 	bl	8002c10 <HAL_UART_RxHalfCpltCallback>
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b21      	cmp	r3, #33	; 0x21
 8002dce:	d108      	bne.n	8002de2 <UART_DMAError+0x46>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ddc:	68b8      	ldr	r0, [r7, #8]
 8002dde:	f000 f92f 	bl	8003040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b22      	cmp	r3, #34	; 0x22
 8002e02:	d108      	bne.n	8002e16 <UART_DMAError+0x7a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	f000 f93c 	bl	800308e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e22:	68b8      	ldr	r0, [r7, #8]
 8002e24:	f7ff fefd 	bl	8002c22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b090      	sub	sp, #64	; 0x40
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	e050      	b.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d04c      	beq.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e50:	f7fe fb8c 	bl	800156c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d241      	bcs.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	330c      	adds	r3, #12
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e80:	637a      	str	r2, [r7, #52]	; 0x34
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e5      	bne.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3314      	adds	r3, #20
 8002e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb4:	623a      	str	r2, [r7, #32]
 8002eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	69f9      	ldr	r1, [r7, #28]
 8002eba:	6a3a      	ldr	r2, [r7, #32]
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e00f      	b.n	8002f04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d09f      	beq.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3740      	adds	r7, #64	; 0x40
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b098      	sub	sp, #96	; 0x60
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2222      	movs	r2, #34	; 0x22
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	4a3e      	ldr	r2, [pc, #248]	; (8003034 <UART_Start_Receive_DMA+0x128>)
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <UART_Start_Receive_DMA+0x12c>)
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	4a3c      	ldr	r2, [pc, #240]	; (800303c <UART_Start_Receive_DMA+0x130>)
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	f7fe fc94 	bl	8001898 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d019      	beq.n	8002fc2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fae:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e5      	bne.n	8002f8e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	657b      	str	r3, [r7, #84]	; 0x54
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fe2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	617b      	str	r3, [r7, #20]
   return(result);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800300c:	653b      	str	r3, [r7, #80]	; 0x50
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003016:	627a      	str	r2, [r7, #36]	; 0x24
 8003018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6a39      	ldr	r1, [r7, #32]
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	61fb      	str	r3, [r7, #28]
   return(result);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e5      	bne.n	8002ff6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3760      	adds	r7, #96	; 0x60
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	08002c35 	.word	0x08002c35
 8003038:	08002d61 	.word	0x08002d61
 800303c:	08002d9d 	.word	0x08002d9d

08003040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	60bb      	str	r3, [r7, #8]
   return(result);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	61ba      	str	r2, [r7, #24]
 800306a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6979      	ldr	r1, [r7, #20]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	613b      	str	r3, [r7, #16]
   return(result);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e5      	bne.n	8003048 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003084:	bf00      	nop
 8003086:	3724      	adds	r7, #36	; 0x24
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800308e:	b480      	push	{r7}
 8003090:	b095      	sub	sp, #84	; 0x54
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b6:	643a      	str	r2, [r7, #64]	; 0x40
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e5      	bne.n	8003096 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	2b01      	cmp	r3, #1
 8003104:	d119      	bne.n	800313a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	60bb      	str	r3, [r7, #8]
   return(result);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0310 	bic.w	r3, r3, #16
 800311c:	647b      	str	r3, [r7, #68]	; 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003126:	61ba      	str	r2, [r7, #24]
 8003128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	613b      	str	r3, [r7, #16]
   return(result);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003148:	bf00      	nop
 800314a:	3754      	adds	r7, #84	; 0x54
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
	...

08003154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800318e:	f023 030c 	bic.w	r3, r3, #12
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	430b      	orrs	r3, r1
 800319a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <UART_SetConfig+0x114>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d103      	bne.n	80031c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff fa94 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	e002      	b.n	80031ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff fa7c 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009a      	lsls	r2, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	4a22      	ldr	r2, [pc, #136]	; (800326c <UART_SetConfig+0x118>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	0119      	lsls	r1, r3, #4
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <UART_SetConfig+0x118>)
 8003202:	fba3 0302 	umull	r0, r3, r3, r2
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2064      	movs	r0, #100	; 0x64
 800320a:	fb00 f303 	mul.w	r3, r0, r3
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	3332      	adds	r3, #50	; 0x32
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <UART_SetConfig+0x118>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003220:	4419      	add	r1, r3
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009a      	lsls	r2, r3, #2
 800322c:	441a      	add	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fbb2 f2f3 	udiv	r2, r2, r3
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <UART_SetConfig+0x118>)
 800323a:	fba3 0302 	umull	r0, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2064      	movs	r0, #100	; 0x64
 8003242:	fb00 f303 	mul.w	r3, r0, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	3332      	adds	r3, #50	; 0x32
 800324c:	4a07      	ldr	r2, [pc, #28]	; (800326c <UART_SetConfig+0x118>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	440a      	add	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40013800 	.word	0x40013800
 800326c:	51eb851f 	.word	0x51eb851f

08003270 <__errno>:
 8003270:	4b01      	ldr	r3, [pc, #4]	; (8003278 <__errno+0x8>)
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000018 	.word	0x20000018

0800327c <__libc_init_array>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	2600      	movs	r6, #0
 8003280:	4d0c      	ldr	r5, [pc, #48]	; (80032b4 <__libc_init_array+0x38>)
 8003282:	4c0d      	ldr	r4, [pc, #52]	; (80032b8 <__libc_init_array+0x3c>)
 8003284:	1b64      	subs	r4, r4, r5
 8003286:	10a4      	asrs	r4, r4, #2
 8003288:	42a6      	cmp	r6, r4
 800328a:	d109      	bne.n	80032a0 <__libc_init_array+0x24>
 800328c:	f005 f894 	bl	80083b8 <_init>
 8003290:	2600      	movs	r6, #0
 8003292:	4d0a      	ldr	r5, [pc, #40]	; (80032bc <__libc_init_array+0x40>)
 8003294:	4c0a      	ldr	r4, [pc, #40]	; (80032c0 <__libc_init_array+0x44>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	42a6      	cmp	r6, r4
 800329c:	d105      	bne.n	80032aa <__libc_init_array+0x2e>
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a4:	4798      	blx	r3
 80032a6:	3601      	adds	r6, #1
 80032a8:	e7ee      	b.n	8003288 <__libc_init_array+0xc>
 80032aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ae:	4798      	blx	r3
 80032b0:	3601      	adds	r6, #1
 80032b2:	e7f2      	b.n	800329a <__libc_init_array+0x1e>
 80032b4:	08009084 	.word	0x08009084
 80032b8:	08009084 	.word	0x08009084
 80032bc:	08009084 	.word	0x08009084
 80032c0:	08009088 	.word	0x08009088

080032c4 <memcmp>:
 80032c4:	b510      	push	{r4, lr}
 80032c6:	3901      	subs	r1, #1
 80032c8:	4402      	add	r2, r0
 80032ca:	4290      	cmp	r0, r2
 80032cc:	d101      	bne.n	80032d2 <memcmp+0xe>
 80032ce:	2000      	movs	r0, #0
 80032d0:	e005      	b.n	80032de <memcmp+0x1a>
 80032d2:	7803      	ldrb	r3, [r0, #0]
 80032d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d001      	beq.n	80032e0 <memcmp+0x1c>
 80032dc:	1b18      	subs	r0, r3, r4
 80032de:	bd10      	pop	{r4, pc}
 80032e0:	3001      	adds	r0, #1
 80032e2:	e7f2      	b.n	80032ca <memcmp+0x6>

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <__cvt>:
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032fa:	461f      	mov	r7, r3
 80032fc:	bfbb      	ittet	lt
 80032fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003302:	461f      	movlt	r7, r3
 8003304:	2300      	movge	r3, #0
 8003306:	232d      	movlt	r3, #45	; 0x2d
 8003308:	b088      	sub	sp, #32
 800330a:	4614      	mov	r4, r2
 800330c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800330e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003310:	7013      	strb	r3, [r2, #0]
 8003312:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003314:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003318:	f023 0820 	bic.w	r8, r3, #32
 800331c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003320:	d005      	beq.n	800332e <__cvt+0x3a>
 8003322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003326:	d100      	bne.n	800332a <__cvt+0x36>
 8003328:	3501      	adds	r5, #1
 800332a:	2302      	movs	r3, #2
 800332c:	e000      	b.n	8003330 <__cvt+0x3c>
 800332e:	2303      	movs	r3, #3
 8003330:	aa07      	add	r2, sp, #28
 8003332:	9204      	str	r2, [sp, #16]
 8003334:	aa06      	add	r2, sp, #24
 8003336:	e9cd a202 	strd	sl, r2, [sp, #8]
 800333a:	e9cd 3500 	strd	r3, r5, [sp]
 800333e:	4622      	mov	r2, r4
 8003340:	463b      	mov	r3, r7
 8003342:	f001 fe15 	bl	8004f70 <_dtoa_r>
 8003346:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800334a:	4606      	mov	r6, r0
 800334c:	d102      	bne.n	8003354 <__cvt+0x60>
 800334e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003350:	07db      	lsls	r3, r3, #31
 8003352:	d522      	bpl.n	800339a <__cvt+0xa6>
 8003354:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003358:	eb06 0905 	add.w	r9, r6, r5
 800335c:	d110      	bne.n	8003380 <__cvt+0x8c>
 800335e:	7833      	ldrb	r3, [r6, #0]
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d10a      	bne.n	800337a <__cvt+0x86>
 8003364:	2200      	movs	r2, #0
 8003366:	2300      	movs	r3, #0
 8003368:	4620      	mov	r0, r4
 800336a:	4639      	mov	r1, r7
 800336c:	f7fd fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8003370:	b918      	cbnz	r0, 800337a <__cvt+0x86>
 8003372:	f1c5 0501 	rsb	r5, r5, #1
 8003376:	f8ca 5000 	str.w	r5, [sl]
 800337a:	f8da 3000 	ldr.w	r3, [sl]
 800337e:	4499      	add	r9, r3
 8003380:	2200      	movs	r2, #0
 8003382:	2300      	movs	r3, #0
 8003384:	4620      	mov	r0, r4
 8003386:	4639      	mov	r1, r7
 8003388:	f7fd fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800338c:	b108      	cbz	r0, 8003392 <__cvt+0x9e>
 800338e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003392:	2230      	movs	r2, #48	; 0x30
 8003394:	9b07      	ldr	r3, [sp, #28]
 8003396:	454b      	cmp	r3, r9
 8003398:	d307      	bcc.n	80033aa <__cvt+0xb6>
 800339a:	4630      	mov	r0, r6
 800339c:	9b07      	ldr	r3, [sp, #28]
 800339e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033a0:	1b9b      	subs	r3, r3, r6
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	b008      	add	sp, #32
 80033a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	9107      	str	r1, [sp, #28]
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e7f0      	b.n	8003394 <__cvt+0xa0>

080033b2 <__exponent>:
 80033b2:	4603      	mov	r3, r0
 80033b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b6:	2900      	cmp	r1, #0
 80033b8:	f803 2b02 	strb.w	r2, [r3], #2
 80033bc:	bfb6      	itet	lt
 80033be:	222d      	movlt	r2, #45	; 0x2d
 80033c0:	222b      	movge	r2, #43	; 0x2b
 80033c2:	4249      	neglt	r1, r1
 80033c4:	2909      	cmp	r1, #9
 80033c6:	7042      	strb	r2, [r0, #1]
 80033c8:	dd2b      	ble.n	8003422 <__exponent+0x70>
 80033ca:	f10d 0407 	add.w	r4, sp, #7
 80033ce:	46a4      	mov	ip, r4
 80033d0:	270a      	movs	r7, #10
 80033d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80033d6:	460a      	mov	r2, r1
 80033d8:	46a6      	mov	lr, r4
 80033da:	fb07 1516 	mls	r5, r7, r6, r1
 80033de:	2a63      	cmp	r2, #99	; 0x63
 80033e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80033e4:	4631      	mov	r1, r6
 80033e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80033ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80033ee:	dcf0      	bgt.n	80033d2 <__exponent+0x20>
 80033f0:	3130      	adds	r1, #48	; 0x30
 80033f2:	f1ae 0502 	sub.w	r5, lr, #2
 80033f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80033fa:	4629      	mov	r1, r5
 80033fc:	1c44      	adds	r4, r0, #1
 80033fe:	4561      	cmp	r1, ip
 8003400:	d30a      	bcc.n	8003418 <__exponent+0x66>
 8003402:	f10d 0209 	add.w	r2, sp, #9
 8003406:	eba2 020e 	sub.w	r2, r2, lr
 800340a:	4565      	cmp	r5, ip
 800340c:	bf88      	it	hi
 800340e:	2200      	movhi	r2, #0
 8003410:	4413      	add	r3, r2
 8003412:	1a18      	subs	r0, r3, r0
 8003414:	b003      	add	sp, #12
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	f811 2b01 	ldrb.w	r2, [r1], #1
 800341c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003420:	e7ed      	b.n	80033fe <__exponent+0x4c>
 8003422:	2330      	movs	r3, #48	; 0x30
 8003424:	3130      	adds	r1, #48	; 0x30
 8003426:	7083      	strb	r3, [r0, #2]
 8003428:	70c1      	strb	r1, [r0, #3]
 800342a:	1d03      	adds	r3, r0, #4
 800342c:	e7f1      	b.n	8003412 <__exponent+0x60>
	...

08003430 <_printf_float>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	b091      	sub	sp, #68	; 0x44
 8003436:	460c      	mov	r4, r1
 8003438:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800343c:	4616      	mov	r6, r2
 800343e:	461f      	mov	r7, r3
 8003440:	4605      	mov	r5, r0
 8003442:	f002 fee9 	bl	8006218 <_localeconv_r>
 8003446:	6803      	ldr	r3, [r0, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	9309      	str	r3, [sp, #36]	; 0x24
 800344c:	f7fc fe80 	bl	8000150 <strlen>
 8003450:	2300      	movs	r3, #0
 8003452:	930e      	str	r3, [sp, #56]	; 0x38
 8003454:	f8d8 3000 	ldr.w	r3, [r8]
 8003458:	900a      	str	r0, [sp, #40]	; 0x28
 800345a:	3307      	adds	r3, #7
 800345c:	f023 0307 	bic.w	r3, r3, #7
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003468:	f8d4 b000 	ldr.w	fp, [r4]
 800346c:	f8c8 2000 	str.w	r2, [r8]
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003478:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800347c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003480:	930b      	str	r3, [sp, #44]	; 0x2c
 8003482:	f04f 32ff 	mov.w	r2, #4294967295
 8003486:	4640      	mov	r0, r8
 8003488:	4b9c      	ldr	r3, [pc, #624]	; (80036fc <_printf_float+0x2cc>)
 800348a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800348c:	f7fd fabe 	bl	8000a0c <__aeabi_dcmpun>
 8003490:	bb70      	cbnz	r0, 80034f0 <_printf_float+0xc0>
 8003492:	f04f 32ff 	mov.w	r2, #4294967295
 8003496:	4640      	mov	r0, r8
 8003498:	4b98      	ldr	r3, [pc, #608]	; (80036fc <_printf_float+0x2cc>)
 800349a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800349c:	f7fd fa98 	bl	80009d0 <__aeabi_dcmple>
 80034a0:	bb30      	cbnz	r0, 80034f0 <_printf_float+0xc0>
 80034a2:	2200      	movs	r2, #0
 80034a4:	2300      	movs	r3, #0
 80034a6:	4640      	mov	r0, r8
 80034a8:	4651      	mov	r1, sl
 80034aa:	f7fd fa87 	bl	80009bc <__aeabi_dcmplt>
 80034ae:	b110      	cbz	r0, 80034b6 <_printf_float+0x86>
 80034b0:	232d      	movs	r3, #45	; 0x2d
 80034b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b6:	4b92      	ldr	r3, [pc, #584]	; (8003700 <_printf_float+0x2d0>)
 80034b8:	4892      	ldr	r0, [pc, #584]	; (8003704 <_printf_float+0x2d4>)
 80034ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034be:	bf94      	ite	ls
 80034c0:	4698      	movls	r8, r3
 80034c2:	4680      	movhi	r8, r0
 80034c4:	2303      	movs	r3, #3
 80034c6:	f04f 0a00 	mov.w	sl, #0
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	f02b 0304 	bic.w	r3, fp, #4
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	4633      	mov	r3, r6
 80034d4:	4621      	mov	r1, r4
 80034d6:	4628      	mov	r0, r5
 80034d8:	9700      	str	r7, [sp, #0]
 80034da:	aa0f      	add	r2, sp, #60	; 0x3c
 80034dc:	f000 f9d4 	bl	8003888 <_printf_common>
 80034e0:	3001      	adds	r0, #1
 80034e2:	f040 8090 	bne.w	8003606 <_printf_float+0x1d6>
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	b011      	add	sp, #68	; 0x44
 80034ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f0:	4642      	mov	r2, r8
 80034f2:	4653      	mov	r3, sl
 80034f4:	4640      	mov	r0, r8
 80034f6:	4651      	mov	r1, sl
 80034f8:	f7fd fa88 	bl	8000a0c <__aeabi_dcmpun>
 80034fc:	b148      	cbz	r0, 8003512 <_printf_float+0xe2>
 80034fe:	f1ba 0f00 	cmp.w	sl, #0
 8003502:	bfb8      	it	lt
 8003504:	232d      	movlt	r3, #45	; 0x2d
 8003506:	4880      	ldr	r0, [pc, #512]	; (8003708 <_printf_float+0x2d8>)
 8003508:	bfb8      	it	lt
 800350a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800350e:	4b7f      	ldr	r3, [pc, #508]	; (800370c <_printf_float+0x2dc>)
 8003510:	e7d3      	b.n	80034ba <_printf_float+0x8a>
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	d142      	bne.n	80035a2 <_printf_float+0x172>
 800351c:	2306      	movs	r3, #6
 800351e:	6063      	str	r3, [r4, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	9206      	str	r2, [sp, #24]
 8003524:	aa0e      	add	r2, sp, #56	; 0x38
 8003526:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800352a:	aa0d      	add	r2, sp, #52	; 0x34
 800352c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003530:	9203      	str	r2, [sp, #12]
 8003532:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003536:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	6863      	ldr	r3, [r4, #4]
 800353e:	4642      	mov	r2, r8
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4628      	mov	r0, r5
 8003544:	4653      	mov	r3, sl
 8003546:	910b      	str	r1, [sp, #44]	; 0x2c
 8003548:	f7ff fed4 	bl	80032f4 <__cvt>
 800354c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800354e:	4680      	mov	r8, r0
 8003550:	2947      	cmp	r1, #71	; 0x47
 8003552:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003554:	d108      	bne.n	8003568 <_printf_float+0x138>
 8003556:	1cc8      	adds	r0, r1, #3
 8003558:	db02      	blt.n	8003560 <_printf_float+0x130>
 800355a:	6863      	ldr	r3, [r4, #4]
 800355c:	4299      	cmp	r1, r3
 800355e:	dd40      	ble.n	80035e2 <_printf_float+0x1b2>
 8003560:	f1a9 0902 	sub.w	r9, r9, #2
 8003564:	fa5f f989 	uxtb.w	r9, r9
 8003568:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800356c:	d81f      	bhi.n	80035ae <_printf_float+0x17e>
 800356e:	464a      	mov	r2, r9
 8003570:	3901      	subs	r1, #1
 8003572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003576:	910d      	str	r1, [sp, #52]	; 0x34
 8003578:	f7ff ff1b 	bl	80033b2 <__exponent>
 800357c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800357e:	4682      	mov	sl, r0
 8003580:	1813      	adds	r3, r2, r0
 8003582:	2a01      	cmp	r2, #1
 8003584:	6123      	str	r3, [r4, #16]
 8003586:	dc02      	bgt.n	800358e <_printf_float+0x15e>
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	07d2      	lsls	r2, r2, #31
 800358c:	d501      	bpl.n	8003592 <_printf_float+0x162>
 800358e:	3301      	adds	r3, #1
 8003590:	6123      	str	r3, [r4, #16]
 8003592:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003596:	2b00      	cmp	r3, #0
 8003598:	d09b      	beq.n	80034d2 <_printf_float+0xa2>
 800359a:	232d      	movs	r3, #45	; 0x2d
 800359c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a0:	e797      	b.n	80034d2 <_printf_float+0xa2>
 80035a2:	2947      	cmp	r1, #71	; 0x47
 80035a4:	d1bc      	bne.n	8003520 <_printf_float+0xf0>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ba      	bne.n	8003520 <_printf_float+0xf0>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e7b7      	b.n	800351e <_printf_float+0xee>
 80035ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035b2:	d118      	bne.n	80035e6 <_printf_float+0x1b6>
 80035b4:	2900      	cmp	r1, #0
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	dd0b      	ble.n	80035d2 <_printf_float+0x1a2>
 80035ba:	6121      	str	r1, [r4, #16]
 80035bc:	b913      	cbnz	r3, 80035c4 <_printf_float+0x194>
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	07d0      	lsls	r0, r2, #31
 80035c2:	d502      	bpl.n	80035ca <_printf_float+0x19a>
 80035c4:	3301      	adds	r3, #1
 80035c6:	440b      	add	r3, r1
 80035c8:	6123      	str	r3, [r4, #16]
 80035ca:	f04f 0a00 	mov.w	sl, #0
 80035ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80035d0:	e7df      	b.n	8003592 <_printf_float+0x162>
 80035d2:	b913      	cbnz	r3, 80035da <_printf_float+0x1aa>
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	07d2      	lsls	r2, r2, #31
 80035d8:	d501      	bpl.n	80035de <_printf_float+0x1ae>
 80035da:	3302      	adds	r3, #2
 80035dc:	e7f4      	b.n	80035c8 <_printf_float+0x198>
 80035de:	2301      	movs	r3, #1
 80035e0:	e7f2      	b.n	80035c8 <_printf_float+0x198>
 80035e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80035e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035e8:	4299      	cmp	r1, r3
 80035ea:	db05      	blt.n	80035f8 <_printf_float+0x1c8>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	6121      	str	r1, [r4, #16]
 80035f0:	07d8      	lsls	r0, r3, #31
 80035f2:	d5ea      	bpl.n	80035ca <_printf_float+0x19a>
 80035f4:	1c4b      	adds	r3, r1, #1
 80035f6:	e7e7      	b.n	80035c8 <_printf_float+0x198>
 80035f8:	2900      	cmp	r1, #0
 80035fa:	bfcc      	ite	gt
 80035fc:	2201      	movgt	r2, #1
 80035fe:	f1c1 0202 	rsble	r2, r1, #2
 8003602:	4413      	add	r3, r2
 8003604:	e7e0      	b.n	80035c8 <_printf_float+0x198>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	055a      	lsls	r2, r3, #21
 800360a:	d407      	bmi.n	800361c <_printf_float+0x1ec>
 800360c:	6923      	ldr	r3, [r4, #16]
 800360e:	4642      	mov	r2, r8
 8003610:	4631      	mov	r1, r6
 8003612:	4628      	mov	r0, r5
 8003614:	47b8      	blx	r7
 8003616:	3001      	adds	r0, #1
 8003618:	d12b      	bne.n	8003672 <_printf_float+0x242>
 800361a:	e764      	b.n	80034e6 <_printf_float+0xb6>
 800361c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003620:	f240 80dd 	bls.w	80037de <_printf_float+0x3ae>
 8003624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003628:	2200      	movs	r2, #0
 800362a:	2300      	movs	r3, #0
 800362c:	f7fd f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8003630:	2800      	cmp	r0, #0
 8003632:	d033      	beq.n	800369c <_printf_float+0x26c>
 8003634:	2301      	movs	r3, #1
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	4a35      	ldr	r2, [pc, #212]	; (8003710 <_printf_float+0x2e0>)
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af51 	beq.w	80034e6 <_printf_float+0xb6>
 8003644:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003648:	429a      	cmp	r2, r3
 800364a:	db02      	blt.n	8003652 <_printf_float+0x222>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	07d8      	lsls	r0, r3, #31
 8003650:	d50f      	bpl.n	8003672 <_printf_float+0x242>
 8003652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003656:	4631      	mov	r1, r6
 8003658:	4628      	mov	r0, r5
 800365a:	47b8      	blx	r7
 800365c:	3001      	adds	r0, #1
 800365e:	f43f af42 	beq.w	80034e6 <_printf_float+0xb6>
 8003662:	f04f 0800 	mov.w	r8, #0
 8003666:	f104 091a 	add.w	r9, r4, #26
 800366a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800366c:	3b01      	subs	r3, #1
 800366e:	4543      	cmp	r3, r8
 8003670:	dc09      	bgt.n	8003686 <_printf_float+0x256>
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	079b      	lsls	r3, r3, #30
 8003676:	f100 8102 	bmi.w	800387e <_printf_float+0x44e>
 800367a:	68e0      	ldr	r0, [r4, #12]
 800367c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800367e:	4298      	cmp	r0, r3
 8003680:	bfb8      	it	lt
 8003682:	4618      	movlt	r0, r3
 8003684:	e731      	b.n	80034ea <_printf_float+0xba>
 8003686:	2301      	movs	r3, #1
 8003688:	464a      	mov	r2, r9
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	f43f af28 	beq.w	80034e6 <_printf_float+0xb6>
 8003696:	f108 0801 	add.w	r8, r8, #1
 800369a:	e7e6      	b.n	800366a <_printf_float+0x23a>
 800369c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dc38      	bgt.n	8003714 <_printf_float+0x2e4>
 80036a2:	2301      	movs	r3, #1
 80036a4:	4631      	mov	r1, r6
 80036a6:	4628      	mov	r0, r5
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <_printf_float+0x2e0>)
 80036aa:	47b8      	blx	r7
 80036ac:	3001      	adds	r0, #1
 80036ae:	f43f af1a 	beq.w	80034e6 <_printf_float+0xb6>
 80036b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036b6:	4313      	orrs	r3, r2
 80036b8:	d102      	bne.n	80036c0 <_printf_float+0x290>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	07d9      	lsls	r1, r3, #31
 80036be:	d5d8      	bpl.n	8003672 <_printf_float+0x242>
 80036c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036c4:	4631      	mov	r1, r6
 80036c6:	4628      	mov	r0, r5
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f af0b 	beq.w	80034e6 <_printf_float+0xb6>
 80036d0:	f04f 0900 	mov.w	r9, #0
 80036d4:	f104 0a1a 	add.w	sl, r4, #26
 80036d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036da:	425b      	negs	r3, r3
 80036dc:	454b      	cmp	r3, r9
 80036de:	dc01      	bgt.n	80036e4 <_printf_float+0x2b4>
 80036e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036e2:	e794      	b.n	800360e <_printf_float+0x1de>
 80036e4:	2301      	movs	r3, #1
 80036e6:	4652      	mov	r2, sl
 80036e8:	4631      	mov	r1, r6
 80036ea:	4628      	mov	r0, r5
 80036ec:	47b8      	blx	r7
 80036ee:	3001      	adds	r0, #1
 80036f0:	f43f aef9 	beq.w	80034e6 <_printf_float+0xb6>
 80036f4:	f109 0901 	add.w	r9, r9, #1
 80036f8:	e7ee      	b.n	80036d8 <_printf_float+0x2a8>
 80036fa:	bf00      	nop
 80036fc:	7fefffff 	.word	0x7fefffff
 8003700:	08008bcc 	.word	0x08008bcc
 8003704:	08008bd0 	.word	0x08008bd0
 8003708:	08008bd8 	.word	0x08008bd8
 800370c:	08008bd4 	.word	0x08008bd4
 8003710:	08008fd1 	.word	0x08008fd1
 8003714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003718:	429a      	cmp	r2, r3
 800371a:	bfa8      	it	ge
 800371c:	461a      	movge	r2, r3
 800371e:	2a00      	cmp	r2, #0
 8003720:	4691      	mov	r9, r2
 8003722:	dc37      	bgt.n	8003794 <_printf_float+0x364>
 8003724:	f04f 0b00 	mov.w	fp, #0
 8003728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800372c:	f104 021a 	add.w	r2, r4, #26
 8003730:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003734:	ebaa 0309 	sub.w	r3, sl, r9
 8003738:	455b      	cmp	r3, fp
 800373a:	dc33      	bgt.n	80037a4 <_printf_float+0x374>
 800373c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003740:	429a      	cmp	r2, r3
 8003742:	db3b      	blt.n	80037bc <_printf_float+0x38c>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	07da      	lsls	r2, r3, #31
 8003748:	d438      	bmi.n	80037bc <_printf_float+0x38c>
 800374a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800374c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800374e:	eba3 020a 	sub.w	r2, r3, sl
 8003752:	eba3 0901 	sub.w	r9, r3, r1
 8003756:	4591      	cmp	r9, r2
 8003758:	bfa8      	it	ge
 800375a:	4691      	movge	r9, r2
 800375c:	f1b9 0f00 	cmp.w	r9, #0
 8003760:	dc34      	bgt.n	80037cc <_printf_float+0x39c>
 8003762:	f04f 0800 	mov.w	r8, #0
 8003766:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800376a:	f104 0a1a 	add.w	sl, r4, #26
 800376e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	eba3 0309 	sub.w	r3, r3, r9
 8003778:	4543      	cmp	r3, r8
 800377a:	f77f af7a 	ble.w	8003672 <_printf_float+0x242>
 800377e:	2301      	movs	r3, #1
 8003780:	4652      	mov	r2, sl
 8003782:	4631      	mov	r1, r6
 8003784:	4628      	mov	r0, r5
 8003786:	47b8      	blx	r7
 8003788:	3001      	adds	r0, #1
 800378a:	f43f aeac 	beq.w	80034e6 <_printf_float+0xb6>
 800378e:	f108 0801 	add.w	r8, r8, #1
 8003792:	e7ec      	b.n	800376e <_printf_float+0x33e>
 8003794:	4613      	mov	r3, r2
 8003796:	4631      	mov	r1, r6
 8003798:	4642      	mov	r2, r8
 800379a:	4628      	mov	r0, r5
 800379c:	47b8      	blx	r7
 800379e:	3001      	adds	r0, #1
 80037a0:	d1c0      	bne.n	8003724 <_printf_float+0x2f4>
 80037a2:	e6a0      	b.n	80034e6 <_printf_float+0xb6>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4631      	mov	r1, r6
 80037a8:	4628      	mov	r0, r5
 80037aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80037ac:	47b8      	blx	r7
 80037ae:	3001      	adds	r0, #1
 80037b0:	f43f ae99 	beq.w	80034e6 <_printf_float+0xb6>
 80037b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037b6:	f10b 0b01 	add.w	fp, fp, #1
 80037ba:	e7b9      	b.n	8003730 <_printf_float+0x300>
 80037bc:	4631      	mov	r1, r6
 80037be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037c2:	4628      	mov	r0, r5
 80037c4:	47b8      	blx	r7
 80037c6:	3001      	adds	r0, #1
 80037c8:	d1bf      	bne.n	800374a <_printf_float+0x31a>
 80037ca:	e68c      	b.n	80034e6 <_printf_float+0xb6>
 80037cc:	464b      	mov	r3, r9
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	eb08 020a 	add.w	r2, r8, sl
 80037d6:	47b8      	blx	r7
 80037d8:	3001      	adds	r0, #1
 80037da:	d1c2      	bne.n	8003762 <_printf_float+0x332>
 80037dc:	e683      	b.n	80034e6 <_printf_float+0xb6>
 80037de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037e0:	2a01      	cmp	r2, #1
 80037e2:	dc01      	bgt.n	80037e8 <_printf_float+0x3b8>
 80037e4:	07db      	lsls	r3, r3, #31
 80037e6:	d537      	bpl.n	8003858 <_printf_float+0x428>
 80037e8:	2301      	movs	r3, #1
 80037ea:	4642      	mov	r2, r8
 80037ec:	4631      	mov	r1, r6
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	f43f ae77 	beq.w	80034e6 <_printf_float+0xb6>
 80037f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037fc:	4631      	mov	r1, r6
 80037fe:	4628      	mov	r0, r5
 8003800:	47b8      	blx	r7
 8003802:	3001      	adds	r0, #1
 8003804:	f43f ae6f 	beq.w	80034e6 <_printf_float+0xb6>
 8003808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800380c:	2200      	movs	r2, #0
 800380e:	2300      	movs	r3, #0
 8003810:	f7fd f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8003814:	b9d8      	cbnz	r0, 800384e <_printf_float+0x41e>
 8003816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003818:	f108 0201 	add.w	r2, r8, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	4631      	mov	r1, r6
 8003820:	4628      	mov	r0, r5
 8003822:	47b8      	blx	r7
 8003824:	3001      	adds	r0, #1
 8003826:	d10e      	bne.n	8003846 <_printf_float+0x416>
 8003828:	e65d      	b.n	80034e6 <_printf_float+0xb6>
 800382a:	2301      	movs	r3, #1
 800382c:	464a      	mov	r2, r9
 800382e:	4631      	mov	r1, r6
 8003830:	4628      	mov	r0, r5
 8003832:	47b8      	blx	r7
 8003834:	3001      	adds	r0, #1
 8003836:	f43f ae56 	beq.w	80034e6 <_printf_float+0xb6>
 800383a:	f108 0801 	add.w	r8, r8, #1
 800383e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003840:	3b01      	subs	r3, #1
 8003842:	4543      	cmp	r3, r8
 8003844:	dcf1      	bgt.n	800382a <_printf_float+0x3fa>
 8003846:	4653      	mov	r3, sl
 8003848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800384c:	e6e0      	b.n	8003610 <_printf_float+0x1e0>
 800384e:	f04f 0800 	mov.w	r8, #0
 8003852:	f104 091a 	add.w	r9, r4, #26
 8003856:	e7f2      	b.n	800383e <_printf_float+0x40e>
 8003858:	2301      	movs	r3, #1
 800385a:	4642      	mov	r2, r8
 800385c:	e7df      	b.n	800381e <_printf_float+0x3ee>
 800385e:	2301      	movs	r3, #1
 8003860:	464a      	mov	r2, r9
 8003862:	4631      	mov	r1, r6
 8003864:	4628      	mov	r0, r5
 8003866:	47b8      	blx	r7
 8003868:	3001      	adds	r0, #1
 800386a:	f43f ae3c 	beq.w	80034e6 <_printf_float+0xb6>
 800386e:	f108 0801 	add.w	r8, r8, #1
 8003872:	68e3      	ldr	r3, [r4, #12]
 8003874:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003876:	1a5b      	subs	r3, r3, r1
 8003878:	4543      	cmp	r3, r8
 800387a:	dcf0      	bgt.n	800385e <_printf_float+0x42e>
 800387c:	e6fd      	b.n	800367a <_printf_float+0x24a>
 800387e:	f04f 0800 	mov.w	r8, #0
 8003882:	f104 0919 	add.w	r9, r4, #25
 8003886:	e7f4      	b.n	8003872 <_printf_float+0x442>

08003888 <_printf_common>:
 8003888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	4616      	mov	r6, r2
 800388e:	4699      	mov	r9, r3
 8003890:	688a      	ldr	r2, [r1, #8]
 8003892:	690b      	ldr	r3, [r1, #16]
 8003894:	4607      	mov	r7, r0
 8003896:	4293      	cmp	r3, r2
 8003898:	bfb8      	it	lt
 800389a:	4613      	movlt	r3, r2
 800389c:	6033      	str	r3, [r6, #0]
 800389e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038a2:	460c      	mov	r4, r1
 80038a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a8:	b10a      	cbz	r2, 80038ae <_printf_common+0x26>
 80038aa:	3301      	adds	r3, #1
 80038ac:	6033      	str	r3, [r6, #0]
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	0699      	lsls	r1, r3, #26
 80038b2:	bf42      	ittt	mi
 80038b4:	6833      	ldrmi	r3, [r6, #0]
 80038b6:	3302      	addmi	r3, #2
 80038b8:	6033      	strmi	r3, [r6, #0]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	f015 0506 	ands.w	r5, r5, #6
 80038c0:	d106      	bne.n	80038d0 <_printf_common+0x48>
 80038c2:	f104 0a19 	add.w	sl, r4, #25
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	6832      	ldr	r2, [r6, #0]
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	42ab      	cmp	r3, r5
 80038ce:	dc28      	bgt.n	8003922 <_printf_common+0x9a>
 80038d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038d4:	1e13      	subs	r3, r2, #0
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	bf18      	it	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	0692      	lsls	r2, r2, #26
 80038de:	d42d      	bmi.n	800393c <_printf_common+0xb4>
 80038e0:	4649      	mov	r1, r9
 80038e2:	4638      	mov	r0, r7
 80038e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e8:	47c0      	blx	r8
 80038ea:	3001      	adds	r0, #1
 80038ec:	d020      	beq.n	8003930 <_printf_common+0xa8>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	68e5      	ldr	r5, [r4, #12]
 80038f2:	f003 0306 	and.w	r3, r3, #6
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf18      	it	ne
 80038fa:	2500      	movne	r5, #0
 80038fc:	6832      	ldr	r2, [r6, #0]
 80038fe:	f04f 0600 	mov.w	r6, #0
 8003902:	68a3      	ldr	r3, [r4, #8]
 8003904:	bf08      	it	eq
 8003906:	1aad      	subeq	r5, r5, r2
 8003908:	6922      	ldr	r2, [r4, #16]
 800390a:	bf08      	it	eq
 800390c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003910:	4293      	cmp	r3, r2
 8003912:	bfc4      	itt	gt
 8003914:	1a9b      	subgt	r3, r3, r2
 8003916:	18ed      	addgt	r5, r5, r3
 8003918:	341a      	adds	r4, #26
 800391a:	42b5      	cmp	r5, r6
 800391c:	d11a      	bne.n	8003954 <_printf_common+0xcc>
 800391e:	2000      	movs	r0, #0
 8003920:	e008      	b.n	8003934 <_printf_common+0xac>
 8003922:	2301      	movs	r3, #1
 8003924:	4652      	mov	r2, sl
 8003926:	4649      	mov	r1, r9
 8003928:	4638      	mov	r0, r7
 800392a:	47c0      	blx	r8
 800392c:	3001      	adds	r0, #1
 800392e:	d103      	bne.n	8003938 <_printf_common+0xb0>
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003938:	3501      	adds	r5, #1
 800393a:	e7c4      	b.n	80038c6 <_printf_common+0x3e>
 800393c:	2030      	movs	r0, #48	; 0x30
 800393e:	18e1      	adds	r1, r4, r3
 8003940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800394a:	4422      	add	r2, r4
 800394c:	3302      	adds	r3, #2
 800394e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003952:	e7c5      	b.n	80038e0 <_printf_common+0x58>
 8003954:	2301      	movs	r3, #1
 8003956:	4622      	mov	r2, r4
 8003958:	4649      	mov	r1, r9
 800395a:	4638      	mov	r0, r7
 800395c:	47c0      	blx	r8
 800395e:	3001      	adds	r0, #1
 8003960:	d0e6      	beq.n	8003930 <_printf_common+0xa8>
 8003962:	3601      	adds	r6, #1
 8003964:	e7d9      	b.n	800391a <_printf_common+0x92>
	...

08003968 <_printf_i>:
 8003968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800396c:	7e0f      	ldrb	r7, [r1, #24]
 800396e:	4691      	mov	r9, r2
 8003970:	2f78      	cmp	r7, #120	; 0x78
 8003972:	4680      	mov	r8, r0
 8003974:	460c      	mov	r4, r1
 8003976:	469a      	mov	sl, r3
 8003978:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800397a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800397e:	d807      	bhi.n	8003990 <_printf_i+0x28>
 8003980:	2f62      	cmp	r7, #98	; 0x62
 8003982:	d80a      	bhi.n	800399a <_printf_i+0x32>
 8003984:	2f00      	cmp	r7, #0
 8003986:	f000 80d9 	beq.w	8003b3c <_printf_i+0x1d4>
 800398a:	2f58      	cmp	r7, #88	; 0x58
 800398c:	f000 80a4 	beq.w	8003ad8 <_printf_i+0x170>
 8003990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003998:	e03a      	b.n	8003a10 <_printf_i+0xa8>
 800399a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800399e:	2b15      	cmp	r3, #21
 80039a0:	d8f6      	bhi.n	8003990 <_printf_i+0x28>
 80039a2:	a101      	add	r1, pc, #4	; (adr r1, 80039a8 <_printf_i+0x40>)
 80039a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039a8:	08003a01 	.word	0x08003a01
 80039ac:	08003a15 	.word	0x08003a15
 80039b0:	08003991 	.word	0x08003991
 80039b4:	08003991 	.word	0x08003991
 80039b8:	08003991 	.word	0x08003991
 80039bc:	08003991 	.word	0x08003991
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003991 	.word	0x08003991
 80039c8:	08003991 	.word	0x08003991
 80039cc:	08003991 	.word	0x08003991
 80039d0:	08003991 	.word	0x08003991
 80039d4:	08003b23 	.word	0x08003b23
 80039d8:	08003a45 	.word	0x08003a45
 80039dc:	08003b05 	.word	0x08003b05
 80039e0:	08003991 	.word	0x08003991
 80039e4:	08003991 	.word	0x08003991
 80039e8:	08003b45 	.word	0x08003b45
 80039ec:	08003991 	.word	0x08003991
 80039f0:	08003a45 	.word	0x08003a45
 80039f4:	08003991 	.word	0x08003991
 80039f8:	08003991 	.word	0x08003991
 80039fc:	08003b0d 	.word	0x08003b0d
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	602a      	str	r2, [r5, #0]
 8003a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0a4      	b.n	8003b5e <_printf_i+0x1f6>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	6829      	ldr	r1, [r5, #0]
 8003a18:	0606      	lsls	r6, r0, #24
 8003a1a:	f101 0304 	add.w	r3, r1, #4
 8003a1e:	d50a      	bpl.n	8003a36 <_printf_i+0xce>
 8003a20:	680e      	ldr	r6, [r1, #0]
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	2e00      	cmp	r6, #0
 8003a26:	da03      	bge.n	8003a30 <_printf_i+0xc8>
 8003a28:	232d      	movs	r3, #45	; 0x2d
 8003a2a:	4276      	negs	r6, r6
 8003a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a30:	230a      	movs	r3, #10
 8003a32:	485e      	ldr	r0, [pc, #376]	; (8003bac <_printf_i+0x244>)
 8003a34:	e019      	b.n	8003a6a <_printf_i+0x102>
 8003a36:	680e      	ldr	r6, [r1, #0]
 8003a38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a3c:	602b      	str	r3, [r5, #0]
 8003a3e:	bf18      	it	ne
 8003a40:	b236      	sxthne	r6, r6
 8003a42:	e7ef      	b.n	8003a24 <_printf_i+0xbc>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	1d19      	adds	r1, r3, #4
 8003a4a:	6029      	str	r1, [r5, #0]
 8003a4c:	0601      	lsls	r1, r0, #24
 8003a4e:	d501      	bpl.n	8003a54 <_printf_i+0xec>
 8003a50:	681e      	ldr	r6, [r3, #0]
 8003a52:	e002      	b.n	8003a5a <_printf_i+0xf2>
 8003a54:	0646      	lsls	r6, r0, #25
 8003a56:	d5fb      	bpl.n	8003a50 <_printf_i+0xe8>
 8003a58:	881e      	ldrh	r6, [r3, #0]
 8003a5a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2308      	moveq	r3, #8
 8003a60:	230a      	movne	r3, #10
 8003a62:	4852      	ldr	r0, [pc, #328]	; (8003bac <_printf_i+0x244>)
 8003a64:	2100      	movs	r1, #0
 8003a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a6a:	6865      	ldr	r5, [r4, #4]
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	bfa8      	it	ge
 8003a70:	6821      	ldrge	r1, [r4, #0]
 8003a72:	60a5      	str	r5, [r4, #8]
 8003a74:	bfa4      	itt	ge
 8003a76:	f021 0104 	bicge.w	r1, r1, #4
 8003a7a:	6021      	strge	r1, [r4, #0]
 8003a7c:	b90e      	cbnz	r6, 8003a82 <_printf_i+0x11a>
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	d04d      	beq.n	8003b1e <_printf_i+0x1b6>
 8003a82:	4615      	mov	r5, r2
 8003a84:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a88:	fb03 6711 	mls	r7, r3, r1, r6
 8003a8c:	5dc7      	ldrb	r7, [r0, r7]
 8003a8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a92:	4637      	mov	r7, r6
 8003a94:	42bb      	cmp	r3, r7
 8003a96:	460e      	mov	r6, r1
 8003a98:	d9f4      	bls.n	8003a84 <_printf_i+0x11c>
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d10b      	bne.n	8003ab6 <_printf_i+0x14e>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	07de      	lsls	r6, r3, #31
 8003aa2:	d508      	bpl.n	8003ab6 <_printf_i+0x14e>
 8003aa4:	6923      	ldr	r3, [r4, #16]
 8003aa6:	6861      	ldr	r1, [r4, #4]
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	bfde      	ittt	le
 8003aac:	2330      	movle	r3, #48	; 0x30
 8003aae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ab2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ab6:	1b52      	subs	r2, r2, r5
 8003ab8:	6122      	str	r2, [r4, #16]
 8003aba:	464b      	mov	r3, r9
 8003abc:	4621      	mov	r1, r4
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f8cd a000 	str.w	sl, [sp]
 8003ac4:	aa03      	add	r2, sp, #12
 8003ac6:	f7ff fedf 	bl	8003888 <_printf_common>
 8003aca:	3001      	adds	r0, #1
 8003acc:	d14c      	bne.n	8003b68 <_printf_i+0x200>
 8003ace:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad2:	b004      	add	sp, #16
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	4834      	ldr	r0, [pc, #208]	; (8003bac <_printf_i+0x244>)
 8003ada:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ade:	6829      	ldr	r1, [r5, #0]
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ae6:	6029      	str	r1, [r5, #0]
 8003ae8:	061d      	lsls	r5, r3, #24
 8003aea:	d514      	bpl.n	8003b16 <_printf_i+0x1ae>
 8003aec:	07df      	lsls	r7, r3, #31
 8003aee:	bf44      	itt	mi
 8003af0:	f043 0320 	orrmi.w	r3, r3, #32
 8003af4:	6023      	strmi	r3, [r4, #0]
 8003af6:	b91e      	cbnz	r6, 8003b00 <_printf_i+0x198>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f023 0320 	bic.w	r3, r3, #32
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	2310      	movs	r3, #16
 8003b02:	e7af      	b.n	8003a64 <_printf_i+0xfc>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	f043 0320 	orr.w	r3, r3, #32
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	2378      	movs	r3, #120	; 0x78
 8003b0e:	4828      	ldr	r0, [pc, #160]	; (8003bb0 <_printf_i+0x248>)
 8003b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b14:	e7e3      	b.n	8003ade <_printf_i+0x176>
 8003b16:	0659      	lsls	r1, r3, #25
 8003b18:	bf48      	it	mi
 8003b1a:	b2b6      	uxthmi	r6, r6
 8003b1c:	e7e6      	b.n	8003aec <_printf_i+0x184>
 8003b1e:	4615      	mov	r5, r2
 8003b20:	e7bb      	b.n	8003a9a <_printf_i+0x132>
 8003b22:	682b      	ldr	r3, [r5, #0]
 8003b24:	6826      	ldr	r6, [r4, #0]
 8003b26:	1d18      	adds	r0, r3, #4
 8003b28:	6961      	ldr	r1, [r4, #20]
 8003b2a:	6028      	str	r0, [r5, #0]
 8003b2c:	0635      	lsls	r5, r6, #24
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	d501      	bpl.n	8003b36 <_printf_i+0x1ce>
 8003b32:	6019      	str	r1, [r3, #0]
 8003b34:	e002      	b.n	8003b3c <_printf_i+0x1d4>
 8003b36:	0670      	lsls	r0, r6, #25
 8003b38:	d5fb      	bpl.n	8003b32 <_printf_i+0x1ca>
 8003b3a:	8019      	strh	r1, [r3, #0]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4615      	mov	r5, r2
 8003b40:	6123      	str	r3, [r4, #16]
 8003b42:	e7ba      	b.n	8003aba <_printf_i+0x152>
 8003b44:	682b      	ldr	r3, [r5, #0]
 8003b46:	2100      	movs	r1, #0
 8003b48:	1d1a      	adds	r2, r3, #4
 8003b4a:	602a      	str	r2, [r5, #0]
 8003b4c:	681d      	ldr	r5, [r3, #0]
 8003b4e:	6862      	ldr	r2, [r4, #4]
 8003b50:	4628      	mov	r0, r5
 8003b52:	f002 fb91 	bl	8006278 <memchr>
 8003b56:	b108      	cbz	r0, 8003b5c <_printf_i+0x1f4>
 8003b58:	1b40      	subs	r0, r0, r5
 8003b5a:	6060      	str	r0, [r4, #4]
 8003b5c:	6863      	ldr	r3, [r4, #4]
 8003b5e:	6123      	str	r3, [r4, #16]
 8003b60:	2300      	movs	r3, #0
 8003b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b66:	e7a8      	b.n	8003aba <_printf_i+0x152>
 8003b68:	462a      	mov	r2, r5
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	47d0      	blx	sl
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0ab      	beq.n	8003ace <_printf_i+0x166>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	079b      	lsls	r3, r3, #30
 8003b7a:	d413      	bmi.n	8003ba4 <_printf_i+0x23c>
 8003b7c:	68e0      	ldr	r0, [r4, #12]
 8003b7e:	9b03      	ldr	r3, [sp, #12]
 8003b80:	4298      	cmp	r0, r3
 8003b82:	bfb8      	it	lt
 8003b84:	4618      	movlt	r0, r3
 8003b86:	e7a4      	b.n	8003ad2 <_printf_i+0x16a>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4632      	mov	r2, r6
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	4640      	mov	r0, r8
 8003b90:	47d0      	blx	sl
 8003b92:	3001      	adds	r0, #1
 8003b94:	d09b      	beq.n	8003ace <_printf_i+0x166>
 8003b96:	3501      	adds	r5, #1
 8003b98:	68e3      	ldr	r3, [r4, #12]
 8003b9a:	9903      	ldr	r1, [sp, #12]
 8003b9c:	1a5b      	subs	r3, r3, r1
 8003b9e:	42ab      	cmp	r3, r5
 8003ba0:	dcf2      	bgt.n	8003b88 <_printf_i+0x220>
 8003ba2:	e7eb      	b.n	8003b7c <_printf_i+0x214>
 8003ba4:	2500      	movs	r5, #0
 8003ba6:	f104 0619 	add.w	r6, r4, #25
 8003baa:	e7f5      	b.n	8003b98 <_printf_i+0x230>
 8003bac:	08008bdc 	.word	0x08008bdc
 8003bb0:	08008bed 	.word	0x08008bed

08003bb4 <_scanf_float>:
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	688b      	ldr	r3, [r1, #8]
 8003bbe:	4617      	mov	r7, r2
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003bc6:	bf85      	ittet	hi
 8003bc8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003bcc:	195b      	addhi	r3, r3, r5
 8003bce:	2300      	movls	r3, #0
 8003bd0:	9302      	strhi	r3, [sp, #8]
 8003bd2:	bf88      	it	hi
 8003bd4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003bd8:	468b      	mov	fp, r1
 8003bda:	f04f 0500 	mov.w	r5, #0
 8003bde:	bf8c      	ite	hi
 8003be0:	608b      	strhi	r3, [r1, #8]
 8003be2:	9302      	strls	r3, [sp, #8]
 8003be4:	680b      	ldr	r3, [r1, #0]
 8003be6:	4680      	mov	r8, r0
 8003be8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003bec:	f84b 3b1c 	str.w	r3, [fp], #28
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	465e      	mov	r6, fp
 8003bf4:	46aa      	mov	sl, r5
 8003bf6:	46a9      	mov	r9, r5
 8003bf8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003bfc:	9501      	str	r5, [sp, #4]
 8003bfe:	68a2      	ldr	r2, [r4, #8]
 8003c00:	b152      	cbz	r2, 8003c18 <_scanf_float+0x64>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b4e      	cmp	r3, #78	; 0x4e
 8003c08:	d864      	bhi.n	8003cd4 <_scanf_float+0x120>
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d83c      	bhi.n	8003c88 <_scanf_float+0xd4>
 8003c0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003c12:	b2c8      	uxtb	r0, r1
 8003c14:	280e      	cmp	r0, #14
 8003c16:	d93a      	bls.n	8003c8e <_scanf_float+0xda>
 8003c18:	f1b9 0f00 	cmp.w	r9, #0
 8003c1c:	d003      	beq.n	8003c26 <_scanf_float+0x72>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c2a:	f1ba 0f01 	cmp.w	sl, #1
 8003c2e:	f200 8113 	bhi.w	8003e58 <_scanf_float+0x2a4>
 8003c32:	455e      	cmp	r6, fp
 8003c34:	f200 8105 	bhi.w	8003e42 <_scanf_float+0x28e>
 8003c38:	2501      	movs	r5, #1
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	b007      	add	sp, #28
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003c46:	2a0d      	cmp	r2, #13
 8003c48:	d8e6      	bhi.n	8003c18 <_scanf_float+0x64>
 8003c4a:	a101      	add	r1, pc, #4	; (adr r1, 8003c50 <_scanf_float+0x9c>)
 8003c4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c50:	08003d8f 	.word	0x08003d8f
 8003c54:	08003c19 	.word	0x08003c19
 8003c58:	08003c19 	.word	0x08003c19
 8003c5c:	08003c19 	.word	0x08003c19
 8003c60:	08003def 	.word	0x08003def
 8003c64:	08003dc7 	.word	0x08003dc7
 8003c68:	08003c19 	.word	0x08003c19
 8003c6c:	08003c19 	.word	0x08003c19
 8003c70:	08003d9d 	.word	0x08003d9d
 8003c74:	08003c19 	.word	0x08003c19
 8003c78:	08003c19 	.word	0x08003c19
 8003c7c:	08003c19 	.word	0x08003c19
 8003c80:	08003c19 	.word	0x08003c19
 8003c84:	08003d55 	.word	0x08003d55
 8003c88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003c8c:	e7db      	b.n	8003c46 <_scanf_float+0x92>
 8003c8e:	290e      	cmp	r1, #14
 8003c90:	d8c2      	bhi.n	8003c18 <_scanf_float+0x64>
 8003c92:	a001      	add	r0, pc, #4	; (adr r0, 8003c98 <_scanf_float+0xe4>)
 8003c94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003c98:	08003d47 	.word	0x08003d47
 8003c9c:	08003c19 	.word	0x08003c19
 8003ca0:	08003d47 	.word	0x08003d47
 8003ca4:	08003ddb 	.word	0x08003ddb
 8003ca8:	08003c19 	.word	0x08003c19
 8003cac:	08003cf5 	.word	0x08003cf5
 8003cb0:	08003d31 	.word	0x08003d31
 8003cb4:	08003d31 	.word	0x08003d31
 8003cb8:	08003d31 	.word	0x08003d31
 8003cbc:	08003d31 	.word	0x08003d31
 8003cc0:	08003d31 	.word	0x08003d31
 8003cc4:	08003d31 	.word	0x08003d31
 8003cc8:	08003d31 	.word	0x08003d31
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003d31 	.word	0x08003d31
 8003cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8003cd6:	d809      	bhi.n	8003cec <_scanf_float+0x138>
 8003cd8:	2b60      	cmp	r3, #96	; 0x60
 8003cda:	d8b2      	bhi.n	8003c42 <_scanf_float+0x8e>
 8003cdc:	2b54      	cmp	r3, #84	; 0x54
 8003cde:	d077      	beq.n	8003dd0 <_scanf_float+0x21c>
 8003ce0:	2b59      	cmp	r3, #89	; 0x59
 8003ce2:	d199      	bne.n	8003c18 <_scanf_float+0x64>
 8003ce4:	2d07      	cmp	r5, #7
 8003ce6:	d197      	bne.n	8003c18 <_scanf_float+0x64>
 8003ce8:	2508      	movs	r5, #8
 8003cea:	e029      	b.n	8003d40 <_scanf_float+0x18c>
 8003cec:	2b74      	cmp	r3, #116	; 0x74
 8003cee:	d06f      	beq.n	8003dd0 <_scanf_float+0x21c>
 8003cf0:	2b79      	cmp	r3, #121	; 0x79
 8003cf2:	e7f6      	b.n	8003ce2 <_scanf_float+0x12e>
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	05c8      	lsls	r0, r1, #23
 8003cf8:	d51a      	bpl.n	8003d30 <_scanf_float+0x17c>
 8003cfa:	9b02      	ldr	r3, [sp, #8]
 8003cfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003d00:	6021      	str	r1, [r4, #0]
 8003d02:	f109 0901 	add.w	r9, r9, #1
 8003d06:	b11b      	cbz	r3, 8003d10 <_scanf_float+0x15c>
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	60a2      	str	r2, [r4, #8]
 8003d10:	68a3      	ldr	r3, [r4, #8]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60a3      	str	r3, [r4, #8]
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	6123      	str	r3, [r4, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	f340 8084 	ble.w	8003e30 <_scanf_float+0x27c>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	e766      	b.n	8003bfe <_scanf_float+0x4a>
 8003d30:	eb1a 0f05 	cmn.w	sl, r5
 8003d34:	f47f af70 	bne.w	8003c18 <_scanf_float+0x64>
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	f806 3b01 	strb.w	r3, [r6], #1
 8003d44:	e7e4      	b.n	8003d10 <_scanf_float+0x15c>
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	0610      	lsls	r0, r2, #24
 8003d4a:	f57f af65 	bpl.w	8003c18 <_scanf_float+0x64>
 8003d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d52:	e7f4      	b.n	8003d3e <_scanf_float+0x18a>
 8003d54:	f1ba 0f00 	cmp.w	sl, #0
 8003d58:	d10e      	bne.n	8003d78 <_scanf_float+0x1c4>
 8003d5a:	f1b9 0f00 	cmp.w	r9, #0
 8003d5e:	d10e      	bne.n	8003d7e <_scanf_float+0x1ca>
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d6a:	d108      	bne.n	8003d7e <_scanf_float+0x1ca>
 8003d6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d70:	f04f 0a01 	mov.w	sl, #1
 8003d74:	6022      	str	r2, [r4, #0]
 8003d76:	e7e3      	b.n	8003d40 <_scanf_float+0x18c>
 8003d78:	f1ba 0f02 	cmp.w	sl, #2
 8003d7c:	d055      	beq.n	8003e2a <_scanf_float+0x276>
 8003d7e:	2d01      	cmp	r5, #1
 8003d80:	d002      	beq.n	8003d88 <_scanf_float+0x1d4>
 8003d82:	2d04      	cmp	r5, #4
 8003d84:	f47f af48 	bne.w	8003c18 <_scanf_float+0x64>
 8003d88:	3501      	adds	r5, #1
 8003d8a:	b2ed      	uxtb	r5, r5
 8003d8c:	e7d8      	b.n	8003d40 <_scanf_float+0x18c>
 8003d8e:	f1ba 0f01 	cmp.w	sl, #1
 8003d92:	f47f af41 	bne.w	8003c18 <_scanf_float+0x64>
 8003d96:	f04f 0a02 	mov.w	sl, #2
 8003d9a:	e7d1      	b.n	8003d40 <_scanf_float+0x18c>
 8003d9c:	b97d      	cbnz	r5, 8003dbe <_scanf_float+0x20a>
 8003d9e:	f1b9 0f00 	cmp.w	r9, #0
 8003da2:	f47f af3c 	bne.w	8003c1e <_scanf_float+0x6a>
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003dac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003db0:	f47f af39 	bne.w	8003c26 <_scanf_float+0x72>
 8003db4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003db8:	2501      	movs	r5, #1
 8003dba:	6022      	str	r2, [r4, #0]
 8003dbc:	e7c0      	b.n	8003d40 <_scanf_float+0x18c>
 8003dbe:	2d03      	cmp	r5, #3
 8003dc0:	d0e2      	beq.n	8003d88 <_scanf_float+0x1d4>
 8003dc2:	2d05      	cmp	r5, #5
 8003dc4:	e7de      	b.n	8003d84 <_scanf_float+0x1d0>
 8003dc6:	2d02      	cmp	r5, #2
 8003dc8:	f47f af26 	bne.w	8003c18 <_scanf_float+0x64>
 8003dcc:	2503      	movs	r5, #3
 8003dce:	e7b7      	b.n	8003d40 <_scanf_float+0x18c>
 8003dd0:	2d06      	cmp	r5, #6
 8003dd2:	f47f af21 	bne.w	8003c18 <_scanf_float+0x64>
 8003dd6:	2507      	movs	r5, #7
 8003dd8:	e7b2      	b.n	8003d40 <_scanf_float+0x18c>
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	0591      	lsls	r1, r2, #22
 8003dde:	f57f af1b 	bpl.w	8003c18 <_scanf_float+0x64>
 8003de2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003de6:	6022      	str	r2, [r4, #0]
 8003de8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003dec:	e7a8      	b.n	8003d40 <_scanf_float+0x18c>
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003df4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003df8:	d006      	beq.n	8003e08 <_scanf_float+0x254>
 8003dfa:	0550      	lsls	r0, r2, #21
 8003dfc:	f57f af0c 	bpl.w	8003c18 <_scanf_float+0x64>
 8003e00:	f1b9 0f00 	cmp.w	r9, #0
 8003e04:	f43f af0f 	beq.w	8003c26 <_scanf_float+0x72>
 8003e08:	0591      	lsls	r1, r2, #22
 8003e0a:	bf58      	it	pl
 8003e0c:	9901      	ldrpl	r1, [sp, #4]
 8003e0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e12:	bf58      	it	pl
 8003e14:	eba9 0101 	subpl.w	r1, r9, r1
 8003e18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003e1c:	f04f 0900 	mov.w	r9, #0
 8003e20:	bf58      	it	pl
 8003e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003e26:	6022      	str	r2, [r4, #0]
 8003e28:	e78a      	b.n	8003d40 <_scanf_float+0x18c>
 8003e2a:	f04f 0a03 	mov.w	sl, #3
 8003e2e:	e787      	b.n	8003d40 <_scanf_float+0x18c>
 8003e30:	4639      	mov	r1, r7
 8003e32:	4640      	mov	r0, r8
 8003e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e38:	4798      	blx	r3
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	f43f aedf 	beq.w	8003bfe <_scanf_float+0x4a>
 8003e40:	e6ea      	b.n	8003c18 <_scanf_float+0x64>
 8003e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e46:	463a      	mov	r2, r7
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e4e:	4798      	blx	r3
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	6123      	str	r3, [r4, #16]
 8003e56:	e6ec      	b.n	8003c32 <_scanf_float+0x7e>
 8003e58:	1e6b      	subs	r3, r5, #1
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d825      	bhi.n	8003eaa <_scanf_float+0x2f6>
 8003e5e:	2d02      	cmp	r5, #2
 8003e60:	d836      	bhi.n	8003ed0 <_scanf_float+0x31c>
 8003e62:	455e      	cmp	r6, fp
 8003e64:	f67f aee8 	bls.w	8003c38 <_scanf_float+0x84>
 8003e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e6c:	463a      	mov	r2, r7
 8003e6e:	4640      	mov	r0, r8
 8003e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e74:	4798      	blx	r3
 8003e76:	6923      	ldr	r3, [r4, #16]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	6123      	str	r3, [r4, #16]
 8003e7c:	e7f1      	b.n	8003e62 <_scanf_float+0x2ae>
 8003e7e:	9802      	ldr	r0, [sp, #8]
 8003e80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003e88:	463a      	mov	r2, r7
 8003e8a:	9002      	str	r0, [sp, #8]
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	4798      	blx	r3
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003e9e:	f1ba 0f02 	cmp.w	sl, #2
 8003ea2:	d1ec      	bne.n	8003e7e <_scanf_float+0x2ca>
 8003ea4:	3d03      	subs	r5, #3
 8003ea6:	b2ed      	uxtb	r5, r5
 8003ea8:	1b76      	subs	r6, r6, r5
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	05da      	lsls	r2, r3, #23
 8003eae:	d52f      	bpl.n	8003f10 <_scanf_float+0x35c>
 8003eb0:	055b      	lsls	r3, r3, #21
 8003eb2:	d510      	bpl.n	8003ed6 <_scanf_float+0x322>
 8003eb4:	455e      	cmp	r6, fp
 8003eb6:	f67f aebf 	bls.w	8003c38 <_scanf_float+0x84>
 8003eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ebe:	463a      	mov	r2, r7
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ec6:	4798      	blx	r3
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	e7f1      	b.n	8003eb4 <_scanf_float+0x300>
 8003ed0:	46aa      	mov	sl, r5
 8003ed2:	9602      	str	r6, [sp, #8]
 8003ed4:	e7df      	b.n	8003e96 <_scanf_float+0x2e2>
 8003ed6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003eda:	6923      	ldr	r3, [r4, #16]
 8003edc:	2965      	cmp	r1, #101	; 0x65
 8003ede:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ee2:	f106 35ff 	add.w	r5, r6, #4294967295
 8003ee6:	6123      	str	r3, [r4, #16]
 8003ee8:	d00c      	beq.n	8003f04 <_scanf_float+0x350>
 8003eea:	2945      	cmp	r1, #69	; 0x45
 8003eec:	d00a      	beq.n	8003f04 <_scanf_float+0x350>
 8003eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ef2:	463a      	mov	r2, r7
 8003ef4:	4640      	mov	r0, r8
 8003ef6:	4798      	blx	r3
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	1eb5      	subs	r5, r6, #2
 8003f02:	6123      	str	r3, [r4, #16]
 8003f04:	463a      	mov	r2, r7
 8003f06:	4640      	mov	r0, r8
 8003f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f0c:	4798      	blx	r3
 8003f0e:	462e      	mov	r6, r5
 8003f10:	6825      	ldr	r5, [r4, #0]
 8003f12:	f015 0510 	ands.w	r5, r5, #16
 8003f16:	d155      	bne.n	8003fc4 <_scanf_float+0x410>
 8003f18:	7035      	strb	r5, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d11b      	bne.n	8003f5e <_scanf_float+0x3aa>
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	454b      	cmp	r3, r9
 8003f2a:	eba3 0209 	sub.w	r2, r3, r9
 8003f2e:	d123      	bne.n	8003f78 <_scanf_float+0x3c4>
 8003f30:	2200      	movs	r2, #0
 8003f32:	4659      	mov	r1, fp
 8003f34:	4640      	mov	r0, r8
 8003f36:	f000 fee7 	bl	8004d08 <_strtod_r>
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	f012 0f02 	tst.w	r2, #2
 8003f42:	4606      	mov	r6, r0
 8003f44:	460f      	mov	r7, r1
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	d021      	beq.n	8003f8e <_scanf_float+0x3da>
 8003f4a:	1d1a      	adds	r2, r3, #4
 8003f4c:	9903      	ldr	r1, [sp, #12]
 8003f4e:	600a      	str	r2, [r1, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	e9c3 6700 	strd	r6, r7, [r3]
 8003f56:	68e3      	ldr	r3, [r4, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60e3      	str	r3, [r4, #12]
 8003f5c:	e66d      	b.n	8003c3a <_scanf_float+0x86>
 8003f5e:	9b04      	ldr	r3, [sp, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0e5      	beq.n	8003f30 <_scanf_float+0x37c>
 8003f64:	9905      	ldr	r1, [sp, #20]
 8003f66:	230a      	movs	r3, #10
 8003f68:	462a      	mov	r2, r5
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	3101      	adds	r1, #1
 8003f6e:	f000 ff4d 	bl	8004e0c <_strtol_r>
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	9e05      	ldr	r6, [sp, #20]
 8003f76:	1ac2      	subs	r2, r0, r3
 8003f78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	bf28      	it	cs
 8003f80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003f84:	4630      	mov	r0, r6
 8003f86:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <_scanf_float+0x414>)
 8003f88:	f000 f826 	bl	8003fd8 <siprintf>
 8003f8c:	e7d0      	b.n	8003f30 <_scanf_float+0x37c>
 8003f8e:	f012 0f04 	tst.w	r2, #4
 8003f92:	f103 0204 	add.w	r2, r3, #4
 8003f96:	d1d9      	bne.n	8003f4c <_scanf_float+0x398>
 8003f98:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003f9c:	f8cc 2000 	str.w	r2, [ip]
 8003fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	f7fc fd30 	bl	8000a0c <__aeabi_dcmpun>
 8003fac:	b128      	cbz	r0, 8003fba <_scanf_float+0x406>
 8003fae:	4807      	ldr	r0, [pc, #28]	; (8003fcc <_scanf_float+0x418>)
 8003fb0:	f000 f80e 	bl	8003fd0 <nanf>
 8003fb4:	f8c8 0000 	str.w	r0, [r8]
 8003fb8:	e7cd      	b.n	8003f56 <_scanf_float+0x3a2>
 8003fba:	4630      	mov	r0, r6
 8003fbc:	4639      	mov	r1, r7
 8003fbe:	f7fc fd83 	bl	8000ac8 <__aeabi_d2f>
 8003fc2:	e7f7      	b.n	8003fb4 <_scanf_float+0x400>
 8003fc4:	2500      	movs	r5, #0
 8003fc6:	e638      	b.n	8003c3a <_scanf_float+0x86>
 8003fc8:	08008bfe 	.word	0x08008bfe
 8003fcc:	08009023 	.word	0x08009023

08003fd0 <nanf>:
 8003fd0:	4800      	ldr	r0, [pc, #0]	; (8003fd4 <nanf+0x4>)
 8003fd2:	4770      	bx	lr
 8003fd4:	7fc00000 	.word	0x7fc00000

08003fd8 <siprintf>:
 8003fd8:	b40e      	push	{r1, r2, r3}
 8003fda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fde:	b500      	push	{lr}
 8003fe0:	b09c      	sub	sp, #112	; 0x70
 8003fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fe4:	9002      	str	r0, [sp, #8]
 8003fe6:	9006      	str	r0, [sp, #24]
 8003fe8:	9107      	str	r1, [sp, #28]
 8003fea:	9104      	str	r1, [sp, #16]
 8003fec:	4808      	ldr	r0, [pc, #32]	; (8004010 <siprintf+0x38>)
 8003fee:	4909      	ldr	r1, [pc, #36]	; (8004014 <siprintf+0x3c>)
 8003ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff4:	9105      	str	r1, [sp, #20]
 8003ff6:	6800      	ldr	r0, [r0, #0]
 8003ff8:	a902      	add	r1, sp, #8
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	f002 ff5c 	bl	8006eb8 <_svfiprintf_r>
 8004000:	2200      	movs	r2, #0
 8004002:	9b02      	ldr	r3, [sp, #8]
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	b01c      	add	sp, #112	; 0x70
 8004008:	f85d eb04 	ldr.w	lr, [sp], #4
 800400c:	b003      	add	sp, #12
 800400e:	4770      	bx	lr
 8004010:	20000018 	.word	0x20000018
 8004014:	ffff0208 	.word	0xffff0208

08004018 <siscanf>:
 8004018:	b40e      	push	{r1, r2, r3}
 800401a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800401e:	b530      	push	{r4, r5, lr}
 8004020:	b09c      	sub	sp, #112	; 0x70
 8004022:	ac1f      	add	r4, sp, #124	; 0x7c
 8004024:	f854 5b04 	ldr.w	r5, [r4], #4
 8004028:	f8ad 2014 	strh.w	r2, [sp, #20]
 800402c:	9002      	str	r0, [sp, #8]
 800402e:	9006      	str	r0, [sp, #24]
 8004030:	f7fc f88e 	bl	8000150 <strlen>
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <siscanf+0x4c>)
 8004036:	9003      	str	r0, [sp, #12]
 8004038:	930b      	str	r3, [sp, #44]	; 0x2c
 800403a:	2300      	movs	r3, #0
 800403c:	930f      	str	r3, [sp, #60]	; 0x3c
 800403e:	9314      	str	r3, [sp, #80]	; 0x50
 8004040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004044:	9007      	str	r0, [sp, #28]
 8004046:	4808      	ldr	r0, [pc, #32]	; (8004068 <siscanf+0x50>)
 8004048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800404c:	462a      	mov	r2, r5
 800404e:	4623      	mov	r3, r4
 8004050:	a902      	add	r1, sp, #8
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	9401      	str	r4, [sp, #4]
 8004056:	f003 f889 	bl	800716c <__ssvfiscanf_r>
 800405a:	b01c      	add	sp, #112	; 0x70
 800405c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004060:	b003      	add	sp, #12
 8004062:	4770      	bx	lr
 8004064:	0800408f 	.word	0x0800408f
 8004068:	20000018 	.word	0x20000018

0800406c <__sread>:
 800406c:	b510      	push	{r4, lr}
 800406e:	460c      	mov	r4, r1
 8004070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004074:	f003 fb46 	bl	8007704 <_read_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	bfab      	itete	ge
 800407c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800407e:	89a3      	ldrhlt	r3, [r4, #12]
 8004080:	181b      	addge	r3, r3, r0
 8004082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004086:	bfac      	ite	ge
 8004088:	6563      	strge	r3, [r4, #84]	; 0x54
 800408a:	81a3      	strhlt	r3, [r4, #12]
 800408c:	bd10      	pop	{r4, pc}

0800408e <__seofread>:
 800408e:	2000      	movs	r0, #0
 8004090:	4770      	bx	lr

08004092 <__swrite>:
 8004092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004096:	461f      	mov	r7, r3
 8004098:	898b      	ldrh	r3, [r1, #12]
 800409a:	4605      	mov	r5, r0
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	460c      	mov	r4, r1
 80040a0:	4616      	mov	r6, r2
 80040a2:	d505      	bpl.n	80040b0 <__swrite+0x1e>
 80040a4:	2302      	movs	r3, #2
 80040a6:	2200      	movs	r2, #0
 80040a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ac:	f002 f8b8 	bl	8006220 <_lseek_r>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	4632      	mov	r2, r6
 80040b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	4628      	mov	r0, r5
 80040bc:	463b      	mov	r3, r7
 80040be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040c6:	f000 bea3 	b.w	8004e10 <_write_r>

080040ca <__sseek>:
 80040ca:	b510      	push	{r4, lr}
 80040cc:	460c      	mov	r4, r1
 80040ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d2:	f002 f8a5 	bl	8006220 <_lseek_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	bf15      	itete	ne
 80040dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80040de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040e6:	81a3      	strheq	r3, [r4, #12]
 80040e8:	bf18      	it	ne
 80040ea:	81a3      	strhne	r3, [r4, #12]
 80040ec:	bd10      	pop	{r4, pc}

080040ee <__sclose>:
 80040ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f2:	f000 be9f 	b.w	8004e34 <_close_r>

080040f6 <sulp>:
 80040f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fa:	460f      	mov	r7, r1
 80040fc:	4690      	mov	r8, r2
 80040fe:	f002 fc47 	bl	8006990 <__ulp>
 8004102:	4604      	mov	r4, r0
 8004104:	460d      	mov	r5, r1
 8004106:	f1b8 0f00 	cmp.w	r8, #0
 800410a:	d011      	beq.n	8004130 <sulp+0x3a>
 800410c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004110:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004114:	2b00      	cmp	r3, #0
 8004116:	dd0b      	ble.n	8004130 <sulp+0x3a>
 8004118:	2400      	movs	r4, #0
 800411a:	051b      	lsls	r3, r3, #20
 800411c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004120:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	f7fc f9d6 	bl	80004d8 <__aeabi_dmul>
 800412c:	4604      	mov	r4, r0
 800412e:	460d      	mov	r5, r1
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004138 <_strtod_l>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	469b      	mov	fp, r3
 800413e:	2300      	movs	r3, #0
 8004140:	b09f      	sub	sp, #124	; 0x7c
 8004142:	931a      	str	r3, [sp, #104]	; 0x68
 8004144:	4b9e      	ldr	r3, [pc, #632]	; (80043c0 <_strtod_l+0x288>)
 8004146:	4682      	mov	sl, r0
 8004148:	681f      	ldr	r7, [r3, #0]
 800414a:	460e      	mov	r6, r1
 800414c:	4638      	mov	r0, r7
 800414e:	9215      	str	r2, [sp, #84]	; 0x54
 8004150:	f7fb fffe 	bl	8000150 <strlen>
 8004154:	f04f 0800 	mov.w	r8, #0
 8004158:	4604      	mov	r4, r0
 800415a:	f04f 0900 	mov.w	r9, #0
 800415e:	9619      	str	r6, [sp, #100]	; 0x64
 8004160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	2a2b      	cmp	r2, #43	; 0x2b
 8004166:	d04c      	beq.n	8004202 <_strtod_l+0xca>
 8004168:	d83a      	bhi.n	80041e0 <_strtod_l+0xa8>
 800416a:	2a0d      	cmp	r2, #13
 800416c:	d833      	bhi.n	80041d6 <_strtod_l+0x9e>
 800416e:	2a08      	cmp	r2, #8
 8004170:	d833      	bhi.n	80041da <_strtod_l+0xa2>
 8004172:	2a00      	cmp	r2, #0
 8004174:	d03d      	beq.n	80041f2 <_strtod_l+0xba>
 8004176:	2300      	movs	r3, #0
 8004178:	930a      	str	r3, [sp, #40]	; 0x28
 800417a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800417c:	782b      	ldrb	r3, [r5, #0]
 800417e:	2b30      	cmp	r3, #48	; 0x30
 8004180:	f040 80aa 	bne.w	80042d8 <_strtod_l+0x1a0>
 8004184:	786b      	ldrb	r3, [r5, #1]
 8004186:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800418a:	2b58      	cmp	r3, #88	; 0x58
 800418c:	d166      	bne.n	800425c <_strtod_l+0x124>
 800418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004190:	4650      	mov	r0, sl
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	ab1a      	add	r3, sp, #104	; 0x68
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	4a8a      	ldr	r2, [pc, #552]	; (80043c4 <_strtod_l+0x28c>)
 800419a:	f8cd b008 	str.w	fp, [sp, #8]
 800419e:	ab1b      	add	r3, sp, #108	; 0x6c
 80041a0:	a919      	add	r1, sp, #100	; 0x64
 80041a2:	f001 fd3b 	bl	8005c1c <__gethex>
 80041a6:	f010 0607 	ands.w	r6, r0, #7
 80041aa:	4604      	mov	r4, r0
 80041ac:	d005      	beq.n	80041ba <_strtod_l+0x82>
 80041ae:	2e06      	cmp	r6, #6
 80041b0:	d129      	bne.n	8004206 <_strtod_l+0xce>
 80041b2:	2300      	movs	r3, #0
 80041b4:	3501      	adds	r5, #1
 80041b6:	9519      	str	r5, [sp, #100]	; 0x64
 80041b8:	930a      	str	r3, [sp, #40]	; 0x28
 80041ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 858a 	bne.w	8004cd6 <_strtod_l+0xb9e>
 80041c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c4:	b1d3      	cbz	r3, 80041fc <_strtod_l+0xc4>
 80041c6:	4642      	mov	r2, r8
 80041c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	b01f      	add	sp, #124	; 0x7c
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	2a20      	cmp	r2, #32
 80041d8:	d1cd      	bne.n	8004176 <_strtod_l+0x3e>
 80041da:	3301      	adds	r3, #1
 80041dc:	9319      	str	r3, [sp, #100]	; 0x64
 80041de:	e7bf      	b.n	8004160 <_strtod_l+0x28>
 80041e0:	2a2d      	cmp	r2, #45	; 0x2d
 80041e2:	d1c8      	bne.n	8004176 <_strtod_l+0x3e>
 80041e4:	2201      	movs	r2, #1
 80041e6:	920a      	str	r2, [sp, #40]	; 0x28
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	9219      	str	r2, [sp, #100]	; 0x64
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1c3      	bne.n	800417a <_strtod_l+0x42>
 80041f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041f4:	9619      	str	r6, [sp, #100]	; 0x64
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 856b 	bne.w	8004cd2 <_strtod_l+0xb9a>
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	e7e4      	b.n	80041cc <_strtod_l+0x94>
 8004202:	2200      	movs	r2, #0
 8004204:	e7ef      	b.n	80041e6 <_strtod_l+0xae>
 8004206:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004208:	b13a      	cbz	r2, 800421a <_strtod_l+0xe2>
 800420a:	2135      	movs	r1, #53	; 0x35
 800420c:	a81c      	add	r0, sp, #112	; 0x70
 800420e:	f002 fcc3 	bl	8006b98 <__copybits>
 8004212:	4650      	mov	r0, sl
 8004214:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004216:	f002 f88b 	bl	8006330 <_Bfree>
 800421a:	3e01      	subs	r6, #1
 800421c:	2e04      	cmp	r6, #4
 800421e:	d806      	bhi.n	800422e <_strtod_l+0xf6>
 8004220:	e8df f006 	tbb	[pc, r6]
 8004224:	1714030a 	.word	0x1714030a
 8004228:	0a          	.byte	0x0a
 8004229:	00          	.byte	0x00
 800422a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800422e:	0721      	lsls	r1, r4, #28
 8004230:	d5c3      	bpl.n	80041ba <_strtod_l+0x82>
 8004232:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004236:	e7c0      	b.n	80041ba <_strtod_l+0x82>
 8004238:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800423a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800423e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004242:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004246:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800424a:	e7f0      	b.n	800422e <_strtod_l+0xf6>
 800424c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80043c8 <_strtod_l+0x290>
 8004250:	e7ed      	b.n	800422e <_strtod_l+0xf6>
 8004252:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004256:	f04f 38ff 	mov.w	r8, #4294967295
 800425a:	e7e8      	b.n	800422e <_strtod_l+0xf6>
 800425c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	9219      	str	r2, [sp, #100]	; 0x64
 8004262:	785b      	ldrb	r3, [r3, #1]
 8004264:	2b30      	cmp	r3, #48	; 0x30
 8004266:	d0f9      	beq.n	800425c <_strtod_l+0x124>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0a6      	beq.n	80041ba <_strtod_l+0x82>
 800426c:	2301      	movs	r3, #1
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004272:	220a      	movs	r2, #10
 8004274:	9308      	str	r3, [sp, #32]
 8004276:	2300      	movs	r3, #0
 8004278:	469b      	mov	fp, r3
 800427a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800427e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004280:	7805      	ldrb	r5, [r0, #0]
 8004282:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004286:	b2d9      	uxtb	r1, r3
 8004288:	2909      	cmp	r1, #9
 800428a:	d927      	bls.n	80042dc <_strtod_l+0x1a4>
 800428c:	4622      	mov	r2, r4
 800428e:	4639      	mov	r1, r7
 8004290:	f003 fa98 	bl	80077c4 <strncmp>
 8004294:	2800      	cmp	r0, #0
 8004296:	d033      	beq.n	8004300 <_strtod_l+0x1c8>
 8004298:	2000      	movs	r0, #0
 800429a:	462a      	mov	r2, r5
 800429c:	465c      	mov	r4, fp
 800429e:	4603      	mov	r3, r0
 80042a0:	9004      	str	r0, [sp, #16]
 80042a2:	2a65      	cmp	r2, #101	; 0x65
 80042a4:	d001      	beq.n	80042aa <_strtod_l+0x172>
 80042a6:	2a45      	cmp	r2, #69	; 0x45
 80042a8:	d114      	bne.n	80042d4 <_strtod_l+0x19c>
 80042aa:	b91c      	cbnz	r4, 80042b4 <_strtod_l+0x17c>
 80042ac:	9a07      	ldr	r2, [sp, #28]
 80042ae:	4302      	orrs	r2, r0
 80042b0:	d09f      	beq.n	80041f2 <_strtod_l+0xba>
 80042b2:	2400      	movs	r4, #0
 80042b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80042b6:	1c72      	adds	r2, r6, #1
 80042b8:	9219      	str	r2, [sp, #100]	; 0x64
 80042ba:	7872      	ldrb	r2, [r6, #1]
 80042bc:	2a2b      	cmp	r2, #43	; 0x2b
 80042be:	d079      	beq.n	80043b4 <_strtod_l+0x27c>
 80042c0:	2a2d      	cmp	r2, #45	; 0x2d
 80042c2:	f000 8083 	beq.w	80043cc <_strtod_l+0x294>
 80042c6:	2700      	movs	r7, #0
 80042c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80042cc:	2909      	cmp	r1, #9
 80042ce:	f240 8083 	bls.w	80043d8 <_strtod_l+0x2a0>
 80042d2:	9619      	str	r6, [sp, #100]	; 0x64
 80042d4:	2500      	movs	r5, #0
 80042d6:	e09f      	b.n	8004418 <_strtod_l+0x2e0>
 80042d8:	2300      	movs	r3, #0
 80042da:	e7c8      	b.n	800426e <_strtod_l+0x136>
 80042dc:	f1bb 0f08 	cmp.w	fp, #8
 80042e0:	bfd5      	itete	le
 80042e2:	9906      	ldrle	r1, [sp, #24]
 80042e4:	9905      	ldrgt	r1, [sp, #20]
 80042e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80042ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80042ee:	f100 0001 	add.w	r0, r0, #1
 80042f2:	bfd4      	ite	le
 80042f4:	9306      	strle	r3, [sp, #24]
 80042f6:	9305      	strgt	r3, [sp, #20]
 80042f8:	f10b 0b01 	add.w	fp, fp, #1
 80042fc:	9019      	str	r0, [sp, #100]	; 0x64
 80042fe:	e7be      	b.n	800427e <_strtod_l+0x146>
 8004300:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004302:	191a      	adds	r2, r3, r4
 8004304:	9219      	str	r2, [sp, #100]	; 0x64
 8004306:	5d1a      	ldrb	r2, [r3, r4]
 8004308:	f1bb 0f00 	cmp.w	fp, #0
 800430c:	d036      	beq.n	800437c <_strtod_l+0x244>
 800430e:	465c      	mov	r4, fp
 8004310:	9004      	str	r0, [sp, #16]
 8004312:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004316:	2b09      	cmp	r3, #9
 8004318:	d912      	bls.n	8004340 <_strtod_l+0x208>
 800431a:	2301      	movs	r3, #1
 800431c:	e7c1      	b.n	80042a2 <_strtod_l+0x16a>
 800431e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004320:	3001      	adds	r0, #1
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	9219      	str	r2, [sp, #100]	; 0x64
 8004326:	785a      	ldrb	r2, [r3, #1]
 8004328:	2a30      	cmp	r2, #48	; 0x30
 800432a:	d0f8      	beq.n	800431e <_strtod_l+0x1e6>
 800432c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004330:	2b08      	cmp	r3, #8
 8004332:	f200 84d5 	bhi.w	8004ce0 <_strtod_l+0xba8>
 8004336:	9004      	str	r0, [sp, #16]
 8004338:	2000      	movs	r0, #0
 800433a:	4604      	mov	r4, r0
 800433c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800433e:	9308      	str	r3, [sp, #32]
 8004340:	3a30      	subs	r2, #48	; 0x30
 8004342:	f100 0301 	add.w	r3, r0, #1
 8004346:	d013      	beq.n	8004370 <_strtod_l+0x238>
 8004348:	9904      	ldr	r1, [sp, #16]
 800434a:	1905      	adds	r5, r0, r4
 800434c:	4419      	add	r1, r3
 800434e:	9104      	str	r1, [sp, #16]
 8004350:	4623      	mov	r3, r4
 8004352:	210a      	movs	r1, #10
 8004354:	42ab      	cmp	r3, r5
 8004356:	d113      	bne.n	8004380 <_strtod_l+0x248>
 8004358:	1823      	adds	r3, r4, r0
 800435a:	2b08      	cmp	r3, #8
 800435c:	f104 0401 	add.w	r4, r4, #1
 8004360:	4404      	add	r4, r0
 8004362:	dc1b      	bgt.n	800439c <_strtod_l+0x264>
 8004364:	230a      	movs	r3, #10
 8004366:	9906      	ldr	r1, [sp, #24]
 8004368:	fb03 2301 	mla	r3, r3, r1, r2
 800436c:	9306      	str	r3, [sp, #24]
 800436e:	2300      	movs	r3, #0
 8004370:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004372:	4618      	mov	r0, r3
 8004374:	1c51      	adds	r1, r2, #1
 8004376:	9119      	str	r1, [sp, #100]	; 0x64
 8004378:	7852      	ldrb	r2, [r2, #1]
 800437a:	e7ca      	b.n	8004312 <_strtod_l+0x1da>
 800437c:	4658      	mov	r0, fp
 800437e:	e7d3      	b.n	8004328 <_strtod_l+0x1f0>
 8004380:	2b08      	cmp	r3, #8
 8004382:	dc04      	bgt.n	800438e <_strtod_l+0x256>
 8004384:	9f06      	ldr	r7, [sp, #24]
 8004386:	434f      	muls	r7, r1
 8004388:	9706      	str	r7, [sp, #24]
 800438a:	3301      	adds	r3, #1
 800438c:	e7e2      	b.n	8004354 <_strtod_l+0x21c>
 800438e:	1c5f      	adds	r7, r3, #1
 8004390:	2f10      	cmp	r7, #16
 8004392:	bfde      	ittt	le
 8004394:	9f05      	ldrle	r7, [sp, #20]
 8004396:	434f      	mulle	r7, r1
 8004398:	9705      	strle	r7, [sp, #20]
 800439a:	e7f6      	b.n	800438a <_strtod_l+0x252>
 800439c:	2c10      	cmp	r4, #16
 800439e:	bfdf      	itttt	le
 80043a0:	230a      	movle	r3, #10
 80043a2:	9905      	ldrle	r1, [sp, #20]
 80043a4:	fb03 2301 	mlale	r3, r3, r1, r2
 80043a8:	9305      	strle	r3, [sp, #20]
 80043aa:	e7e0      	b.n	800436e <_strtod_l+0x236>
 80043ac:	2300      	movs	r3, #0
 80043ae:	9304      	str	r3, [sp, #16]
 80043b0:	2301      	movs	r3, #1
 80043b2:	e77b      	b.n	80042ac <_strtod_l+0x174>
 80043b4:	2700      	movs	r7, #0
 80043b6:	1cb2      	adds	r2, r6, #2
 80043b8:	9219      	str	r2, [sp, #100]	; 0x64
 80043ba:	78b2      	ldrb	r2, [r6, #2]
 80043bc:	e784      	b.n	80042c8 <_strtod_l+0x190>
 80043be:	bf00      	nop
 80043c0:	08008e50 	.word	0x08008e50
 80043c4:	08008c04 	.word	0x08008c04
 80043c8:	7ff00000 	.word	0x7ff00000
 80043cc:	2701      	movs	r7, #1
 80043ce:	e7f2      	b.n	80043b6 <_strtod_l+0x27e>
 80043d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043d2:	1c51      	adds	r1, r2, #1
 80043d4:	9119      	str	r1, [sp, #100]	; 0x64
 80043d6:	7852      	ldrb	r2, [r2, #1]
 80043d8:	2a30      	cmp	r2, #48	; 0x30
 80043da:	d0f9      	beq.n	80043d0 <_strtod_l+0x298>
 80043dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80043e0:	2908      	cmp	r1, #8
 80043e2:	f63f af77 	bhi.w	80042d4 <_strtod_l+0x19c>
 80043e6:	f04f 0e0a 	mov.w	lr, #10
 80043ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80043ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043f0:	9209      	str	r2, [sp, #36]	; 0x24
 80043f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043f4:	1c51      	adds	r1, r2, #1
 80043f6:	9119      	str	r1, [sp, #100]	; 0x64
 80043f8:	7852      	ldrb	r2, [r2, #1]
 80043fa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80043fe:	2d09      	cmp	r5, #9
 8004400:	d935      	bls.n	800446e <_strtod_l+0x336>
 8004402:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004404:	1b49      	subs	r1, r1, r5
 8004406:	2908      	cmp	r1, #8
 8004408:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800440c:	dc02      	bgt.n	8004414 <_strtod_l+0x2dc>
 800440e:	4565      	cmp	r5, ip
 8004410:	bfa8      	it	ge
 8004412:	4665      	movge	r5, ip
 8004414:	b107      	cbz	r7, 8004418 <_strtod_l+0x2e0>
 8004416:	426d      	negs	r5, r5
 8004418:	2c00      	cmp	r4, #0
 800441a:	d14c      	bne.n	80044b6 <_strtod_l+0x37e>
 800441c:	9907      	ldr	r1, [sp, #28]
 800441e:	4301      	orrs	r1, r0
 8004420:	f47f aecb 	bne.w	80041ba <_strtod_l+0x82>
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f aee4 	bne.w	80041f2 <_strtod_l+0xba>
 800442a:	2a69      	cmp	r2, #105	; 0x69
 800442c:	d026      	beq.n	800447c <_strtod_l+0x344>
 800442e:	dc23      	bgt.n	8004478 <_strtod_l+0x340>
 8004430:	2a49      	cmp	r2, #73	; 0x49
 8004432:	d023      	beq.n	800447c <_strtod_l+0x344>
 8004434:	2a4e      	cmp	r2, #78	; 0x4e
 8004436:	f47f aedc 	bne.w	80041f2 <_strtod_l+0xba>
 800443a:	499d      	ldr	r1, [pc, #628]	; (80046b0 <_strtod_l+0x578>)
 800443c:	a819      	add	r0, sp, #100	; 0x64
 800443e:	f001 fe3b 	bl	80060b8 <__match>
 8004442:	2800      	cmp	r0, #0
 8004444:	f43f aed5 	beq.w	80041f2 <_strtod_l+0xba>
 8004448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b28      	cmp	r3, #40	; 0x28
 800444e:	d12c      	bne.n	80044aa <_strtod_l+0x372>
 8004450:	4998      	ldr	r1, [pc, #608]	; (80046b4 <_strtod_l+0x57c>)
 8004452:	aa1c      	add	r2, sp, #112	; 0x70
 8004454:	a819      	add	r0, sp, #100	; 0x64
 8004456:	f001 fe43 	bl	80060e0 <__hexnan>
 800445a:	2805      	cmp	r0, #5
 800445c:	d125      	bne.n	80044aa <_strtod_l+0x372>
 800445e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004460:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004464:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004468:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800446c:	e6a5      	b.n	80041ba <_strtod_l+0x82>
 800446e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004472:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004476:	e7bc      	b.n	80043f2 <_strtod_l+0x2ba>
 8004478:	2a6e      	cmp	r2, #110	; 0x6e
 800447a:	e7dc      	b.n	8004436 <_strtod_l+0x2fe>
 800447c:	498e      	ldr	r1, [pc, #568]	; (80046b8 <_strtod_l+0x580>)
 800447e:	a819      	add	r0, sp, #100	; 0x64
 8004480:	f001 fe1a 	bl	80060b8 <__match>
 8004484:	2800      	cmp	r0, #0
 8004486:	f43f aeb4 	beq.w	80041f2 <_strtod_l+0xba>
 800448a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800448c:	498b      	ldr	r1, [pc, #556]	; (80046bc <_strtod_l+0x584>)
 800448e:	3b01      	subs	r3, #1
 8004490:	a819      	add	r0, sp, #100	; 0x64
 8004492:	9319      	str	r3, [sp, #100]	; 0x64
 8004494:	f001 fe10 	bl	80060b8 <__match>
 8004498:	b910      	cbnz	r0, 80044a0 <_strtod_l+0x368>
 800449a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800449c:	3301      	adds	r3, #1
 800449e:	9319      	str	r3, [sp, #100]	; 0x64
 80044a0:	f04f 0800 	mov.w	r8, #0
 80044a4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80046c0 <_strtod_l+0x588>
 80044a8:	e687      	b.n	80041ba <_strtod_l+0x82>
 80044aa:	4886      	ldr	r0, [pc, #536]	; (80046c4 <_strtod_l+0x58c>)
 80044ac:	f003 f93c 	bl	8007728 <nan>
 80044b0:	4680      	mov	r8, r0
 80044b2:	4689      	mov	r9, r1
 80044b4:	e681      	b.n	80041ba <_strtod_l+0x82>
 80044b6:	9b04      	ldr	r3, [sp, #16]
 80044b8:	f1bb 0f00 	cmp.w	fp, #0
 80044bc:	bf08      	it	eq
 80044be:	46a3      	moveq	fp, r4
 80044c0:	1aeb      	subs	r3, r5, r3
 80044c2:	2c10      	cmp	r4, #16
 80044c4:	9806      	ldr	r0, [sp, #24]
 80044c6:	4626      	mov	r6, r4
 80044c8:	9307      	str	r3, [sp, #28]
 80044ca:	bfa8      	it	ge
 80044cc:	2610      	movge	r6, #16
 80044ce:	f7fb ff89 	bl	80003e4 <__aeabi_ui2d>
 80044d2:	2c09      	cmp	r4, #9
 80044d4:	4680      	mov	r8, r0
 80044d6:	4689      	mov	r9, r1
 80044d8:	dd13      	ble.n	8004502 <_strtod_l+0x3ca>
 80044da:	4b7b      	ldr	r3, [pc, #492]	; (80046c8 <_strtod_l+0x590>)
 80044dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80044e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80044e4:	f7fb fff8 	bl	80004d8 <__aeabi_dmul>
 80044e8:	4680      	mov	r8, r0
 80044ea:	9805      	ldr	r0, [sp, #20]
 80044ec:	4689      	mov	r9, r1
 80044ee:	f7fb ff79 	bl	80003e4 <__aeabi_ui2d>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f7fb fe37 	bl	800016c <__adddf3>
 80044fe:	4680      	mov	r8, r0
 8004500:	4689      	mov	r9, r1
 8004502:	2c0f      	cmp	r4, #15
 8004504:	dc36      	bgt.n	8004574 <_strtod_l+0x43c>
 8004506:	9b07      	ldr	r3, [sp, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f43f ae56 	beq.w	80041ba <_strtod_l+0x82>
 800450e:	dd22      	ble.n	8004556 <_strtod_l+0x41e>
 8004510:	2b16      	cmp	r3, #22
 8004512:	dc09      	bgt.n	8004528 <_strtod_l+0x3f0>
 8004514:	496c      	ldr	r1, [pc, #432]	; (80046c8 <_strtod_l+0x590>)
 8004516:	4642      	mov	r2, r8
 8004518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800451c:	464b      	mov	r3, r9
 800451e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004522:	f7fb ffd9 	bl	80004d8 <__aeabi_dmul>
 8004526:	e7c3      	b.n	80044b0 <_strtod_l+0x378>
 8004528:	9a07      	ldr	r2, [sp, #28]
 800452a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800452e:	4293      	cmp	r3, r2
 8004530:	db20      	blt.n	8004574 <_strtod_l+0x43c>
 8004532:	4d65      	ldr	r5, [pc, #404]	; (80046c8 <_strtod_l+0x590>)
 8004534:	f1c4 040f 	rsb	r4, r4, #15
 8004538:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800453c:	4642      	mov	r2, r8
 800453e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004542:	464b      	mov	r3, r9
 8004544:	f7fb ffc8 	bl	80004d8 <__aeabi_dmul>
 8004548:	9b07      	ldr	r3, [sp, #28]
 800454a:	1b1c      	subs	r4, r3, r4
 800454c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004554:	e7e5      	b.n	8004522 <_strtod_l+0x3ea>
 8004556:	9b07      	ldr	r3, [sp, #28]
 8004558:	3316      	adds	r3, #22
 800455a:	db0b      	blt.n	8004574 <_strtod_l+0x43c>
 800455c:	9b04      	ldr	r3, [sp, #16]
 800455e:	4640      	mov	r0, r8
 8004560:	1b5d      	subs	r5, r3, r5
 8004562:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <_strtod_l+0x590>)
 8004564:	4649      	mov	r1, r9
 8004566:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800456a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800456e:	f7fc f8dd 	bl	800072c <__aeabi_ddiv>
 8004572:	e79d      	b.n	80044b0 <_strtod_l+0x378>
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	1ba6      	subs	r6, r4, r6
 8004578:	441e      	add	r6, r3
 800457a:	2e00      	cmp	r6, #0
 800457c:	dd74      	ble.n	8004668 <_strtod_l+0x530>
 800457e:	f016 030f 	ands.w	r3, r6, #15
 8004582:	d00a      	beq.n	800459a <_strtod_l+0x462>
 8004584:	4950      	ldr	r1, [pc, #320]	; (80046c8 <_strtod_l+0x590>)
 8004586:	4642      	mov	r2, r8
 8004588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800458c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004590:	464b      	mov	r3, r9
 8004592:	f7fb ffa1 	bl	80004d8 <__aeabi_dmul>
 8004596:	4680      	mov	r8, r0
 8004598:	4689      	mov	r9, r1
 800459a:	f036 060f 	bics.w	r6, r6, #15
 800459e:	d052      	beq.n	8004646 <_strtod_l+0x50e>
 80045a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80045a4:	dd27      	ble.n	80045f6 <_strtod_l+0x4be>
 80045a6:	f04f 0b00 	mov.w	fp, #0
 80045aa:	f8cd b010 	str.w	fp, [sp, #16]
 80045ae:	f8cd b020 	str.w	fp, [sp, #32]
 80045b2:	f8cd b018 	str.w	fp, [sp, #24]
 80045b6:	2322      	movs	r3, #34	; 0x22
 80045b8:	f04f 0800 	mov.w	r8, #0
 80045bc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80046c0 <_strtod_l+0x588>
 80045c0:	f8ca 3000 	str.w	r3, [sl]
 80045c4:	9b08      	ldr	r3, [sp, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f43f adf7 	beq.w	80041ba <_strtod_l+0x82>
 80045cc:	4650      	mov	r0, sl
 80045ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045d0:	f001 feae 	bl	8006330 <_Bfree>
 80045d4:	4650      	mov	r0, sl
 80045d6:	9906      	ldr	r1, [sp, #24]
 80045d8:	f001 feaa 	bl	8006330 <_Bfree>
 80045dc:	4650      	mov	r0, sl
 80045de:	9904      	ldr	r1, [sp, #16]
 80045e0:	f001 fea6 	bl	8006330 <_Bfree>
 80045e4:	4650      	mov	r0, sl
 80045e6:	9908      	ldr	r1, [sp, #32]
 80045e8:	f001 fea2 	bl	8006330 <_Bfree>
 80045ec:	4659      	mov	r1, fp
 80045ee:	4650      	mov	r0, sl
 80045f0:	f001 fe9e 	bl	8006330 <_Bfree>
 80045f4:	e5e1      	b.n	80041ba <_strtod_l+0x82>
 80045f6:	4b35      	ldr	r3, [pc, #212]	; (80046cc <_strtod_l+0x594>)
 80045f8:	4640      	mov	r0, r8
 80045fa:	9305      	str	r3, [sp, #20]
 80045fc:	2300      	movs	r3, #0
 80045fe:	4649      	mov	r1, r9
 8004600:	461f      	mov	r7, r3
 8004602:	1136      	asrs	r6, r6, #4
 8004604:	2e01      	cmp	r6, #1
 8004606:	dc21      	bgt.n	800464c <_strtod_l+0x514>
 8004608:	b10b      	cbz	r3, 800460e <_strtod_l+0x4d6>
 800460a:	4680      	mov	r8, r0
 800460c:	4689      	mov	r9, r1
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <_strtod_l+0x594>)
 8004610:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004614:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004618:	4642      	mov	r2, r8
 800461a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800461e:	464b      	mov	r3, r9
 8004620:	f7fb ff5a 	bl	80004d8 <__aeabi_dmul>
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <_strtod_l+0x588>)
 8004626:	460a      	mov	r2, r1
 8004628:	400b      	ands	r3, r1
 800462a:	4929      	ldr	r1, [pc, #164]	; (80046d0 <_strtod_l+0x598>)
 800462c:	4680      	mov	r8, r0
 800462e:	428b      	cmp	r3, r1
 8004630:	d8b9      	bhi.n	80045a6 <_strtod_l+0x46e>
 8004632:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004636:	428b      	cmp	r3, r1
 8004638:	bf86      	itte	hi
 800463a:	f04f 38ff 	movhi.w	r8, #4294967295
 800463e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80046d4 <_strtod_l+0x59c>
 8004642:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004646:	2300      	movs	r3, #0
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	e07f      	b.n	800474c <_strtod_l+0x614>
 800464c:	07f2      	lsls	r2, r6, #31
 800464e:	d505      	bpl.n	800465c <_strtod_l+0x524>
 8004650:	9b05      	ldr	r3, [sp, #20]
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb ff3f 	bl	80004d8 <__aeabi_dmul>
 800465a:	2301      	movs	r3, #1
 800465c:	9a05      	ldr	r2, [sp, #20]
 800465e:	3701      	adds	r7, #1
 8004660:	3208      	adds	r2, #8
 8004662:	1076      	asrs	r6, r6, #1
 8004664:	9205      	str	r2, [sp, #20]
 8004666:	e7cd      	b.n	8004604 <_strtod_l+0x4cc>
 8004668:	d0ed      	beq.n	8004646 <_strtod_l+0x50e>
 800466a:	4276      	negs	r6, r6
 800466c:	f016 020f 	ands.w	r2, r6, #15
 8004670:	d00a      	beq.n	8004688 <_strtod_l+0x550>
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <_strtod_l+0x590>)
 8004674:	4640      	mov	r0, r8
 8004676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800467a:	4649      	mov	r1, r9
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fc f854 	bl	800072c <__aeabi_ddiv>
 8004684:	4680      	mov	r8, r0
 8004686:	4689      	mov	r9, r1
 8004688:	1136      	asrs	r6, r6, #4
 800468a:	d0dc      	beq.n	8004646 <_strtod_l+0x50e>
 800468c:	2e1f      	cmp	r6, #31
 800468e:	dd23      	ble.n	80046d8 <_strtod_l+0x5a0>
 8004690:	f04f 0b00 	mov.w	fp, #0
 8004694:	f8cd b010 	str.w	fp, [sp, #16]
 8004698:	f8cd b020 	str.w	fp, [sp, #32]
 800469c:	f8cd b018 	str.w	fp, [sp, #24]
 80046a0:	2322      	movs	r3, #34	; 0x22
 80046a2:	f04f 0800 	mov.w	r8, #0
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	f8ca 3000 	str.w	r3, [sl]
 80046ae:	e789      	b.n	80045c4 <_strtod_l+0x48c>
 80046b0:	08008bd9 	.word	0x08008bd9
 80046b4:	08008c18 	.word	0x08008c18
 80046b8:	08008bd1 	.word	0x08008bd1
 80046bc:	08008d5c 	.word	0x08008d5c
 80046c0:	7ff00000 	.word	0x7ff00000
 80046c4:	08009023 	.word	0x08009023
 80046c8:	08008ee8 	.word	0x08008ee8
 80046cc:	08008ec0 	.word	0x08008ec0
 80046d0:	7ca00000 	.word	0x7ca00000
 80046d4:	7fefffff 	.word	0x7fefffff
 80046d8:	f016 0310 	ands.w	r3, r6, #16
 80046dc:	bf18      	it	ne
 80046de:	236a      	movne	r3, #106	; 0x6a
 80046e0:	4640      	mov	r0, r8
 80046e2:	9305      	str	r3, [sp, #20]
 80046e4:	4649      	mov	r1, r9
 80046e6:	2300      	movs	r3, #0
 80046e8:	4fb0      	ldr	r7, [pc, #704]	; (80049ac <_strtod_l+0x874>)
 80046ea:	07f2      	lsls	r2, r6, #31
 80046ec:	d504      	bpl.n	80046f8 <_strtod_l+0x5c0>
 80046ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f2:	f7fb fef1 	bl	80004d8 <__aeabi_dmul>
 80046f6:	2301      	movs	r3, #1
 80046f8:	1076      	asrs	r6, r6, #1
 80046fa:	f107 0708 	add.w	r7, r7, #8
 80046fe:	d1f4      	bne.n	80046ea <_strtod_l+0x5b2>
 8004700:	b10b      	cbz	r3, 8004706 <_strtod_l+0x5ce>
 8004702:	4680      	mov	r8, r0
 8004704:	4689      	mov	r9, r1
 8004706:	9b05      	ldr	r3, [sp, #20]
 8004708:	b1c3      	cbz	r3, 800473c <_strtod_l+0x604>
 800470a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800470e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004712:	2b00      	cmp	r3, #0
 8004714:	4649      	mov	r1, r9
 8004716:	dd11      	ble.n	800473c <_strtod_l+0x604>
 8004718:	2b1f      	cmp	r3, #31
 800471a:	f340 8127 	ble.w	800496c <_strtod_l+0x834>
 800471e:	2b34      	cmp	r3, #52	; 0x34
 8004720:	bfd8      	it	le
 8004722:	f04f 33ff 	movle.w	r3, #4294967295
 8004726:	f04f 0800 	mov.w	r8, #0
 800472a:	bfcf      	iteee	gt
 800472c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004730:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004734:	fa03 f202 	lslle.w	r2, r3, r2
 8004738:	ea02 0901 	andle.w	r9, r2, r1
 800473c:	2200      	movs	r2, #0
 800473e:	2300      	movs	r3, #0
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	f7fc f930 	bl	80009a8 <__aeabi_dcmpeq>
 8004748:	2800      	cmp	r0, #0
 800474a:	d1a1      	bne.n	8004690 <_strtod_l+0x558>
 800474c:	9b06      	ldr	r3, [sp, #24]
 800474e:	465a      	mov	r2, fp
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4650      	mov	r0, sl
 8004754:	4623      	mov	r3, r4
 8004756:	9908      	ldr	r1, [sp, #32]
 8004758:	f001 fe52 	bl	8006400 <__s2b>
 800475c:	9008      	str	r0, [sp, #32]
 800475e:	2800      	cmp	r0, #0
 8004760:	f43f af21 	beq.w	80045a6 <_strtod_l+0x46e>
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	f04f 0b00 	mov.w	fp, #0
 800476a:	1b5d      	subs	r5, r3, r5
 800476c:	9b07      	ldr	r3, [sp, #28]
 800476e:	f8cd b010 	str.w	fp, [sp, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	bfb4      	ite	lt
 8004776:	462b      	movlt	r3, r5
 8004778:	2300      	movge	r3, #0
 800477a:	930e      	str	r3, [sp, #56]	; 0x38
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004782:	9314      	str	r3, [sp, #80]	; 0x50
 8004784:	9b08      	ldr	r3, [sp, #32]
 8004786:	4650      	mov	r0, sl
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	f001 fd91 	bl	80062b0 <_Balloc>
 800478e:	9006      	str	r0, [sp, #24]
 8004790:	2800      	cmp	r0, #0
 8004792:	f43f af10 	beq.w	80045b6 <_strtod_l+0x47e>
 8004796:	9b08      	ldr	r3, [sp, #32]
 8004798:	300c      	adds	r0, #12
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	f103 010c 	add.w	r1, r3, #12
 80047a0:	3202      	adds	r2, #2
 80047a2:	0092      	lsls	r2, r2, #2
 80047a4:	f001 fd76 	bl	8006294 <memcpy>
 80047a8:	ab1c      	add	r3, sp, #112	; 0x70
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	4650      	mov	r0, sl
 80047b6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80047ba:	f002 f963 	bl	8006a84 <__d2b>
 80047be:	901a      	str	r0, [sp, #104]	; 0x68
 80047c0:	2800      	cmp	r0, #0
 80047c2:	f43f aef8 	beq.w	80045b6 <_strtod_l+0x47e>
 80047c6:	2101      	movs	r1, #1
 80047c8:	4650      	mov	r0, sl
 80047ca:	f001 feb1 	bl	8006530 <__i2b>
 80047ce:	4603      	mov	r3, r0
 80047d0:	9004      	str	r0, [sp, #16]
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f43f aeef 	beq.w	80045b6 <_strtod_l+0x47e>
 80047d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80047da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80047dc:	2d00      	cmp	r5, #0
 80047de:	bfab      	itete	ge
 80047e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80047e2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80047e4:	18ee      	addge	r6, r5, r3
 80047e6:	1b5c      	sublt	r4, r3, r5
 80047e8:	9b05      	ldr	r3, [sp, #20]
 80047ea:	bfa8      	it	ge
 80047ec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80047ee:	eba5 0503 	sub.w	r5, r5, r3
 80047f2:	4415      	add	r5, r2
 80047f4:	4b6e      	ldr	r3, [pc, #440]	; (80049b0 <_strtod_l+0x878>)
 80047f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80047fa:	bfb8      	it	lt
 80047fc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80047fe:	429d      	cmp	r5, r3
 8004800:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004804:	f280 80c4 	bge.w	8004990 <_strtod_l+0x858>
 8004808:	1b5b      	subs	r3, r3, r5
 800480a:	2b1f      	cmp	r3, #31
 800480c:	f04f 0701 	mov.w	r7, #1
 8004810:	eba2 0203 	sub.w	r2, r2, r3
 8004814:	f300 80b1 	bgt.w	800497a <_strtod_l+0x842>
 8004818:	2500      	movs	r5, #0
 800481a:	fa07 f303 	lsl.w	r3, r7, r3
 800481e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004820:	18b7      	adds	r7, r6, r2
 8004822:	9b05      	ldr	r3, [sp, #20]
 8004824:	42be      	cmp	r6, r7
 8004826:	4414      	add	r4, r2
 8004828:	441c      	add	r4, r3
 800482a:	4633      	mov	r3, r6
 800482c:	bfa8      	it	ge
 800482e:	463b      	movge	r3, r7
 8004830:	42a3      	cmp	r3, r4
 8004832:	bfa8      	it	ge
 8004834:	4623      	movge	r3, r4
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfc2      	ittt	gt
 800483a:	1aff      	subgt	r7, r7, r3
 800483c:	1ae4      	subgt	r4, r4, r3
 800483e:	1af6      	subgt	r6, r6, r3
 8004840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004842:	2b00      	cmp	r3, #0
 8004844:	dd17      	ble.n	8004876 <_strtod_l+0x73e>
 8004846:	461a      	mov	r2, r3
 8004848:	4650      	mov	r0, sl
 800484a:	9904      	ldr	r1, [sp, #16]
 800484c:	f001 ff2e 	bl	80066ac <__pow5mult>
 8004850:	9004      	str	r0, [sp, #16]
 8004852:	2800      	cmp	r0, #0
 8004854:	f43f aeaf 	beq.w	80045b6 <_strtod_l+0x47e>
 8004858:	4601      	mov	r1, r0
 800485a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800485c:	4650      	mov	r0, sl
 800485e:	f001 fe7d 	bl	800655c <__multiply>
 8004862:	9009      	str	r0, [sp, #36]	; 0x24
 8004864:	2800      	cmp	r0, #0
 8004866:	f43f aea6 	beq.w	80045b6 <_strtod_l+0x47e>
 800486a:	4650      	mov	r0, sl
 800486c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800486e:	f001 fd5f 	bl	8006330 <_Bfree>
 8004872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004874:	931a      	str	r3, [sp, #104]	; 0x68
 8004876:	2f00      	cmp	r7, #0
 8004878:	f300 808e 	bgt.w	8004998 <_strtod_l+0x860>
 800487c:	9b07      	ldr	r3, [sp, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd08      	ble.n	8004894 <_strtod_l+0x75c>
 8004882:	4650      	mov	r0, sl
 8004884:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004886:	9906      	ldr	r1, [sp, #24]
 8004888:	f001 ff10 	bl	80066ac <__pow5mult>
 800488c:	9006      	str	r0, [sp, #24]
 800488e:	2800      	cmp	r0, #0
 8004890:	f43f ae91 	beq.w	80045b6 <_strtod_l+0x47e>
 8004894:	2c00      	cmp	r4, #0
 8004896:	dd08      	ble.n	80048aa <_strtod_l+0x772>
 8004898:	4622      	mov	r2, r4
 800489a:	4650      	mov	r0, sl
 800489c:	9906      	ldr	r1, [sp, #24]
 800489e:	f001 ff5f 	bl	8006760 <__lshift>
 80048a2:	9006      	str	r0, [sp, #24]
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f43f ae86 	beq.w	80045b6 <_strtod_l+0x47e>
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	dd08      	ble.n	80048c0 <_strtod_l+0x788>
 80048ae:	4632      	mov	r2, r6
 80048b0:	4650      	mov	r0, sl
 80048b2:	9904      	ldr	r1, [sp, #16]
 80048b4:	f001 ff54 	bl	8006760 <__lshift>
 80048b8:	9004      	str	r0, [sp, #16]
 80048ba:	2800      	cmp	r0, #0
 80048bc:	f43f ae7b 	beq.w	80045b6 <_strtod_l+0x47e>
 80048c0:	4650      	mov	r0, sl
 80048c2:	9a06      	ldr	r2, [sp, #24]
 80048c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048c6:	f001 ffd7 	bl	8006878 <__mdiff>
 80048ca:	4683      	mov	fp, r0
 80048cc:	2800      	cmp	r0, #0
 80048ce:	f43f ae72 	beq.w	80045b6 <_strtod_l+0x47e>
 80048d2:	2400      	movs	r4, #0
 80048d4:	68c3      	ldr	r3, [r0, #12]
 80048d6:	9904      	ldr	r1, [sp, #16]
 80048d8:	60c4      	str	r4, [r0, #12]
 80048da:	930b      	str	r3, [sp, #44]	; 0x2c
 80048dc:	f001 ffb0 	bl	8006840 <__mcmp>
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	da6b      	bge.n	80049bc <_strtod_l+0x884>
 80048e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048e6:	ea53 0308 	orrs.w	r3, r3, r8
 80048ea:	f040 8091 	bne.w	8004a10 <_strtod_l+0x8d8>
 80048ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 808c 	bne.w	8004a10 <_strtod_l+0x8d8>
 80048f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048fc:	0d1b      	lsrs	r3, r3, #20
 80048fe:	051b      	lsls	r3, r3, #20
 8004900:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004904:	f240 8084 	bls.w	8004a10 <_strtod_l+0x8d8>
 8004908:	f8db 3014 	ldr.w	r3, [fp, #20]
 800490c:	b91b      	cbnz	r3, 8004916 <_strtod_l+0x7de>
 800490e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	dd7c      	ble.n	8004a10 <_strtod_l+0x8d8>
 8004916:	4659      	mov	r1, fp
 8004918:	2201      	movs	r2, #1
 800491a:	4650      	mov	r0, sl
 800491c:	f001 ff20 	bl	8006760 <__lshift>
 8004920:	9904      	ldr	r1, [sp, #16]
 8004922:	4683      	mov	fp, r0
 8004924:	f001 ff8c 	bl	8006840 <__mcmp>
 8004928:	2800      	cmp	r0, #0
 800492a:	dd71      	ble.n	8004a10 <_strtod_l+0x8d8>
 800492c:	9905      	ldr	r1, [sp, #20]
 800492e:	464b      	mov	r3, r9
 8004930:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <_strtod_l+0x87c>)
 8004932:	2900      	cmp	r1, #0
 8004934:	f000 808c 	beq.w	8004a50 <_strtod_l+0x918>
 8004938:	ea02 0109 	and.w	r1, r2, r9
 800493c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004940:	f300 8086 	bgt.w	8004a50 <_strtod_l+0x918>
 8004944:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004948:	f77f aeaa 	ble.w	80046a0 <_strtod_l+0x568>
 800494c:	4640      	mov	r0, r8
 800494e:	4649      	mov	r1, r9
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <_strtod_l+0x880>)
 8004952:	2200      	movs	r2, #0
 8004954:	f7fb fdc0 	bl	80004d8 <__aeabi_dmul>
 8004958:	460b      	mov	r3, r1
 800495a:	4303      	orrs	r3, r0
 800495c:	bf08      	it	eq
 800495e:	2322      	moveq	r3, #34	; 0x22
 8004960:	4680      	mov	r8, r0
 8004962:	4689      	mov	r9, r1
 8004964:	bf08      	it	eq
 8004966:	f8ca 3000 	streq.w	r3, [sl]
 800496a:	e62f      	b.n	80045cc <_strtod_l+0x494>
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	ea03 0808 	and.w	r8, r3, r8
 8004978:	e6e0      	b.n	800473c <_strtod_l+0x604>
 800497a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800497e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004982:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004986:	35e2      	adds	r5, #226	; 0xe2
 8004988:	fa07 f505 	lsl.w	r5, r7, r5
 800498c:	970f      	str	r7, [sp, #60]	; 0x3c
 800498e:	e747      	b.n	8004820 <_strtod_l+0x6e8>
 8004990:	2301      	movs	r3, #1
 8004992:	2500      	movs	r5, #0
 8004994:	930f      	str	r3, [sp, #60]	; 0x3c
 8004996:	e743      	b.n	8004820 <_strtod_l+0x6e8>
 8004998:	463a      	mov	r2, r7
 800499a:	4650      	mov	r0, sl
 800499c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800499e:	f001 fedf 	bl	8006760 <__lshift>
 80049a2:	901a      	str	r0, [sp, #104]	; 0x68
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f47f af69 	bne.w	800487c <_strtod_l+0x744>
 80049aa:	e604      	b.n	80045b6 <_strtod_l+0x47e>
 80049ac:	08008c30 	.word	0x08008c30
 80049b0:	fffffc02 	.word	0xfffffc02
 80049b4:	7ff00000 	.word	0x7ff00000
 80049b8:	39500000 	.word	0x39500000
 80049bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80049c0:	d165      	bne.n	8004a8e <_strtod_l+0x956>
 80049c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049c8:	b35a      	cbz	r2, 8004a22 <_strtod_l+0x8ea>
 80049ca:	4a99      	ldr	r2, [pc, #612]	; (8004c30 <_strtod_l+0xaf8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d12b      	bne.n	8004a28 <_strtod_l+0x8f0>
 80049d0:	9b05      	ldr	r3, [sp, #20]
 80049d2:	4641      	mov	r1, r8
 80049d4:	b303      	cbz	r3, 8004a18 <_strtod_l+0x8e0>
 80049d6:	464a      	mov	r2, r9
 80049d8:	4b96      	ldr	r3, [pc, #600]	; (8004c34 <_strtod_l+0xafc>)
 80049da:	4013      	ands	r3, r2
 80049dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295
 80049e4:	d81b      	bhi.n	8004a1e <_strtod_l+0x8e6>
 80049e6:	0d1b      	lsrs	r3, r3, #20
 80049e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	4299      	cmp	r1, r3
 80049f2:	d119      	bne.n	8004a28 <_strtod_l+0x8f0>
 80049f4:	4b90      	ldr	r3, [pc, #576]	; (8004c38 <_strtod_l+0xb00>)
 80049f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d102      	bne.n	8004a02 <_strtod_l+0x8ca>
 80049fc:	3101      	adds	r1, #1
 80049fe:	f43f adda 	beq.w	80045b6 <_strtod_l+0x47e>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	4b8b      	ldr	r3, [pc, #556]	; (8004c34 <_strtod_l+0xafc>)
 8004a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004a10:	9b05      	ldr	r3, [sp, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d19a      	bne.n	800494c <_strtod_l+0x814>
 8004a16:	e5d9      	b.n	80045cc <_strtod_l+0x494>
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	e7e8      	b.n	80049f0 <_strtod_l+0x8b8>
 8004a1e:	4613      	mov	r3, r2
 8004a20:	e7e6      	b.n	80049f0 <_strtod_l+0x8b8>
 8004a22:	ea53 0308 	orrs.w	r3, r3, r8
 8004a26:	d081      	beq.n	800492c <_strtod_l+0x7f4>
 8004a28:	b1e5      	cbz	r5, 8004a64 <_strtod_l+0x92c>
 8004a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2c:	421d      	tst	r5, r3
 8004a2e:	d0ef      	beq.n	8004a10 <_strtod_l+0x8d8>
 8004a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a32:	4640      	mov	r0, r8
 8004a34:	4649      	mov	r1, r9
 8004a36:	9a05      	ldr	r2, [sp, #20]
 8004a38:	b1c3      	cbz	r3, 8004a6c <_strtod_l+0x934>
 8004a3a:	f7ff fb5c 	bl	80040f6 <sulp>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a46:	f7fb fb91 	bl	800016c <__adddf3>
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	4689      	mov	r9, r1
 8004a4e:	e7df      	b.n	8004a10 <_strtod_l+0x8d8>
 8004a50:	4013      	ands	r3, r2
 8004a52:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004a56:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004a5a:	f04f 38ff 	mov.w	r8, #4294967295
 8004a5e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004a62:	e7d5      	b.n	8004a10 <_strtod_l+0x8d8>
 8004a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a66:	ea13 0f08 	tst.w	r3, r8
 8004a6a:	e7e0      	b.n	8004a2e <_strtod_l+0x8f6>
 8004a6c:	f7ff fb43 	bl	80040f6 <sulp>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a78:	f7fb fb76 	bl	8000168 <__aeabi_dsub>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4680      	mov	r8, r0
 8004a82:	4689      	mov	r9, r1
 8004a84:	f7fb ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d0c1      	beq.n	8004a10 <_strtod_l+0x8d8>
 8004a8c:	e608      	b.n	80046a0 <_strtod_l+0x568>
 8004a8e:	4658      	mov	r0, fp
 8004a90:	9904      	ldr	r1, [sp, #16]
 8004a92:	f002 f853 	bl	8006b3c <__ratio>
 8004a96:	2200      	movs	r2, #0
 8004a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	f7fb ff96 	bl	80009d0 <__aeabi_dcmple>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d070      	beq.n	8004b8a <_strtod_l+0xa52>
 8004aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d042      	beq.n	8004b34 <_strtod_l+0x9fc>
 8004aae:	2600      	movs	r6, #0
 8004ab0:	4f62      	ldr	r7, [pc, #392]	; (8004c3c <_strtod_l+0xb04>)
 8004ab2:	4d62      	ldr	r5, [pc, #392]	; (8004c3c <_strtod_l+0xb04>)
 8004ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aba:	0d1b      	lsrs	r3, r3, #20
 8004abc:	051b      	lsls	r3, r3, #20
 8004abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ac2:	4b5f      	ldr	r3, [pc, #380]	; (8004c40 <_strtod_l+0xb08>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 80c3 	bne.w	8004c50 <_strtod_l+0xb18>
 8004aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004acc:	4640      	mov	r0, r8
 8004ace:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f001 ff5c 	bl	8006990 <__ulp>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4630      	mov	r0, r6
 8004ade:	4639      	mov	r1, r7
 8004ae0:	f7fb fcfa 	bl	80004d8 <__aeabi_dmul>
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	f7fb fb40 	bl	800016c <__adddf3>
 8004aec:	460b      	mov	r3, r1
 8004aee:	4951      	ldr	r1, [pc, #324]	; (8004c34 <_strtod_l+0xafc>)
 8004af0:	4a54      	ldr	r2, [pc, #336]	; (8004c44 <_strtod_l+0xb0c>)
 8004af2:	4019      	ands	r1, r3
 8004af4:	4291      	cmp	r1, r2
 8004af6:	4680      	mov	r8, r0
 8004af8:	d95d      	bls.n	8004bb6 <_strtod_l+0xa7e>
 8004afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004afc:	4b4e      	ldr	r3, [pc, #312]	; (8004c38 <_strtod_l+0xb00>)
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d103      	bne.n	8004b0a <_strtod_l+0x9d2>
 8004b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b04:	3301      	adds	r3, #1
 8004b06:	f43f ad56 	beq.w	80045b6 <_strtod_l+0x47e>
 8004b0a:	f04f 38ff 	mov.w	r8, #4294967295
 8004b0e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004c38 <_strtod_l+0xb00>
 8004b12:	4650      	mov	r0, sl
 8004b14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b16:	f001 fc0b 	bl	8006330 <_Bfree>
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	9906      	ldr	r1, [sp, #24]
 8004b1e:	f001 fc07 	bl	8006330 <_Bfree>
 8004b22:	4650      	mov	r0, sl
 8004b24:	9904      	ldr	r1, [sp, #16]
 8004b26:	f001 fc03 	bl	8006330 <_Bfree>
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	f001 fbff 	bl	8006330 <_Bfree>
 8004b32:	e627      	b.n	8004784 <_strtod_l+0x64c>
 8004b34:	f1b8 0f00 	cmp.w	r8, #0
 8004b38:	d119      	bne.n	8004b6e <_strtod_l+0xa36>
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b40:	b9e3      	cbnz	r3, 8004b7c <_strtod_l+0xa44>
 8004b42:	2200      	movs	r2, #0
 8004b44:	4630      	mov	r0, r6
 8004b46:	4639      	mov	r1, r7
 8004b48:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <_strtod_l+0xb04>)
 8004b4a:	f7fb ff37 	bl	80009bc <__aeabi_dcmplt>
 8004b4e:	b9c8      	cbnz	r0, 8004b84 <_strtod_l+0xa4c>
 8004b50:	2200      	movs	r2, #0
 8004b52:	4630      	mov	r0, r6
 8004b54:	4639      	mov	r1, r7
 8004b56:	4b3c      	ldr	r3, [pc, #240]	; (8004c48 <_strtod_l+0xb10>)
 8004b58:	f7fb fcbe 	bl	80004d8 <__aeabi_dmul>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	460d      	mov	r5, r1
 8004b60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004b64:	9416      	str	r4, [sp, #88]	; 0x58
 8004b66:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b68:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004b6c:	e7a2      	b.n	8004ab4 <_strtod_l+0x97c>
 8004b6e:	f1b8 0f01 	cmp.w	r8, #1
 8004b72:	d103      	bne.n	8004b7c <_strtod_l+0xa44>
 8004b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f43f ad92 	beq.w	80046a0 <_strtod_l+0x568>
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	2400      	movs	r4, #0
 8004b80:	4f32      	ldr	r7, [pc, #200]	; (8004c4c <_strtod_l+0xb14>)
 8004b82:	e796      	b.n	8004ab2 <_strtod_l+0x97a>
 8004b84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004b86:	4d30      	ldr	r5, [pc, #192]	; (8004c48 <_strtod_l+0xb10>)
 8004b88:	e7ea      	b.n	8004b60 <_strtod_l+0xa28>
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <_strtod_l+0xb10>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4630      	mov	r0, r6
 8004b90:	4639      	mov	r1, r7
 8004b92:	f7fb fca1 	bl	80004d8 <__aeabi_dmul>
 8004b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b98:	4604      	mov	r4, r0
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	b933      	cbnz	r3, 8004bac <_strtod_l+0xa74>
 8004b9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ba2:	9010      	str	r0, [sp, #64]	; 0x40
 8004ba4:	9311      	str	r3, [sp, #68]	; 0x44
 8004ba6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004baa:	e783      	b.n	8004ab4 <_strtod_l+0x97c>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004bb4:	e7f7      	b.n	8004ba6 <_strtod_l+0xa6e>
 8004bb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004bba:	9b05      	ldr	r3, [sp, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1a8      	bne.n	8004b12 <_strtod_l+0x9da>
 8004bc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bc6:	0d1b      	lsrs	r3, r3, #20
 8004bc8:	051b      	lsls	r3, r3, #20
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d1a1      	bne.n	8004b12 <_strtod_l+0x9da>
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f7fb ffc9 	bl	8000b68 <__aeabi_d2lz>
 8004bd6:	f7fb fc51 	bl	800047c <__aeabi_l2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4620      	mov	r0, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f7fb fac1 	bl	8000168 <__aeabi_dsub>
 8004be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bec:	ea43 0308 	orr.w	r3, r3, r8
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	d066      	beq.n	8004cc6 <_strtod_l+0xb8e>
 8004bf8:	a309      	add	r3, pc, #36	; (adr r3, 8004c20 <_strtod_l+0xae8>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fedd 	bl	80009bc <__aeabi_dcmplt>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f47f ace2 	bne.w	80045cc <_strtod_l+0x494>
 8004c08:	a307      	add	r3, pc, #28	; (adr r3, 8004c28 <_strtod_l+0xaf0>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	4620      	mov	r0, r4
 8004c10:	4629      	mov	r1, r5
 8004c12:	f7fb fef1 	bl	80009f8 <__aeabi_dcmpgt>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f43f af7b 	beq.w	8004b12 <_strtod_l+0x9da>
 8004c1c:	e4d6      	b.n	80045cc <_strtod_l+0x494>
 8004c1e:	bf00      	nop
 8004c20:	94a03595 	.word	0x94a03595
 8004c24:	3fdfffff 	.word	0x3fdfffff
 8004c28:	35afe535 	.word	0x35afe535
 8004c2c:	3fe00000 	.word	0x3fe00000
 8004c30:	000fffff 	.word	0x000fffff
 8004c34:	7ff00000 	.word	0x7ff00000
 8004c38:	7fefffff 	.word	0x7fefffff
 8004c3c:	3ff00000 	.word	0x3ff00000
 8004c40:	7fe00000 	.word	0x7fe00000
 8004c44:	7c9fffff 	.word	0x7c9fffff
 8004c48:	3fe00000 	.word	0x3fe00000
 8004c4c:	bff00000 	.word	0xbff00000
 8004c50:	9b05      	ldr	r3, [sp, #20]
 8004c52:	b313      	cbz	r3, 8004c9a <_strtod_l+0xb62>
 8004c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004c5a:	d81e      	bhi.n	8004c9a <_strtod_l+0xb62>
 8004c5c:	a326      	add	r3, pc, #152	; (adr r3, 8004cf8 <_strtod_l+0xbc0>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	4620      	mov	r0, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7fb feb3 	bl	80009d0 <__aeabi_dcmple>
 8004c6a:	b190      	cbz	r0, 8004c92 <_strtod_l+0xb5a>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f7fb ff0a 	bl	8000a88 <__aeabi_d2uiz>
 8004c74:	2801      	cmp	r0, #1
 8004c76:	bf38      	it	cc
 8004c78:	2001      	movcc	r0, #1
 8004c7a:	f7fb fbb3 	bl	80003e4 <__aeabi_ui2d>
 8004c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c80:	4604      	mov	r4, r0
 8004c82:	460d      	mov	r5, r1
 8004c84:	b9d3      	cbnz	r3, 8004cbc <_strtod_l+0xb84>
 8004c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c8a:	9012      	str	r0, [sp, #72]	; 0x48
 8004c8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c8e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004c92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c94:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004c98:	1a9f      	subs	r7, r3, r2
 8004c9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c9e:	f001 fe77 	bl	8006990 <__ulp>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4639      	mov	r1, r7
 8004caa:	f7fb fc15 	bl	80004d8 <__aeabi_dmul>
 8004cae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004cb2:	f7fb fa5b 	bl	800016c <__adddf3>
 8004cb6:	4680      	mov	r8, r0
 8004cb8:	4689      	mov	r9, r1
 8004cba:	e77e      	b.n	8004bba <_strtod_l+0xa82>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004cc4:	e7e3      	b.n	8004c8e <_strtod_l+0xb56>
 8004cc6:	a30e      	add	r3, pc, #56	; (adr r3, 8004d00 <_strtod_l+0xbc8>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fe76 	bl	80009bc <__aeabi_dcmplt>
 8004cd0:	e7a1      	b.n	8004c16 <_strtod_l+0xade>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	f7ff ba71 	b.w	80041c2 <_strtod_l+0x8a>
 8004ce0:	2a65      	cmp	r2, #101	; 0x65
 8004ce2:	f43f ab63 	beq.w	80043ac <_strtod_l+0x274>
 8004ce6:	2a45      	cmp	r2, #69	; 0x45
 8004ce8:	f43f ab60 	beq.w	80043ac <_strtod_l+0x274>
 8004cec:	2301      	movs	r3, #1
 8004cee:	f7ff bb95 	b.w	800441c <_strtod_l+0x2e4>
 8004cf2:	bf00      	nop
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	ffc00000 	.word	0xffc00000
 8004cfc:	41dfffff 	.word	0x41dfffff
 8004d00:	94a03595 	.word	0x94a03595
 8004d04:	3fcfffff 	.word	0x3fcfffff

08004d08 <_strtod_r>:
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <_strtod_r+0x8>)
 8004d0a:	f7ff ba15 	b.w	8004138 <_strtod_l>
 8004d0e:	bf00      	nop
 8004d10:	20000080 	.word	0x20000080

08004d14 <_strtol_l.constprop.0>:
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	d001      	beq.n	8004d22 <_strtol_l.constprop.0+0xe>
 8004d1e:	2b24      	cmp	r3, #36	; 0x24
 8004d20:	d906      	bls.n	8004d30 <_strtol_l.constprop.0+0x1c>
 8004d22:	f7fe faa5 	bl	8003270 <__errno>
 8004d26:	2316      	movs	r3, #22
 8004d28:	6003      	str	r3, [r0, #0]
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	460d      	mov	r5, r1
 8004d32:	4f35      	ldr	r7, [pc, #212]	; (8004e08 <_strtol_l.constprop.0+0xf4>)
 8004d34:	4628      	mov	r0, r5
 8004d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d3a:	5de6      	ldrb	r6, [r4, r7]
 8004d3c:	f016 0608 	ands.w	r6, r6, #8
 8004d40:	d1f8      	bne.n	8004d34 <_strtol_l.constprop.0+0x20>
 8004d42:	2c2d      	cmp	r4, #45	; 0x2d
 8004d44:	d12f      	bne.n	8004da6 <_strtol_l.constprop.0+0x92>
 8004d46:	2601      	movs	r6, #1
 8004d48:	782c      	ldrb	r4, [r5, #0]
 8004d4a:	1c85      	adds	r5, r0, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d057      	beq.n	8004e00 <_strtol_l.constprop.0+0xec>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d109      	bne.n	8004d68 <_strtol_l.constprop.0+0x54>
 8004d54:	2c30      	cmp	r4, #48	; 0x30
 8004d56:	d107      	bne.n	8004d68 <_strtol_l.constprop.0+0x54>
 8004d58:	7828      	ldrb	r0, [r5, #0]
 8004d5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004d5e:	2858      	cmp	r0, #88	; 0x58
 8004d60:	d149      	bne.n	8004df6 <_strtol_l.constprop.0+0xe2>
 8004d62:	2310      	movs	r3, #16
 8004d64:	786c      	ldrb	r4, [r5, #1]
 8004d66:	3502      	adds	r5, #2
 8004d68:	2700      	movs	r7, #0
 8004d6a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004d6e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004d72:	fbbe f9f3 	udiv	r9, lr, r3
 8004d76:	4638      	mov	r0, r7
 8004d78:	fb03 ea19 	mls	sl, r3, r9, lr
 8004d7c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004d80:	f1bc 0f09 	cmp.w	ip, #9
 8004d84:	d814      	bhi.n	8004db0 <_strtol_l.constprop.0+0x9c>
 8004d86:	4664      	mov	r4, ip
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	dd22      	ble.n	8004dd2 <_strtol_l.constprop.0+0xbe>
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	db1d      	blt.n	8004dcc <_strtol_l.constprop.0+0xb8>
 8004d90:	4581      	cmp	r9, r0
 8004d92:	d31b      	bcc.n	8004dcc <_strtol_l.constprop.0+0xb8>
 8004d94:	d101      	bne.n	8004d9a <_strtol_l.constprop.0+0x86>
 8004d96:	45a2      	cmp	sl, r4
 8004d98:	db18      	blt.n	8004dcc <_strtol_l.constprop.0+0xb8>
 8004d9a:	2701      	movs	r7, #1
 8004d9c:	fb00 4003 	mla	r0, r0, r3, r4
 8004da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004da4:	e7ea      	b.n	8004d7c <_strtol_l.constprop.0+0x68>
 8004da6:	2c2b      	cmp	r4, #43	; 0x2b
 8004da8:	bf04      	itt	eq
 8004daa:	782c      	ldrbeq	r4, [r5, #0]
 8004dac:	1c85      	addeq	r5, r0, #2
 8004dae:	e7cd      	b.n	8004d4c <_strtol_l.constprop.0+0x38>
 8004db0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004db4:	f1bc 0f19 	cmp.w	ip, #25
 8004db8:	d801      	bhi.n	8004dbe <_strtol_l.constprop.0+0xaa>
 8004dba:	3c37      	subs	r4, #55	; 0x37
 8004dbc:	e7e4      	b.n	8004d88 <_strtol_l.constprop.0+0x74>
 8004dbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004dc2:	f1bc 0f19 	cmp.w	ip, #25
 8004dc6:	d804      	bhi.n	8004dd2 <_strtol_l.constprop.0+0xbe>
 8004dc8:	3c57      	subs	r4, #87	; 0x57
 8004dca:	e7dd      	b.n	8004d88 <_strtol_l.constprop.0+0x74>
 8004dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8004dd0:	e7e6      	b.n	8004da0 <_strtol_l.constprop.0+0x8c>
 8004dd2:	2f00      	cmp	r7, #0
 8004dd4:	da07      	bge.n	8004de6 <_strtol_l.constprop.0+0xd2>
 8004dd6:	2322      	movs	r3, #34	; 0x22
 8004dd8:	4670      	mov	r0, lr
 8004dda:	f8c8 3000 	str.w	r3, [r8]
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	d0a4      	beq.n	8004d2c <_strtol_l.constprop.0+0x18>
 8004de2:	1e69      	subs	r1, r5, #1
 8004de4:	e005      	b.n	8004df2 <_strtol_l.constprop.0+0xde>
 8004de6:	b106      	cbz	r6, 8004dea <_strtol_l.constprop.0+0xd6>
 8004de8:	4240      	negs	r0, r0
 8004dea:	2a00      	cmp	r2, #0
 8004dec:	d09e      	beq.n	8004d2c <_strtol_l.constprop.0+0x18>
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	d1f7      	bne.n	8004de2 <_strtol_l.constprop.0+0xce>
 8004df2:	6011      	str	r1, [r2, #0]
 8004df4:	e79a      	b.n	8004d2c <_strtol_l.constprop.0+0x18>
 8004df6:	2430      	movs	r4, #48	; 0x30
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1b5      	bne.n	8004d68 <_strtol_l.constprop.0+0x54>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	e7b3      	b.n	8004d68 <_strtol_l.constprop.0+0x54>
 8004e00:	2c30      	cmp	r4, #48	; 0x30
 8004e02:	d0a9      	beq.n	8004d58 <_strtol_l.constprop.0+0x44>
 8004e04:	230a      	movs	r3, #10
 8004e06:	e7af      	b.n	8004d68 <_strtol_l.constprop.0+0x54>
 8004e08:	08008c59 	.word	0x08008c59

08004e0c <_strtol_r>:
 8004e0c:	f7ff bf82 	b.w	8004d14 <_strtol_l.constprop.0>

08004e10 <_write_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4604      	mov	r4, r0
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4d05      	ldr	r5, [pc, #20]	; (8004e30 <_write_r+0x20>)
 8004e1c:	602a      	str	r2, [r5, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f7fc faa6 	bl	8001370 <_write>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_write_r+0x1e>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_write_r+0x1e>
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	200003b8 	.word	0x200003b8

08004e34 <_close_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	2300      	movs	r3, #0
 8004e38:	4d05      	ldr	r5, [pc, #20]	; (8004e50 <_close_r+0x1c>)
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fc fab2 	bl	80013a8 <_close>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_close_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_close_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200003b8 	.word	0x200003b8

08004e54 <quorem>:
 8004e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	6903      	ldr	r3, [r0, #16]
 8004e5a:	690c      	ldr	r4, [r1, #16]
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	f2c0 8082 	blt.w	8004f68 <quorem+0x114>
 8004e64:	3c01      	subs	r4, #1
 8004e66:	f100 0514 	add.w	r5, r0, #20
 8004e6a:	f101 0814 	add.w	r8, r1, #20
 8004e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e8c:	d331      	bcc.n	8004ef2 <quorem+0x9e>
 8004e8e:	f04f 0e00 	mov.w	lr, #0
 8004e92:	4640      	mov	r0, r8
 8004e94:	46ac      	mov	ip, r5
 8004e96:	46f2      	mov	sl, lr
 8004e98:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e9c:	b293      	uxth	r3, r2
 8004e9e:	fb06 e303 	mla	r3, r6, r3, lr
 8004ea2:	0c12      	lsrs	r2, r2, #16
 8004ea4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	fb06 e202 	mla	r2, r6, r2, lr
 8004eae:	ebaa 0303 	sub.w	r3, sl, r3
 8004eb2:	f8dc a000 	ldr.w	sl, [ip]
 8004eb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eba:	fa1f fa8a 	uxth.w	sl, sl
 8004ebe:	4453      	add	r3, sl
 8004ec0:	f8dc a000 	ldr.w	sl, [ip]
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004eca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed4:	4581      	cmp	r9, r0
 8004ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004eda:	f84c 3b04 	str.w	r3, [ip], #4
 8004ede:	d2db      	bcs.n	8004e98 <quorem+0x44>
 8004ee0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ee4:	b92b      	cbnz	r3, 8004ef2 <quorem+0x9e>
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	429d      	cmp	r5, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	d32f      	bcc.n	8004f50 <quorem+0xfc>
 8004ef0:	613c      	str	r4, [r7, #16]
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f001 fca4 	bl	8006840 <__mcmp>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	db25      	blt.n	8004f48 <quorem+0xf4>
 8004efc:	4628      	mov	r0, r5
 8004efe:	f04f 0c00 	mov.w	ip, #0
 8004f02:	3601      	adds	r6, #1
 8004f04:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f08:	f8d0 e000 	ldr.w	lr, [r0]
 8004f0c:	b28b      	uxth	r3, r1
 8004f0e:	ebac 0303 	sub.w	r3, ip, r3
 8004f12:	fa1f f28e 	uxth.w	r2, lr
 8004f16:	4413      	add	r3, r2
 8004f18:	0c0a      	lsrs	r2, r1, #16
 8004f1a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f28:	45c1      	cmp	r9, r8
 8004f2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f2e:	f840 3b04 	str.w	r3, [r0], #4
 8004f32:	d2e7      	bcs.n	8004f04 <quorem+0xb0>
 8004f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f3c:	b922      	cbnz	r2, 8004f48 <quorem+0xf4>
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	429d      	cmp	r5, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	d30a      	bcc.n	8004f5c <quorem+0x108>
 8004f46:	613c      	str	r4, [r7, #16]
 8004f48:	4630      	mov	r0, r6
 8004f4a:	b003      	add	sp, #12
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	3b04      	subs	r3, #4
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	d1cb      	bne.n	8004ef0 <quorem+0x9c>
 8004f58:	3c01      	subs	r4, #1
 8004f5a:	e7c6      	b.n	8004eea <quorem+0x96>
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	3b04      	subs	r3, #4
 8004f60:	2a00      	cmp	r2, #0
 8004f62:	d1f0      	bne.n	8004f46 <quorem+0xf2>
 8004f64:	3c01      	subs	r4, #1
 8004f66:	e7eb      	b.n	8004f40 <quorem+0xec>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e7ee      	b.n	8004f4a <quorem+0xf6>
 8004f6c:	0000      	movs	r0, r0
	...

08004f70 <_dtoa_r>:
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	4616      	mov	r6, r2
 8004f76:	461f      	mov	r7, r3
 8004f78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f7a:	b099      	sub	sp, #100	; 0x64
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004f86:	b974      	cbnz	r4, 8004fa6 <_dtoa_r+0x36>
 8004f88:	2010      	movs	r0, #16
 8004f8a:	f001 f95b 	bl	8006244 <malloc>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6268      	str	r0, [r5, #36]	; 0x24
 8004f92:	b920      	cbnz	r0, 8004f9e <_dtoa_r+0x2e>
 8004f94:	21ea      	movs	r1, #234	; 0xea
 8004f96:	4ba8      	ldr	r3, [pc, #672]	; (8005238 <_dtoa_r+0x2c8>)
 8004f98:	48a8      	ldr	r0, [pc, #672]	; (800523c <_dtoa_r+0x2cc>)
 8004f9a:	f002 fce1 	bl	8007960 <__assert_func>
 8004f9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fa2:	6004      	str	r4, [r0, #0]
 8004fa4:	60c4      	str	r4, [r0, #12]
 8004fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	b151      	cbz	r1, 8004fc2 <_dtoa_r+0x52>
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4093      	lsls	r3, r2
 8004fb2:	604a      	str	r2, [r1, #4]
 8004fb4:	608b      	str	r3, [r1, #8]
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f001 f9ba 	bl	8006330 <_Bfree>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	1e3b      	subs	r3, r7, #0
 8004fc4:	bfaf      	iteee	ge
 8004fc6:	2300      	movge	r3, #0
 8004fc8:	2201      	movlt	r2, #1
 8004fca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fce:	9305      	strlt	r3, [sp, #20]
 8004fd0:	bfa8      	it	ge
 8004fd2:	f8c8 3000 	strge.w	r3, [r8]
 8004fd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004fda:	4b99      	ldr	r3, [pc, #612]	; (8005240 <_dtoa_r+0x2d0>)
 8004fdc:	bfb8      	it	lt
 8004fde:	f8c8 2000 	strlt.w	r2, [r8]
 8004fe2:	ea33 0309 	bics.w	r3, r3, r9
 8004fe6:	d119      	bne.n	800501c <_dtoa_r+0xac>
 8004fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ff4:	4333      	orrs	r3, r6
 8004ff6:	f000 857f 	beq.w	8005af8 <_dtoa_r+0xb88>
 8004ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ffc:	b953      	cbnz	r3, 8005014 <_dtoa_r+0xa4>
 8004ffe:	4b91      	ldr	r3, [pc, #580]	; (8005244 <_dtoa_r+0x2d4>)
 8005000:	e022      	b.n	8005048 <_dtoa_r+0xd8>
 8005002:	4b91      	ldr	r3, [pc, #580]	; (8005248 <_dtoa_r+0x2d8>)
 8005004:	9303      	str	r3, [sp, #12]
 8005006:	3308      	adds	r3, #8
 8005008:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	9803      	ldr	r0, [sp, #12]
 800500e:	b019      	add	sp, #100	; 0x64
 8005010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005014:	4b8b      	ldr	r3, [pc, #556]	; (8005244 <_dtoa_r+0x2d4>)
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	3303      	adds	r3, #3
 800501a:	e7f5      	b.n	8005008 <_dtoa_r+0x98>
 800501c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005020:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005028:	2200      	movs	r2, #0
 800502a:	2300      	movs	r3, #0
 800502c:	f7fb fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8005030:	4680      	mov	r8, r0
 8005032:	b158      	cbz	r0, 800504c <_dtoa_r+0xdc>
 8005034:	2301      	movs	r3, #1
 8005036:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8558 	beq.w	8005af2 <_dtoa_r+0xb82>
 8005042:	4882      	ldr	r0, [pc, #520]	; (800524c <_dtoa_r+0x2dc>)
 8005044:	6018      	str	r0, [r3, #0]
 8005046:	1e43      	subs	r3, r0, #1
 8005048:	9303      	str	r3, [sp, #12]
 800504a:	e7df      	b.n	800500c <_dtoa_r+0x9c>
 800504c:	ab16      	add	r3, sp, #88	; 0x58
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	ab17      	add	r3, sp, #92	; 0x5c
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	4628      	mov	r0, r5
 8005056:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800505a:	f001 fd13 	bl	8006a84 <__d2b>
 800505e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005062:	4683      	mov	fp, r0
 8005064:	2c00      	cmp	r4, #0
 8005066:	d07f      	beq.n	8005168 <_dtoa_r+0x1f8>
 8005068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800506c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800506e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005076:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800507a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800507e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005082:	2200      	movs	r2, #0
 8005084:	4b72      	ldr	r3, [pc, #456]	; (8005250 <_dtoa_r+0x2e0>)
 8005086:	f7fb f86f 	bl	8000168 <__aeabi_dsub>
 800508a:	a365      	add	r3, pc, #404	; (adr r3, 8005220 <_dtoa_r+0x2b0>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f7fb fa22 	bl	80004d8 <__aeabi_dmul>
 8005094:	a364      	add	r3, pc, #400	; (adr r3, 8005228 <_dtoa_r+0x2b8>)
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f7fb f867 	bl	800016c <__adddf3>
 800509e:	4606      	mov	r6, r0
 80050a0:	4620      	mov	r0, r4
 80050a2:	460f      	mov	r7, r1
 80050a4:	f7fb f9ae 	bl	8000404 <__aeabi_i2d>
 80050a8:	a361      	add	r3, pc, #388	; (adr r3, 8005230 <_dtoa_r+0x2c0>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb fa13 	bl	80004d8 <__aeabi_dmul>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4630      	mov	r0, r6
 80050b8:	4639      	mov	r1, r7
 80050ba:	f7fb f857 	bl	800016c <__adddf3>
 80050be:	4606      	mov	r6, r0
 80050c0:	460f      	mov	r7, r1
 80050c2:	f7fb fcb9 	bl	8000a38 <__aeabi_d2iz>
 80050c6:	2200      	movs	r2, #0
 80050c8:	4682      	mov	sl, r0
 80050ca:	2300      	movs	r3, #0
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb fc74 	bl	80009bc <__aeabi_dcmplt>
 80050d4:	b148      	cbz	r0, 80050ea <_dtoa_r+0x17a>
 80050d6:	4650      	mov	r0, sl
 80050d8:	f7fb f994 	bl	8000404 <__aeabi_i2d>
 80050dc:	4632      	mov	r2, r6
 80050de:	463b      	mov	r3, r7
 80050e0:	f7fb fc62 	bl	80009a8 <__aeabi_dcmpeq>
 80050e4:	b908      	cbnz	r0, 80050ea <_dtoa_r+0x17a>
 80050e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ea:	f1ba 0f16 	cmp.w	sl, #22
 80050ee:	d858      	bhi.n	80051a2 <_dtoa_r+0x232>
 80050f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050f4:	4b57      	ldr	r3, [pc, #348]	; (8005254 <_dtoa_r+0x2e4>)
 80050f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb fc5d 	bl	80009bc <__aeabi_dcmplt>
 8005102:	2800      	cmp	r0, #0
 8005104:	d04f      	beq.n	80051a6 <_dtoa_r+0x236>
 8005106:	2300      	movs	r3, #0
 8005108:	f10a 3aff 	add.w	sl, sl, #4294967295
 800510c:	930f      	str	r3, [sp, #60]	; 0x3c
 800510e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005110:	1b1c      	subs	r4, r3, r4
 8005112:	1e63      	subs	r3, r4, #1
 8005114:	9309      	str	r3, [sp, #36]	; 0x24
 8005116:	bf49      	itett	mi
 8005118:	f1c4 0301 	rsbmi	r3, r4, #1
 800511c:	2300      	movpl	r3, #0
 800511e:	9306      	strmi	r3, [sp, #24]
 8005120:	2300      	movmi	r3, #0
 8005122:	bf54      	ite	pl
 8005124:	9306      	strpl	r3, [sp, #24]
 8005126:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005128:	f1ba 0f00 	cmp.w	sl, #0
 800512c:	db3d      	blt.n	80051aa <_dtoa_r+0x23a>
 800512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005130:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005134:	4453      	add	r3, sl
 8005136:	9309      	str	r3, [sp, #36]	; 0x24
 8005138:	2300      	movs	r3, #0
 800513a:	930a      	str	r3, [sp, #40]	; 0x28
 800513c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800513e:	2b09      	cmp	r3, #9
 8005140:	f200 808c 	bhi.w	800525c <_dtoa_r+0x2ec>
 8005144:	2b05      	cmp	r3, #5
 8005146:	bfc4      	itt	gt
 8005148:	3b04      	subgt	r3, #4
 800514a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800514c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800514e:	bfc8      	it	gt
 8005150:	2400      	movgt	r4, #0
 8005152:	f1a3 0302 	sub.w	r3, r3, #2
 8005156:	bfd8      	it	le
 8005158:	2401      	movle	r4, #1
 800515a:	2b03      	cmp	r3, #3
 800515c:	f200 808a 	bhi.w	8005274 <_dtoa_r+0x304>
 8005160:	e8df f003 	tbb	[pc, r3]
 8005164:	5b4d4f2d 	.word	0x5b4d4f2d
 8005168:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800516c:	441c      	add	r4, r3
 800516e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005172:	2b20      	cmp	r3, #32
 8005174:	bfc3      	ittte	gt
 8005176:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800517a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800517e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005182:	f1c3 0320 	rsble	r3, r3, #32
 8005186:	bfc6      	itte	gt
 8005188:	fa26 f000 	lsrgt.w	r0, r6, r0
 800518c:	4318      	orrgt	r0, r3
 800518e:	fa06 f003 	lslle.w	r0, r6, r3
 8005192:	f7fb f927 	bl	80003e4 <__aeabi_ui2d>
 8005196:	2301      	movs	r3, #1
 8005198:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800519c:	3c01      	subs	r4, #1
 800519e:	9313      	str	r3, [sp, #76]	; 0x4c
 80051a0:	e76f      	b.n	8005082 <_dtoa_r+0x112>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7b2      	b.n	800510c <_dtoa_r+0x19c>
 80051a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80051a8:	e7b1      	b.n	800510e <_dtoa_r+0x19e>
 80051aa:	9b06      	ldr	r3, [sp, #24]
 80051ac:	eba3 030a 	sub.w	r3, r3, sl
 80051b0:	9306      	str	r3, [sp, #24]
 80051b2:	f1ca 0300 	rsb	r3, sl, #0
 80051b6:	930a      	str	r3, [sp, #40]	; 0x28
 80051b8:	2300      	movs	r3, #0
 80051ba:	930e      	str	r3, [sp, #56]	; 0x38
 80051bc:	e7be      	b.n	800513c <_dtoa_r+0x1cc>
 80051be:	2300      	movs	r3, #0
 80051c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80051c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dc58      	bgt.n	800527a <_dtoa_r+0x30a>
 80051c8:	f04f 0901 	mov.w	r9, #1
 80051cc:	464b      	mov	r3, r9
 80051ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80051d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80051d6:	2200      	movs	r2, #0
 80051d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80051da:	6042      	str	r2, [r0, #4]
 80051dc:	2204      	movs	r2, #4
 80051de:	f102 0614 	add.w	r6, r2, #20
 80051e2:	429e      	cmp	r6, r3
 80051e4:	6841      	ldr	r1, [r0, #4]
 80051e6:	d94e      	bls.n	8005286 <_dtoa_r+0x316>
 80051e8:	4628      	mov	r0, r5
 80051ea:	f001 f861 	bl	80062b0 <_Balloc>
 80051ee:	9003      	str	r0, [sp, #12]
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d14c      	bne.n	800528e <_dtoa_r+0x31e>
 80051f4:	4602      	mov	r2, r0
 80051f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051fa:	4b17      	ldr	r3, [pc, #92]	; (8005258 <_dtoa_r+0x2e8>)
 80051fc:	e6cc      	b.n	8004f98 <_dtoa_r+0x28>
 80051fe:	2301      	movs	r3, #1
 8005200:	e7de      	b.n	80051c0 <_dtoa_r+0x250>
 8005202:	2300      	movs	r3, #0
 8005204:	930b      	str	r3, [sp, #44]	; 0x2c
 8005206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005208:	eb0a 0903 	add.w	r9, sl, r3
 800520c:	f109 0301 	add.w	r3, r9, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	9308      	str	r3, [sp, #32]
 8005214:	bfb8      	it	lt
 8005216:	2301      	movlt	r3, #1
 8005218:	e7dd      	b.n	80051d6 <_dtoa_r+0x266>
 800521a:	2301      	movs	r3, #1
 800521c:	e7f2      	b.n	8005204 <_dtoa_r+0x294>
 800521e:	bf00      	nop
 8005220:	636f4361 	.word	0x636f4361
 8005224:	3fd287a7 	.word	0x3fd287a7
 8005228:	8b60c8b3 	.word	0x8b60c8b3
 800522c:	3fc68a28 	.word	0x3fc68a28
 8005230:	509f79fb 	.word	0x509f79fb
 8005234:	3fd34413 	.word	0x3fd34413
 8005238:	08008d66 	.word	0x08008d66
 800523c:	08008d7d 	.word	0x08008d7d
 8005240:	7ff00000 	.word	0x7ff00000
 8005244:	08008d62 	.word	0x08008d62
 8005248:	08008d59 	.word	0x08008d59
 800524c:	08008fd2 	.word	0x08008fd2
 8005250:	3ff80000 	.word	0x3ff80000
 8005254:	08008ee8 	.word	0x08008ee8
 8005258:	08008dd8 	.word	0x08008dd8
 800525c:	2401      	movs	r4, #1
 800525e:	2300      	movs	r3, #0
 8005260:	940b      	str	r4, [sp, #44]	; 0x2c
 8005262:	9322      	str	r3, [sp, #136]	; 0x88
 8005264:	f04f 39ff 	mov.w	r9, #4294967295
 8005268:	2200      	movs	r2, #0
 800526a:	2312      	movs	r3, #18
 800526c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005270:	9223      	str	r2, [sp, #140]	; 0x8c
 8005272:	e7b0      	b.n	80051d6 <_dtoa_r+0x266>
 8005274:	2301      	movs	r3, #1
 8005276:	930b      	str	r3, [sp, #44]	; 0x2c
 8005278:	e7f4      	b.n	8005264 <_dtoa_r+0x2f4>
 800527a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800527e:	464b      	mov	r3, r9
 8005280:	f8cd 9020 	str.w	r9, [sp, #32]
 8005284:	e7a7      	b.n	80051d6 <_dtoa_r+0x266>
 8005286:	3101      	adds	r1, #1
 8005288:	6041      	str	r1, [r0, #4]
 800528a:	0052      	lsls	r2, r2, #1
 800528c:	e7a7      	b.n	80051de <_dtoa_r+0x26e>
 800528e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005290:	9a03      	ldr	r2, [sp, #12]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	9b08      	ldr	r3, [sp, #32]
 8005296:	2b0e      	cmp	r3, #14
 8005298:	f200 80a8 	bhi.w	80053ec <_dtoa_r+0x47c>
 800529c:	2c00      	cmp	r4, #0
 800529e:	f000 80a5 	beq.w	80053ec <_dtoa_r+0x47c>
 80052a2:	f1ba 0f00 	cmp.w	sl, #0
 80052a6:	dd34      	ble.n	8005312 <_dtoa_r+0x3a2>
 80052a8:	4a9a      	ldr	r2, [pc, #616]	; (8005514 <_dtoa_r+0x5a4>)
 80052aa:	f00a 030f 	and.w	r3, sl, #15
 80052ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80052b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80052c2:	d016      	beq.n	80052f2 <_dtoa_r+0x382>
 80052c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052c8:	4b93      	ldr	r3, [pc, #588]	; (8005518 <_dtoa_r+0x5a8>)
 80052ca:	2703      	movs	r7, #3
 80052cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052d0:	f7fb fa2c 	bl	800072c <__aeabi_ddiv>
 80052d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d8:	f004 040f 	and.w	r4, r4, #15
 80052dc:	4e8e      	ldr	r6, [pc, #568]	; (8005518 <_dtoa_r+0x5a8>)
 80052de:	b954      	cbnz	r4, 80052f6 <_dtoa_r+0x386>
 80052e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052e8:	f7fb fa20 	bl	800072c <__aeabi_ddiv>
 80052ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052f0:	e029      	b.n	8005346 <_dtoa_r+0x3d6>
 80052f2:	2702      	movs	r7, #2
 80052f4:	e7f2      	b.n	80052dc <_dtoa_r+0x36c>
 80052f6:	07e1      	lsls	r1, r4, #31
 80052f8:	d508      	bpl.n	800530c <_dtoa_r+0x39c>
 80052fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005302:	f7fb f8e9 	bl	80004d8 <__aeabi_dmul>
 8005306:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800530a:	3701      	adds	r7, #1
 800530c:	1064      	asrs	r4, r4, #1
 800530e:	3608      	adds	r6, #8
 8005310:	e7e5      	b.n	80052de <_dtoa_r+0x36e>
 8005312:	f000 80a5 	beq.w	8005460 <_dtoa_r+0x4f0>
 8005316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800531a:	f1ca 0400 	rsb	r4, sl, #0
 800531e:	4b7d      	ldr	r3, [pc, #500]	; (8005514 <_dtoa_r+0x5a4>)
 8005320:	f004 020f 	and.w	r2, r4, #15
 8005324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f7fb f8d4 	bl	80004d8 <__aeabi_dmul>
 8005330:	2702      	movs	r7, #2
 8005332:	2300      	movs	r3, #0
 8005334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005338:	4e77      	ldr	r6, [pc, #476]	; (8005518 <_dtoa_r+0x5a8>)
 800533a:	1124      	asrs	r4, r4, #4
 800533c:	2c00      	cmp	r4, #0
 800533e:	f040 8084 	bne.w	800544a <_dtoa_r+0x4da>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1d2      	bne.n	80052ec <_dtoa_r+0x37c>
 8005346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 808b 	beq.w	8005464 <_dtoa_r+0x4f4>
 800534e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005352:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005356:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800535a:	2200      	movs	r2, #0
 800535c:	4b6f      	ldr	r3, [pc, #444]	; (800551c <_dtoa_r+0x5ac>)
 800535e:	f7fb fb2d 	bl	80009bc <__aeabi_dcmplt>
 8005362:	2800      	cmp	r0, #0
 8005364:	d07e      	beq.n	8005464 <_dtoa_r+0x4f4>
 8005366:	9b08      	ldr	r3, [sp, #32]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d07b      	beq.n	8005464 <_dtoa_r+0x4f4>
 800536c:	f1b9 0f00 	cmp.w	r9, #0
 8005370:	dd38      	ble.n	80053e4 <_dtoa_r+0x474>
 8005372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005376:	2200      	movs	r2, #0
 8005378:	4b69      	ldr	r3, [pc, #420]	; (8005520 <_dtoa_r+0x5b0>)
 800537a:	f7fb f8ad 	bl	80004d8 <__aeabi_dmul>
 800537e:	464c      	mov	r4, r9
 8005380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005384:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005388:	3701      	adds	r7, #1
 800538a:	4638      	mov	r0, r7
 800538c:	f7fb f83a 	bl	8000404 <__aeabi_i2d>
 8005390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005394:	f7fb f8a0 	bl	80004d8 <__aeabi_dmul>
 8005398:	2200      	movs	r2, #0
 800539a:	4b62      	ldr	r3, [pc, #392]	; (8005524 <_dtoa_r+0x5b4>)
 800539c:	f7fa fee6 	bl	800016c <__adddf3>
 80053a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053a8:	9611      	str	r6, [sp, #68]	; 0x44
 80053aa:	2c00      	cmp	r4, #0
 80053ac:	d15d      	bne.n	800546a <_dtoa_r+0x4fa>
 80053ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b2:	2200      	movs	r2, #0
 80053b4:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <_dtoa_r+0x5b8>)
 80053b6:	f7fa fed7 	bl	8000168 <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053c2:	4633      	mov	r3, r6
 80053c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053c6:	f7fb fb17 	bl	80009f8 <__aeabi_dcmpgt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	f040 829c 	bne.w	8005908 <_dtoa_r+0x998>
 80053d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80053da:	f7fb faef 	bl	80009bc <__aeabi_dcmplt>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f040 8290 	bne.w	8005904 <_dtoa_r+0x994>
 80053e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80053e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f2c0 8152 	blt.w	8005698 <_dtoa_r+0x728>
 80053f4:	f1ba 0f0e 	cmp.w	sl, #14
 80053f8:	f300 814e 	bgt.w	8005698 <_dtoa_r+0x728>
 80053fc:	4b45      	ldr	r3, [pc, #276]	; (8005514 <_dtoa_r+0x5a4>)
 80053fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005402:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005406:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800540a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800540c:	2b00      	cmp	r3, #0
 800540e:	f280 80db 	bge.w	80055c8 <_dtoa_r+0x658>
 8005412:	9b08      	ldr	r3, [sp, #32]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f300 80d7 	bgt.w	80055c8 <_dtoa_r+0x658>
 800541a:	f040 8272 	bne.w	8005902 <_dtoa_r+0x992>
 800541e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005422:	2200      	movs	r2, #0
 8005424:	4b40      	ldr	r3, [pc, #256]	; (8005528 <_dtoa_r+0x5b8>)
 8005426:	f7fb f857 	bl	80004d8 <__aeabi_dmul>
 800542a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542e:	f7fb fad9 	bl	80009e4 <__aeabi_dcmpge>
 8005432:	9c08      	ldr	r4, [sp, #32]
 8005434:	4626      	mov	r6, r4
 8005436:	2800      	cmp	r0, #0
 8005438:	f040 8248 	bne.w	80058cc <_dtoa_r+0x95c>
 800543c:	2331      	movs	r3, #49	; 0x31
 800543e:	9f03      	ldr	r7, [sp, #12]
 8005440:	f10a 0a01 	add.w	sl, sl, #1
 8005444:	f807 3b01 	strb.w	r3, [r7], #1
 8005448:	e244      	b.n	80058d4 <_dtoa_r+0x964>
 800544a:	07e2      	lsls	r2, r4, #31
 800544c:	d505      	bpl.n	800545a <_dtoa_r+0x4ea>
 800544e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005452:	f7fb f841 	bl	80004d8 <__aeabi_dmul>
 8005456:	2301      	movs	r3, #1
 8005458:	3701      	adds	r7, #1
 800545a:	1064      	asrs	r4, r4, #1
 800545c:	3608      	adds	r6, #8
 800545e:	e76d      	b.n	800533c <_dtoa_r+0x3cc>
 8005460:	2702      	movs	r7, #2
 8005462:	e770      	b.n	8005346 <_dtoa_r+0x3d6>
 8005464:	46d0      	mov	r8, sl
 8005466:	9c08      	ldr	r4, [sp, #32]
 8005468:	e78f      	b.n	800538a <_dtoa_r+0x41a>
 800546a:	9903      	ldr	r1, [sp, #12]
 800546c:	4b29      	ldr	r3, [pc, #164]	; (8005514 <_dtoa_r+0x5a4>)
 800546e:	4421      	add	r1, r4
 8005470:	9112      	str	r1, [sp, #72]	; 0x48
 8005472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005478:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800547c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005480:	2900      	cmp	r1, #0
 8005482:	d055      	beq.n	8005530 <_dtoa_r+0x5c0>
 8005484:	2000      	movs	r0, #0
 8005486:	4929      	ldr	r1, [pc, #164]	; (800552c <_dtoa_r+0x5bc>)
 8005488:	f7fb f950 	bl	800072c <__aeabi_ddiv>
 800548c:	463b      	mov	r3, r7
 800548e:	4632      	mov	r2, r6
 8005490:	f7fa fe6a 	bl	8000168 <__aeabi_dsub>
 8005494:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005498:	9f03      	ldr	r7, [sp, #12]
 800549a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800549e:	f7fb facb 	bl	8000a38 <__aeabi_d2iz>
 80054a2:	4604      	mov	r4, r0
 80054a4:	f7fa ffae 	bl	8000404 <__aeabi_i2d>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054b0:	f7fa fe5a 	bl	8000168 <__aeabi_dsub>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	3430      	adds	r4, #48	; 0x30
 80054ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054c2:	f807 4b01 	strb.w	r4, [r7], #1
 80054c6:	f7fb fa79 	bl	80009bc <__aeabi_dcmplt>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d174      	bne.n	80055b8 <_dtoa_r+0x648>
 80054ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d2:	2000      	movs	r0, #0
 80054d4:	4911      	ldr	r1, [pc, #68]	; (800551c <_dtoa_r+0x5ac>)
 80054d6:	f7fa fe47 	bl	8000168 <__aeabi_dsub>
 80054da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054de:	f7fb fa6d 	bl	80009bc <__aeabi_dcmplt>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	f040 80b7 	bne.w	8005656 <_dtoa_r+0x6e6>
 80054e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054ea:	429f      	cmp	r7, r3
 80054ec:	f43f af7a 	beq.w	80053e4 <_dtoa_r+0x474>
 80054f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054f4:	2200      	movs	r2, #0
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <_dtoa_r+0x5b0>)
 80054f8:	f7fa ffee 	bl	80004d8 <__aeabi_dmul>
 80054fc:	2200      	movs	r2, #0
 80054fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <_dtoa_r+0x5b0>)
 8005508:	f7fa ffe6 	bl	80004d8 <__aeabi_dmul>
 800550c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005510:	e7c3      	b.n	800549a <_dtoa_r+0x52a>
 8005512:	bf00      	nop
 8005514:	08008ee8 	.word	0x08008ee8
 8005518:	08008ec0 	.word	0x08008ec0
 800551c:	3ff00000 	.word	0x3ff00000
 8005520:	40240000 	.word	0x40240000
 8005524:	401c0000 	.word	0x401c0000
 8005528:	40140000 	.word	0x40140000
 800552c:	3fe00000 	.word	0x3fe00000
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fa ffd0 	bl	80004d8 <__aeabi_dmul>
 8005538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800553a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800553e:	9c03      	ldr	r4, [sp, #12]
 8005540:	9314      	str	r3, [sp, #80]	; 0x50
 8005542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005546:	f7fb fa77 	bl	8000a38 <__aeabi_d2iz>
 800554a:	9015      	str	r0, [sp, #84]	; 0x54
 800554c:	f7fa ff5a 	bl	8000404 <__aeabi_i2d>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005558:	f7fa fe06 	bl	8000168 <__aeabi_dsub>
 800555c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800555e:	4606      	mov	r6, r0
 8005560:	3330      	adds	r3, #48	; 0x30
 8005562:	f804 3b01 	strb.w	r3, [r4], #1
 8005566:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005568:	460f      	mov	r7, r1
 800556a:	429c      	cmp	r4, r3
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	d124      	bne.n	80055bc <_dtoa_r+0x64c>
 8005572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005576:	4bb0      	ldr	r3, [pc, #704]	; (8005838 <_dtoa_r+0x8c8>)
 8005578:	f7fa fdf8 	bl	800016c <__adddf3>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4630      	mov	r0, r6
 8005582:	4639      	mov	r1, r7
 8005584:	f7fb fa38 	bl	80009f8 <__aeabi_dcmpgt>
 8005588:	2800      	cmp	r0, #0
 800558a:	d163      	bne.n	8005654 <_dtoa_r+0x6e4>
 800558c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005590:	2000      	movs	r0, #0
 8005592:	49a9      	ldr	r1, [pc, #676]	; (8005838 <_dtoa_r+0x8c8>)
 8005594:	f7fa fde8 	bl	8000168 <__aeabi_dsub>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4630      	mov	r0, r6
 800559e:	4639      	mov	r1, r7
 80055a0:	f7fb fa0c 	bl	80009bc <__aeabi_dcmplt>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f43f af1d 	beq.w	80053e4 <_dtoa_r+0x474>
 80055aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055ac:	1e7b      	subs	r3, r7, #1
 80055ae:	9314      	str	r3, [sp, #80]	; 0x50
 80055b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80055b4:	2b30      	cmp	r3, #48	; 0x30
 80055b6:	d0f8      	beq.n	80055aa <_dtoa_r+0x63a>
 80055b8:	46c2      	mov	sl, r8
 80055ba:	e03b      	b.n	8005634 <_dtoa_r+0x6c4>
 80055bc:	4b9f      	ldr	r3, [pc, #636]	; (800583c <_dtoa_r+0x8cc>)
 80055be:	f7fa ff8b 	bl	80004d8 <__aeabi_dmul>
 80055c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055c6:	e7bc      	b.n	8005542 <_dtoa_r+0x5d2>
 80055c8:	9f03      	ldr	r7, [sp, #12]
 80055ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80055ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	f7fb f8a9 	bl	800072c <__aeabi_ddiv>
 80055da:	f7fb fa2d 	bl	8000a38 <__aeabi_d2iz>
 80055de:	4604      	mov	r4, r0
 80055e0:	f7fa ff10 	bl	8000404 <__aeabi_i2d>
 80055e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055e8:	f7fa ff76 	bl	80004d8 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4640      	mov	r0, r8
 80055f2:	4649      	mov	r1, r9
 80055f4:	f7fa fdb8 	bl	8000168 <__aeabi_dsub>
 80055f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80055fc:	f807 6b01 	strb.w	r6, [r7], #1
 8005600:	9e03      	ldr	r6, [sp, #12]
 8005602:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005606:	1bbe      	subs	r6, r7, r6
 8005608:	45b4      	cmp	ip, r6
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	d136      	bne.n	800567e <_dtoa_r+0x70e>
 8005610:	f7fa fdac 	bl	800016c <__adddf3>
 8005614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005618:	4680      	mov	r8, r0
 800561a:	4689      	mov	r9, r1
 800561c:	f7fb f9ec 	bl	80009f8 <__aeabi_dcmpgt>
 8005620:	bb58      	cbnz	r0, 800567a <_dtoa_r+0x70a>
 8005622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fb f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800562e:	b108      	cbz	r0, 8005634 <_dtoa_r+0x6c4>
 8005630:	07e1      	lsls	r1, r4, #31
 8005632:	d422      	bmi.n	800567a <_dtoa_r+0x70a>
 8005634:	4628      	mov	r0, r5
 8005636:	4659      	mov	r1, fp
 8005638:	f000 fe7a 	bl	8006330 <_Bfree>
 800563c:	2300      	movs	r3, #0
 800563e:	703b      	strb	r3, [r7, #0]
 8005640:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005642:	f10a 0001 	add.w	r0, sl, #1
 8005646:	6018      	str	r0, [r3, #0]
 8005648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800564a:	2b00      	cmp	r3, #0
 800564c:	f43f acde 	beq.w	800500c <_dtoa_r+0x9c>
 8005650:	601f      	str	r7, [r3, #0]
 8005652:	e4db      	b.n	800500c <_dtoa_r+0x9c>
 8005654:	4627      	mov	r7, r4
 8005656:	463b      	mov	r3, r7
 8005658:	461f      	mov	r7, r3
 800565a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800565e:	2a39      	cmp	r2, #57	; 0x39
 8005660:	d107      	bne.n	8005672 <_dtoa_r+0x702>
 8005662:	9a03      	ldr	r2, [sp, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d1f7      	bne.n	8005658 <_dtoa_r+0x6e8>
 8005668:	2230      	movs	r2, #48	; 0x30
 800566a:	9903      	ldr	r1, [sp, #12]
 800566c:	f108 0801 	add.w	r8, r8, #1
 8005670:	700a      	strb	r2, [r1, #0]
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	3201      	adds	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e79e      	b.n	80055b8 <_dtoa_r+0x648>
 800567a:	46d0      	mov	r8, sl
 800567c:	e7eb      	b.n	8005656 <_dtoa_r+0x6e6>
 800567e:	2200      	movs	r2, #0
 8005680:	4b6e      	ldr	r3, [pc, #440]	; (800583c <_dtoa_r+0x8cc>)
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	2200      	movs	r2, #0
 8005688:	2300      	movs	r3, #0
 800568a:	4680      	mov	r8, r0
 800568c:	4689      	mov	r9, r1
 800568e:	f7fb f98b 	bl	80009a8 <__aeabi_dcmpeq>
 8005692:	2800      	cmp	r0, #0
 8005694:	d09b      	beq.n	80055ce <_dtoa_r+0x65e>
 8005696:	e7cd      	b.n	8005634 <_dtoa_r+0x6c4>
 8005698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800569a:	2a00      	cmp	r2, #0
 800569c:	f000 80d0 	beq.w	8005840 <_dtoa_r+0x8d0>
 80056a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056a2:	2a01      	cmp	r2, #1
 80056a4:	f300 80ae 	bgt.w	8005804 <_dtoa_r+0x894>
 80056a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	f000 80a6 	beq.w	80057fc <_dtoa_r+0x88c>
 80056b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056b6:	9f06      	ldr	r7, [sp, #24]
 80056b8:	9a06      	ldr	r2, [sp, #24]
 80056ba:	2101      	movs	r1, #1
 80056bc:	441a      	add	r2, r3
 80056be:	9206      	str	r2, [sp, #24]
 80056c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056c2:	4628      	mov	r0, r5
 80056c4:	441a      	add	r2, r3
 80056c6:	9209      	str	r2, [sp, #36]	; 0x24
 80056c8:	f000 ff32 	bl	8006530 <__i2b>
 80056cc:	4606      	mov	r6, r0
 80056ce:	2f00      	cmp	r7, #0
 80056d0:	dd0c      	ble.n	80056ec <_dtoa_r+0x77c>
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	dd09      	ble.n	80056ec <_dtoa_r+0x77c>
 80056d8:	42bb      	cmp	r3, r7
 80056da:	bfa8      	it	ge
 80056dc:	463b      	movge	r3, r7
 80056de:	9a06      	ldr	r2, [sp, #24]
 80056e0:	1aff      	subs	r7, r7, r3
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	9206      	str	r2, [sp, #24]
 80056e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	9309      	str	r3, [sp, #36]	; 0x24
 80056ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ee:	b1f3      	cbz	r3, 800572e <_dtoa_r+0x7be>
 80056f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a8 	beq.w	8005848 <_dtoa_r+0x8d8>
 80056f8:	2c00      	cmp	r4, #0
 80056fa:	dd10      	ble.n	800571e <_dtoa_r+0x7ae>
 80056fc:	4631      	mov	r1, r6
 80056fe:	4622      	mov	r2, r4
 8005700:	4628      	mov	r0, r5
 8005702:	f000 ffd3 	bl	80066ac <__pow5mult>
 8005706:	465a      	mov	r2, fp
 8005708:	4601      	mov	r1, r0
 800570a:	4606      	mov	r6, r0
 800570c:	4628      	mov	r0, r5
 800570e:	f000 ff25 	bl	800655c <__multiply>
 8005712:	4680      	mov	r8, r0
 8005714:	4659      	mov	r1, fp
 8005716:	4628      	mov	r0, r5
 8005718:	f000 fe0a 	bl	8006330 <_Bfree>
 800571c:	46c3      	mov	fp, r8
 800571e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005720:	1b1a      	subs	r2, r3, r4
 8005722:	d004      	beq.n	800572e <_dtoa_r+0x7be>
 8005724:	4659      	mov	r1, fp
 8005726:	4628      	mov	r0, r5
 8005728:	f000 ffc0 	bl	80066ac <__pow5mult>
 800572c:	4683      	mov	fp, r0
 800572e:	2101      	movs	r1, #1
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fefd 	bl	8006530 <__i2b>
 8005736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005738:	4604      	mov	r4, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	f340 8086 	ble.w	800584c <_dtoa_r+0x8dc>
 8005740:	461a      	mov	r2, r3
 8005742:	4601      	mov	r1, r0
 8005744:	4628      	mov	r0, r5
 8005746:	f000 ffb1 	bl	80066ac <__pow5mult>
 800574a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800574c:	4604      	mov	r4, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	dd7f      	ble.n	8005852 <_dtoa_r+0x8e2>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800575c:	6918      	ldr	r0, [r3, #16]
 800575e:	f000 fe99 	bl	8006494 <__hi0bits>
 8005762:	f1c0 0020 	rsb	r0, r0, #32
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	4418      	add	r0, r3
 800576a:	f010 001f 	ands.w	r0, r0, #31
 800576e:	f000 8092 	beq.w	8005896 <_dtoa_r+0x926>
 8005772:	f1c0 0320 	rsb	r3, r0, #32
 8005776:	2b04      	cmp	r3, #4
 8005778:	f340 808a 	ble.w	8005890 <_dtoa_r+0x920>
 800577c:	f1c0 001c 	rsb	r0, r0, #28
 8005780:	9b06      	ldr	r3, [sp, #24]
 8005782:	4407      	add	r7, r0
 8005784:	4403      	add	r3, r0
 8005786:	9306      	str	r3, [sp, #24]
 8005788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578a:	4403      	add	r3, r0
 800578c:	9309      	str	r3, [sp, #36]	; 0x24
 800578e:	9b06      	ldr	r3, [sp, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	dd05      	ble.n	80057a0 <_dtoa_r+0x830>
 8005794:	4659      	mov	r1, fp
 8005796:	461a      	mov	r2, r3
 8005798:	4628      	mov	r0, r5
 800579a:	f000 ffe1 	bl	8006760 <__lshift>
 800579e:	4683      	mov	fp, r0
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	dd05      	ble.n	80057b2 <_dtoa_r+0x842>
 80057a6:	4621      	mov	r1, r4
 80057a8:	461a      	mov	r2, r3
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 ffd8 	bl	8006760 <__lshift>
 80057b0:	4604      	mov	r4, r0
 80057b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d070      	beq.n	800589a <_dtoa_r+0x92a>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4658      	mov	r0, fp
 80057bc:	f001 f840 	bl	8006840 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	da6a      	bge.n	800589a <_dtoa_r+0x92a>
 80057c4:	2300      	movs	r3, #0
 80057c6:	4659      	mov	r1, fp
 80057c8:	220a      	movs	r2, #10
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 fdd2 	bl	8006374 <__multadd>
 80057d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d2:	4683      	mov	fp, r0
 80057d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8194 	beq.w	8005b06 <_dtoa_r+0xb96>
 80057de:	4631      	mov	r1, r6
 80057e0:	2300      	movs	r3, #0
 80057e2:	220a      	movs	r2, #10
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 fdc5 	bl	8006374 <__multadd>
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	4606      	mov	r6, r0
 80057f0:	f300 8093 	bgt.w	800591a <_dtoa_r+0x9aa>
 80057f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	dc57      	bgt.n	80058aa <_dtoa_r+0x93a>
 80057fa:	e08e      	b.n	800591a <_dtoa_r+0x9aa>
 80057fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005802:	e757      	b.n	80056b4 <_dtoa_r+0x744>
 8005804:	9b08      	ldr	r3, [sp, #32]
 8005806:	1e5c      	subs	r4, r3, #1
 8005808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580a:	42a3      	cmp	r3, r4
 800580c:	bfb7      	itett	lt
 800580e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005810:	1b1c      	subge	r4, r3, r4
 8005812:	1ae2      	sublt	r2, r4, r3
 8005814:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005816:	bfbe      	ittt	lt
 8005818:	940a      	strlt	r4, [sp, #40]	; 0x28
 800581a:	189b      	addlt	r3, r3, r2
 800581c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800581e:	9b08      	ldr	r3, [sp, #32]
 8005820:	bfb8      	it	lt
 8005822:	2400      	movlt	r4, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	bfbb      	ittet	lt
 8005828:	9b06      	ldrlt	r3, [sp, #24]
 800582a:	9a08      	ldrlt	r2, [sp, #32]
 800582c:	9f06      	ldrge	r7, [sp, #24]
 800582e:	1a9f      	sublt	r7, r3, r2
 8005830:	bfac      	ite	ge
 8005832:	9b08      	ldrge	r3, [sp, #32]
 8005834:	2300      	movlt	r3, #0
 8005836:	e73f      	b.n	80056b8 <_dtoa_r+0x748>
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	40240000 	.word	0x40240000
 8005840:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005842:	9f06      	ldr	r7, [sp, #24]
 8005844:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005846:	e742      	b.n	80056ce <_dtoa_r+0x75e>
 8005848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584a:	e76b      	b.n	8005724 <_dtoa_r+0x7b4>
 800584c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800584e:	2b01      	cmp	r3, #1
 8005850:	dc19      	bgt.n	8005886 <_dtoa_r+0x916>
 8005852:	9b04      	ldr	r3, [sp, #16]
 8005854:	b9bb      	cbnz	r3, 8005886 <_dtoa_r+0x916>
 8005856:	9b05      	ldr	r3, [sp, #20]
 8005858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800585c:	b99b      	cbnz	r3, 8005886 <_dtoa_r+0x916>
 800585e:	9b05      	ldr	r3, [sp, #20]
 8005860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005864:	0d1b      	lsrs	r3, r3, #20
 8005866:	051b      	lsls	r3, r3, #20
 8005868:	b183      	cbz	r3, 800588c <_dtoa_r+0x91c>
 800586a:	f04f 0801 	mov.w	r8, #1
 800586e:	9b06      	ldr	r3, [sp, #24]
 8005870:	3301      	adds	r3, #1
 8005872:	9306      	str	r3, [sp, #24]
 8005874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005876:	3301      	adds	r3, #1
 8005878:	9309      	str	r3, [sp, #36]	; 0x24
 800587a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	f47f af6a 	bne.w	8005756 <_dtoa_r+0x7e6>
 8005882:	2001      	movs	r0, #1
 8005884:	e76f      	b.n	8005766 <_dtoa_r+0x7f6>
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	e7f6      	b.n	800587a <_dtoa_r+0x90a>
 800588c:	4698      	mov	r8, r3
 800588e:	e7f4      	b.n	800587a <_dtoa_r+0x90a>
 8005890:	f43f af7d 	beq.w	800578e <_dtoa_r+0x81e>
 8005894:	4618      	mov	r0, r3
 8005896:	301c      	adds	r0, #28
 8005898:	e772      	b.n	8005780 <_dtoa_r+0x810>
 800589a:	9b08      	ldr	r3, [sp, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc36      	bgt.n	800590e <_dtoa_r+0x99e>
 80058a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	dd33      	ble.n	800590e <_dtoa_r+0x99e>
 80058a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	d10d      	bne.n	80058cc <_dtoa_r+0x95c>
 80058b0:	4621      	mov	r1, r4
 80058b2:	464b      	mov	r3, r9
 80058b4:	2205      	movs	r2, #5
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 fd5c 	bl	8006374 <__multadd>
 80058bc:	4601      	mov	r1, r0
 80058be:	4604      	mov	r4, r0
 80058c0:	4658      	mov	r0, fp
 80058c2:	f000 ffbd 	bl	8006840 <__mcmp>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f73f adb8 	bgt.w	800543c <_dtoa_r+0x4cc>
 80058cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058ce:	9f03      	ldr	r7, [sp, #12]
 80058d0:	ea6f 0a03 	mvn.w	sl, r3
 80058d4:	f04f 0800 	mov.w	r8, #0
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fd28 	bl	8006330 <_Bfree>
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	f43f aea7 	beq.w	8005634 <_dtoa_r+0x6c4>
 80058e6:	f1b8 0f00 	cmp.w	r8, #0
 80058ea:	d005      	beq.n	80058f8 <_dtoa_r+0x988>
 80058ec:	45b0      	cmp	r8, r6
 80058ee:	d003      	beq.n	80058f8 <_dtoa_r+0x988>
 80058f0:	4641      	mov	r1, r8
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 fd1c 	bl	8006330 <_Bfree>
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fd18 	bl	8006330 <_Bfree>
 8005900:	e698      	b.n	8005634 <_dtoa_r+0x6c4>
 8005902:	2400      	movs	r4, #0
 8005904:	4626      	mov	r6, r4
 8005906:	e7e1      	b.n	80058cc <_dtoa_r+0x95c>
 8005908:	46c2      	mov	sl, r8
 800590a:	4626      	mov	r6, r4
 800590c:	e596      	b.n	800543c <_dtoa_r+0x4cc>
 800590e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80fd 	beq.w	8005b14 <_dtoa_r+0xba4>
 800591a:	2f00      	cmp	r7, #0
 800591c:	dd05      	ble.n	800592a <_dtoa_r+0x9ba>
 800591e:	4631      	mov	r1, r6
 8005920:	463a      	mov	r2, r7
 8005922:	4628      	mov	r0, r5
 8005924:	f000 ff1c 	bl	8006760 <__lshift>
 8005928:	4606      	mov	r6, r0
 800592a:	f1b8 0f00 	cmp.w	r8, #0
 800592e:	d05c      	beq.n	80059ea <_dtoa_r+0xa7a>
 8005930:	4628      	mov	r0, r5
 8005932:	6871      	ldr	r1, [r6, #4]
 8005934:	f000 fcbc 	bl	80062b0 <_Balloc>
 8005938:	4607      	mov	r7, r0
 800593a:	b928      	cbnz	r0, 8005948 <_dtoa_r+0x9d8>
 800593c:	4602      	mov	r2, r0
 800593e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005942:	4b7f      	ldr	r3, [pc, #508]	; (8005b40 <_dtoa_r+0xbd0>)
 8005944:	f7ff bb28 	b.w	8004f98 <_dtoa_r+0x28>
 8005948:	6932      	ldr	r2, [r6, #16]
 800594a:	f106 010c 	add.w	r1, r6, #12
 800594e:	3202      	adds	r2, #2
 8005950:	0092      	lsls	r2, r2, #2
 8005952:	300c      	adds	r0, #12
 8005954:	f000 fc9e 	bl	8006294 <memcpy>
 8005958:	2201      	movs	r2, #1
 800595a:	4639      	mov	r1, r7
 800595c:	4628      	mov	r0, r5
 800595e:	f000 feff 	bl	8006760 <__lshift>
 8005962:	46b0      	mov	r8, r6
 8005964:	4606      	mov	r6, r0
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	9308      	str	r3, [sp, #32]
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	444b      	add	r3, r9
 8005970:	930a      	str	r3, [sp, #40]	; 0x28
 8005972:	9b04      	ldr	r3, [sp, #16]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	9b08      	ldr	r3, [sp, #32]
 800597c:	4621      	mov	r1, r4
 800597e:	3b01      	subs	r3, #1
 8005980:	4658      	mov	r0, fp
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	f7ff fa66 	bl	8004e54 <quorem>
 8005988:	4603      	mov	r3, r0
 800598a:	4641      	mov	r1, r8
 800598c:	3330      	adds	r3, #48	; 0x30
 800598e:	9006      	str	r0, [sp, #24]
 8005990:	4658      	mov	r0, fp
 8005992:	930b      	str	r3, [sp, #44]	; 0x2c
 8005994:	f000 ff54 	bl	8006840 <__mcmp>
 8005998:	4632      	mov	r2, r6
 800599a:	4681      	mov	r9, r0
 800599c:	4621      	mov	r1, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 ff6a 	bl	8006878 <__mdiff>
 80059a4:	68c2      	ldr	r2, [r0, #12]
 80059a6:	4607      	mov	r7, r0
 80059a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059aa:	bb02      	cbnz	r2, 80059ee <_dtoa_r+0xa7e>
 80059ac:	4601      	mov	r1, r0
 80059ae:	4658      	mov	r0, fp
 80059b0:	f000 ff46 	bl	8006840 <__mcmp>
 80059b4:	4602      	mov	r2, r0
 80059b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b8:	4639      	mov	r1, r7
 80059ba:	4628      	mov	r0, r5
 80059bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80059c0:	f000 fcb6 	bl	8006330 <_Bfree>
 80059c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c8:	9f08      	ldr	r7, [sp, #32]
 80059ca:	ea43 0102 	orr.w	r1, r3, r2
 80059ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d0:	430b      	orrs	r3, r1
 80059d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d4:	d10d      	bne.n	80059f2 <_dtoa_r+0xa82>
 80059d6:	2b39      	cmp	r3, #57	; 0x39
 80059d8:	d029      	beq.n	8005a2e <_dtoa_r+0xabe>
 80059da:	f1b9 0f00 	cmp.w	r9, #0
 80059de:	dd01      	ble.n	80059e4 <_dtoa_r+0xa74>
 80059e0:	9b06      	ldr	r3, [sp, #24]
 80059e2:	3331      	adds	r3, #49	; 0x31
 80059e4:	9a04      	ldr	r2, [sp, #16]
 80059e6:	7013      	strb	r3, [r2, #0]
 80059e8:	e776      	b.n	80058d8 <_dtoa_r+0x968>
 80059ea:	4630      	mov	r0, r6
 80059ec:	e7b9      	b.n	8005962 <_dtoa_r+0x9f2>
 80059ee:	2201      	movs	r2, #1
 80059f0:	e7e2      	b.n	80059b8 <_dtoa_r+0xa48>
 80059f2:	f1b9 0f00 	cmp.w	r9, #0
 80059f6:	db06      	blt.n	8005a06 <_dtoa_r+0xa96>
 80059f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80059fa:	ea41 0909 	orr.w	r9, r1, r9
 80059fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a00:	ea59 0101 	orrs.w	r1, r9, r1
 8005a04:	d120      	bne.n	8005a48 <_dtoa_r+0xad8>
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	ddec      	ble.n	80059e4 <_dtoa_r+0xa74>
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4628      	mov	r0, r5
 8005a10:	9308      	str	r3, [sp, #32]
 8005a12:	f000 fea5 	bl	8006760 <__lshift>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4683      	mov	fp, r0
 8005a1a:	f000 ff11 	bl	8006840 <__mcmp>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	dc02      	bgt.n	8005a2a <_dtoa_r+0xaba>
 8005a24:	d1de      	bne.n	80059e4 <_dtoa_r+0xa74>
 8005a26:	07da      	lsls	r2, r3, #31
 8005a28:	d5dc      	bpl.n	80059e4 <_dtoa_r+0xa74>
 8005a2a:	2b39      	cmp	r3, #57	; 0x39
 8005a2c:	d1d8      	bne.n	80059e0 <_dtoa_r+0xa70>
 8005a2e:	2339      	movs	r3, #57	; 0x39
 8005a30:	9a04      	ldr	r2, [sp, #16]
 8005a32:	7013      	strb	r3, [r2, #0]
 8005a34:	463b      	mov	r3, r7
 8005a36:	461f      	mov	r7, r3
 8005a38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	2a39      	cmp	r2, #57	; 0x39
 8005a40:	d050      	beq.n	8005ae4 <_dtoa_r+0xb74>
 8005a42:	3201      	adds	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e747      	b.n	80058d8 <_dtoa_r+0x968>
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	dd03      	ble.n	8005a54 <_dtoa_r+0xae4>
 8005a4c:	2b39      	cmp	r3, #57	; 0x39
 8005a4e:	d0ee      	beq.n	8005a2e <_dtoa_r+0xabe>
 8005a50:	3301      	adds	r3, #1
 8005a52:	e7c7      	b.n	80059e4 <_dtoa_r+0xa74>
 8005a54:	9a08      	ldr	r2, [sp, #32]
 8005a56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a5c:	428a      	cmp	r2, r1
 8005a5e:	d02a      	beq.n	8005ab6 <_dtoa_r+0xb46>
 8005a60:	4659      	mov	r1, fp
 8005a62:	2300      	movs	r3, #0
 8005a64:	220a      	movs	r2, #10
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 fc84 	bl	8006374 <__multadd>
 8005a6c:	45b0      	cmp	r8, r6
 8005a6e:	4683      	mov	fp, r0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	f04f 020a 	mov.w	r2, #10
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	d107      	bne.n	8005a8e <_dtoa_r+0xb1e>
 8005a7e:	f000 fc79 	bl	8006374 <__multadd>
 8005a82:	4680      	mov	r8, r0
 8005a84:	4606      	mov	r6, r0
 8005a86:	9b08      	ldr	r3, [sp, #32]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	9308      	str	r3, [sp, #32]
 8005a8c:	e775      	b.n	800597a <_dtoa_r+0xa0a>
 8005a8e:	f000 fc71 	bl	8006374 <__multadd>
 8005a92:	4631      	mov	r1, r6
 8005a94:	4680      	mov	r8, r0
 8005a96:	2300      	movs	r3, #0
 8005a98:	220a      	movs	r2, #10
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 fc6a 	bl	8006374 <__multadd>
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	e7f0      	b.n	8005a86 <_dtoa_r+0xb16>
 8005aa4:	f1b9 0f00 	cmp.w	r9, #0
 8005aa8:	bfcc      	ite	gt
 8005aaa:	464f      	movgt	r7, r9
 8005aac:	2701      	movle	r7, #1
 8005aae:	f04f 0800 	mov.w	r8, #0
 8005ab2:	9a03      	ldr	r2, [sp, #12]
 8005ab4:	4417      	add	r7, r2
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4628      	mov	r0, r5
 8005abc:	9308      	str	r3, [sp, #32]
 8005abe:	f000 fe4f 	bl	8006760 <__lshift>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4683      	mov	fp, r0
 8005ac6:	f000 febb 	bl	8006840 <__mcmp>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	dcb2      	bgt.n	8005a34 <_dtoa_r+0xac4>
 8005ace:	d102      	bne.n	8005ad6 <_dtoa_r+0xb66>
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	07db      	lsls	r3, r3, #31
 8005ad4:	d4ae      	bmi.n	8005a34 <_dtoa_r+0xac4>
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	461f      	mov	r7, r3
 8005ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ade:	2a30      	cmp	r2, #48	; 0x30
 8005ae0:	d0fa      	beq.n	8005ad8 <_dtoa_r+0xb68>
 8005ae2:	e6f9      	b.n	80058d8 <_dtoa_r+0x968>
 8005ae4:	9a03      	ldr	r2, [sp, #12]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d1a5      	bne.n	8005a36 <_dtoa_r+0xac6>
 8005aea:	2331      	movs	r3, #49	; 0x31
 8005aec:	f10a 0a01 	add.w	sl, sl, #1
 8005af0:	e779      	b.n	80059e6 <_dtoa_r+0xa76>
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <_dtoa_r+0xbd4>)
 8005af4:	f7ff baa8 	b.w	8005048 <_dtoa_r+0xd8>
 8005af8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f47f aa81 	bne.w	8005002 <_dtoa_r+0x92>
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <_dtoa_r+0xbd8>)
 8005b02:	f7ff baa1 	b.w	8005048 <_dtoa_r+0xd8>
 8005b06:	f1b9 0f00 	cmp.w	r9, #0
 8005b0a:	dc03      	bgt.n	8005b14 <_dtoa_r+0xba4>
 8005b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	f73f aecb 	bgt.w	80058aa <_dtoa_r+0x93a>
 8005b14:	9f03      	ldr	r7, [sp, #12]
 8005b16:	4621      	mov	r1, r4
 8005b18:	4658      	mov	r0, fp
 8005b1a:	f7ff f99b 	bl	8004e54 <quorem>
 8005b1e:	9a03      	ldr	r2, [sp, #12]
 8005b20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b24:	f807 3b01 	strb.w	r3, [r7], #1
 8005b28:	1aba      	subs	r2, r7, r2
 8005b2a:	4591      	cmp	r9, r2
 8005b2c:	ddba      	ble.n	8005aa4 <_dtoa_r+0xb34>
 8005b2e:	4659      	mov	r1, fp
 8005b30:	2300      	movs	r3, #0
 8005b32:	220a      	movs	r2, #10
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 fc1d 	bl	8006374 <__multadd>
 8005b3a:	4683      	mov	fp, r0
 8005b3c:	e7eb      	b.n	8005b16 <_dtoa_r+0xba6>
 8005b3e:	bf00      	nop
 8005b40:	08008dd8 	.word	0x08008dd8
 8005b44:	08008fd1 	.word	0x08008fd1
 8005b48:	08008d59 	.word	0x08008d59

08005b4c <rshift>:
 8005b4c:	6903      	ldr	r3, [r0, #16]
 8005b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005b56:	f100 0414 	add.w	r4, r0, #20
 8005b5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005b5e:	dd46      	ble.n	8005bee <rshift+0xa2>
 8005b60:	f011 011f 	ands.w	r1, r1, #31
 8005b64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005b68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005b6c:	d10c      	bne.n	8005b88 <rshift+0x3c>
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f100 0710 	add.w	r7, r0, #16
 8005b74:	42b1      	cmp	r1, r6
 8005b76:	d335      	bcc.n	8005be4 <rshift+0x98>
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	1eea      	subs	r2, r5, #3
 8005b7e:	4296      	cmp	r6, r2
 8005b80:	bf38      	it	cc
 8005b82:	2300      	movcc	r3, #0
 8005b84:	4423      	add	r3, r4
 8005b86:	e015      	b.n	8005bb4 <rshift+0x68>
 8005b88:	46a1      	mov	r9, r4
 8005b8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005b8e:	f1c1 0820 	rsb	r8, r1, #32
 8005b92:	40cf      	lsrs	r7, r1
 8005b94:	f105 0e04 	add.w	lr, r5, #4
 8005b98:	4576      	cmp	r6, lr
 8005b9a:	46f4      	mov	ip, lr
 8005b9c:	d816      	bhi.n	8005bcc <rshift+0x80>
 8005b9e:	1a9a      	subs	r2, r3, r2
 8005ba0:	0092      	lsls	r2, r2, #2
 8005ba2:	3a04      	subs	r2, #4
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	42ae      	cmp	r6, r5
 8005ba8:	bf38      	it	cc
 8005baa:	2200      	movcc	r2, #0
 8005bac:	18a3      	adds	r3, r4, r2
 8005bae:	50a7      	str	r7, [r4, r2]
 8005bb0:	b107      	cbz	r7, 8005bb4 <rshift+0x68>
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	eba3 0204 	sub.w	r2, r3, r4
 8005bba:	bf08      	it	eq
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005bc2:	6102      	str	r2, [r0, #16]
 8005bc4:	bf08      	it	eq
 8005bc6:	6143      	streq	r3, [r0, #20]
 8005bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bcc:	f8dc c000 	ldr.w	ip, [ip]
 8005bd0:	fa0c fc08 	lsl.w	ip, ip, r8
 8005bd4:	ea4c 0707 	orr.w	r7, ip, r7
 8005bd8:	f849 7b04 	str.w	r7, [r9], #4
 8005bdc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005be0:	40cf      	lsrs	r7, r1
 8005be2:	e7d9      	b.n	8005b98 <rshift+0x4c>
 8005be4:	f851 cb04 	ldr.w	ip, [r1], #4
 8005be8:	f847 cf04 	str.w	ip, [r7, #4]!
 8005bec:	e7c2      	b.n	8005b74 <rshift+0x28>
 8005bee:	4623      	mov	r3, r4
 8005bf0:	e7e0      	b.n	8005bb4 <rshift+0x68>

08005bf2 <__hexdig_fun>:
 8005bf2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005bf6:	2b09      	cmp	r3, #9
 8005bf8:	d802      	bhi.n	8005c00 <__hexdig_fun+0xe>
 8005bfa:	3820      	subs	r0, #32
 8005bfc:	b2c0      	uxtb	r0, r0
 8005bfe:	4770      	bx	lr
 8005c00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d801      	bhi.n	8005c0c <__hexdig_fun+0x1a>
 8005c08:	3847      	subs	r0, #71	; 0x47
 8005c0a:	e7f7      	b.n	8005bfc <__hexdig_fun+0xa>
 8005c0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d801      	bhi.n	8005c18 <__hexdig_fun+0x26>
 8005c14:	3827      	subs	r0, #39	; 0x27
 8005c16:	e7f1      	b.n	8005bfc <__hexdig_fun+0xa>
 8005c18:	2000      	movs	r0, #0
 8005c1a:	4770      	bx	lr

08005c1c <__gethex>:
 8005c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	b08b      	sub	sp, #44	; 0x2c
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	4bb2      	ldr	r3, [pc, #712]	; (8005ef0 <__gethex+0x2d4>)
 8005c26:	9002      	str	r0, [sp, #8]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	468b      	mov	fp, r1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	4690      	mov	r8, r2
 8005c30:	9303      	str	r3, [sp, #12]
 8005c32:	f7fa fa8d 	bl	8000150 <strlen>
 8005c36:	4682      	mov	sl, r0
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	f8db 2000 	ldr.w	r2, [fp]
 8005c3e:	4403      	add	r3, r0
 8005c40:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005c44:	9306      	str	r3, [sp, #24]
 8005c46:	1c93      	adds	r3, r2, #2
 8005c48:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005c4c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005c50:	32fe      	adds	r2, #254	; 0xfe
 8005c52:	18d1      	adds	r1, r2, r3
 8005c54:	461f      	mov	r7, r3
 8005c56:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005c5a:	9101      	str	r1, [sp, #4]
 8005c5c:	2830      	cmp	r0, #48	; 0x30
 8005c5e:	d0f8      	beq.n	8005c52 <__gethex+0x36>
 8005c60:	f7ff ffc7 	bl	8005bf2 <__hexdig_fun>
 8005c64:	4604      	mov	r4, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d13a      	bne.n	8005ce0 <__gethex+0xc4>
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	9903      	ldr	r1, [sp, #12]
 8005c70:	f001 fda8 	bl	80077c4 <strncmp>
 8005c74:	4605      	mov	r5, r0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d166      	bne.n	8005d48 <__gethex+0x12c>
 8005c7a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005c7e:	eb07 060a 	add.w	r6, r7, sl
 8005c82:	f7ff ffb6 	bl	8005bf2 <__hexdig_fun>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d060      	beq.n	8005d4c <__gethex+0x130>
 8005c8a:	4633      	mov	r3, r6
 8005c8c:	7818      	ldrb	r0, [r3, #0]
 8005c8e:	461f      	mov	r7, r3
 8005c90:	2830      	cmp	r0, #48	; 0x30
 8005c92:	f103 0301 	add.w	r3, r3, #1
 8005c96:	d0f9      	beq.n	8005c8c <__gethex+0x70>
 8005c98:	f7ff ffab 	bl	8005bf2 <__hexdig_fun>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	fab0 f480 	clz	r4, r0
 8005ca2:	4635      	mov	r5, r6
 8005ca4:	0964      	lsrs	r4, r4, #5
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	463a      	mov	r2, r7
 8005caa:	4616      	mov	r6, r2
 8005cac:	7830      	ldrb	r0, [r6, #0]
 8005cae:	3201      	adds	r2, #1
 8005cb0:	f7ff ff9f 	bl	8005bf2 <__hexdig_fun>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d1f8      	bne.n	8005caa <__gethex+0x8e>
 8005cb8:	4652      	mov	r2, sl
 8005cba:	4630      	mov	r0, r6
 8005cbc:	9903      	ldr	r1, [sp, #12]
 8005cbe:	f001 fd81 	bl	80077c4 <strncmp>
 8005cc2:	b980      	cbnz	r0, 8005ce6 <__gethex+0xca>
 8005cc4:	b94d      	cbnz	r5, 8005cda <__gethex+0xbe>
 8005cc6:	eb06 050a 	add.w	r5, r6, sl
 8005cca:	462a      	mov	r2, r5
 8005ccc:	4616      	mov	r6, r2
 8005cce:	7830      	ldrb	r0, [r6, #0]
 8005cd0:	3201      	adds	r2, #1
 8005cd2:	f7ff ff8e 	bl	8005bf2 <__hexdig_fun>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d1f8      	bne.n	8005ccc <__gethex+0xb0>
 8005cda:	1bad      	subs	r5, r5, r6
 8005cdc:	00ad      	lsls	r5, r5, #2
 8005cde:	e004      	b.n	8005cea <__gethex+0xce>
 8005ce0:	2400      	movs	r4, #0
 8005ce2:	4625      	mov	r5, r4
 8005ce4:	e7e0      	b.n	8005ca8 <__gethex+0x8c>
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	d1f7      	bne.n	8005cda <__gethex+0xbe>
 8005cea:	7833      	ldrb	r3, [r6, #0]
 8005cec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cf0:	2b50      	cmp	r3, #80	; 0x50
 8005cf2:	d139      	bne.n	8005d68 <__gethex+0x14c>
 8005cf4:	7873      	ldrb	r3, [r6, #1]
 8005cf6:	2b2b      	cmp	r3, #43	; 0x2b
 8005cf8:	d02a      	beq.n	8005d50 <__gethex+0x134>
 8005cfa:	2b2d      	cmp	r3, #45	; 0x2d
 8005cfc:	d02c      	beq.n	8005d58 <__gethex+0x13c>
 8005cfe:	f04f 0900 	mov.w	r9, #0
 8005d02:	1c71      	adds	r1, r6, #1
 8005d04:	7808      	ldrb	r0, [r1, #0]
 8005d06:	f7ff ff74 	bl	8005bf2 <__hexdig_fun>
 8005d0a:	1e43      	subs	r3, r0, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b18      	cmp	r3, #24
 8005d10:	d82a      	bhi.n	8005d68 <__gethex+0x14c>
 8005d12:	f1a0 0210 	sub.w	r2, r0, #16
 8005d16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d1a:	f7ff ff6a 	bl	8005bf2 <__hexdig_fun>
 8005d1e:	1e43      	subs	r3, r0, #1
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b18      	cmp	r3, #24
 8005d24:	d91b      	bls.n	8005d5e <__gethex+0x142>
 8005d26:	f1b9 0f00 	cmp.w	r9, #0
 8005d2a:	d000      	beq.n	8005d2e <__gethex+0x112>
 8005d2c:	4252      	negs	r2, r2
 8005d2e:	4415      	add	r5, r2
 8005d30:	f8cb 1000 	str.w	r1, [fp]
 8005d34:	b1d4      	cbz	r4, 8005d6c <__gethex+0x150>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2700      	movne	r7, #0
 8005d3e:	2706      	moveq	r7, #6
 8005d40:	4638      	mov	r0, r7
 8005d42:	b00b      	add	sp, #44	; 0x2c
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	463e      	mov	r6, r7
 8005d4a:	4625      	mov	r5, r4
 8005d4c:	2401      	movs	r4, #1
 8005d4e:	e7cc      	b.n	8005cea <__gethex+0xce>
 8005d50:	f04f 0900 	mov.w	r9, #0
 8005d54:	1cb1      	adds	r1, r6, #2
 8005d56:	e7d5      	b.n	8005d04 <__gethex+0xe8>
 8005d58:	f04f 0901 	mov.w	r9, #1
 8005d5c:	e7fa      	b.n	8005d54 <__gethex+0x138>
 8005d5e:	230a      	movs	r3, #10
 8005d60:	fb03 0202 	mla	r2, r3, r2, r0
 8005d64:	3a10      	subs	r2, #16
 8005d66:	e7d6      	b.n	8005d16 <__gethex+0xfa>
 8005d68:	4631      	mov	r1, r6
 8005d6a:	e7e1      	b.n	8005d30 <__gethex+0x114>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	1bf3      	subs	r3, r6, r7
 8005d70:	3b01      	subs	r3, #1
 8005d72:	2b07      	cmp	r3, #7
 8005d74:	dc0a      	bgt.n	8005d8c <__gethex+0x170>
 8005d76:	9802      	ldr	r0, [sp, #8]
 8005d78:	f000 fa9a 	bl	80062b0 <_Balloc>
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	b940      	cbnz	r0, 8005d92 <__gethex+0x176>
 8005d80:	4602      	mov	r2, r0
 8005d82:	21de      	movs	r1, #222	; 0xde
 8005d84:	4b5b      	ldr	r3, [pc, #364]	; (8005ef4 <__gethex+0x2d8>)
 8005d86:	485c      	ldr	r0, [pc, #368]	; (8005ef8 <__gethex+0x2dc>)
 8005d88:	f001 fdea 	bl	8007960 <__assert_func>
 8005d8c:	3101      	adds	r1, #1
 8005d8e:	105b      	asrs	r3, r3, #1
 8005d90:	e7ef      	b.n	8005d72 <__gethex+0x156>
 8005d92:	f04f 0b00 	mov.w	fp, #0
 8005d96:	f100 0914 	add.w	r9, r0, #20
 8005d9a:	f1ca 0301 	rsb	r3, sl, #1
 8005d9e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005da2:	f8cd b004 	str.w	fp, [sp, #4]
 8005da6:	9308      	str	r3, [sp, #32]
 8005da8:	42b7      	cmp	r7, r6
 8005daa:	d33f      	bcc.n	8005e2c <__gethex+0x210>
 8005dac:	9f04      	ldr	r7, [sp, #16]
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	f847 3b04 	str.w	r3, [r7], #4
 8005db4:	eba7 0709 	sub.w	r7, r7, r9
 8005db8:	10bf      	asrs	r7, r7, #2
 8005dba:	6127      	str	r7, [r4, #16]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fb69 	bl	8006494 <__hi0bits>
 8005dc2:	017f      	lsls	r7, r7, #5
 8005dc4:	f8d8 6000 	ldr.w	r6, [r8]
 8005dc8:	1a3f      	subs	r7, r7, r0
 8005dca:	42b7      	cmp	r7, r6
 8005dcc:	dd62      	ble.n	8005e94 <__gethex+0x278>
 8005dce:	1bbf      	subs	r7, r7, r6
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 ff03 	bl	8006bde <__any_on>
 8005dd8:	4682      	mov	sl, r0
 8005dda:	b1a8      	cbz	r0, 8005e08 <__gethex+0x1ec>
 8005ddc:	f04f 0a01 	mov.w	sl, #1
 8005de0:	1e7b      	subs	r3, r7, #1
 8005de2:	1159      	asrs	r1, r3, #5
 8005de4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005de8:	f003 021f 	and.w	r2, r3, #31
 8005dec:	fa0a f202 	lsl.w	r2, sl, r2
 8005df0:	420a      	tst	r2, r1
 8005df2:	d009      	beq.n	8005e08 <__gethex+0x1ec>
 8005df4:	4553      	cmp	r3, sl
 8005df6:	dd05      	ble.n	8005e04 <__gethex+0x1e8>
 8005df8:	4620      	mov	r0, r4
 8005dfa:	1eb9      	subs	r1, r7, #2
 8005dfc:	f000 feef 	bl	8006bde <__any_on>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d144      	bne.n	8005e8e <__gethex+0x272>
 8005e04:	f04f 0a02 	mov.w	sl, #2
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fe9e 	bl	8005b4c <rshift>
 8005e10:	443d      	add	r5, r7
 8005e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	da4a      	bge.n	8005eb0 <__gethex+0x294>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	9802      	ldr	r0, [sp, #8]
 8005e1e:	f000 fa87 	bl	8006330 <_Bfree>
 8005e22:	2300      	movs	r3, #0
 8005e24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e26:	27a3      	movs	r7, #163	; 0xa3
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e789      	b.n	8005d40 <__gethex+0x124>
 8005e2c:	1e73      	subs	r3, r6, #1
 8005e2e:	9a06      	ldr	r2, [sp, #24]
 8005e30:	9307      	str	r3, [sp, #28]
 8005e32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d019      	beq.n	8005e6e <__gethex+0x252>
 8005e3a:	f1bb 0f20 	cmp.w	fp, #32
 8005e3e:	d107      	bne.n	8005e50 <__gethex+0x234>
 8005e40:	9b04      	ldr	r3, [sp, #16]
 8005e42:	9a01      	ldr	r2, [sp, #4]
 8005e44:	f843 2b04 	str.w	r2, [r3], #4
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	469b      	mov	fp, r3
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005e54:	f7ff fecd 	bl	8005bf2 <__hexdig_fun>
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	f000 000f 	and.w	r0, r0, #15
 8005e5e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005e62:	4303      	orrs	r3, r0
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	f10b 0b04 	add.w	fp, fp, #4
 8005e6a:	9b07      	ldr	r3, [sp, #28]
 8005e6c:	e00d      	b.n	8005e8a <__gethex+0x26e>
 8005e6e:	9a08      	ldr	r2, [sp, #32]
 8005e70:	1e73      	subs	r3, r6, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	42bb      	cmp	r3, r7
 8005e76:	d3e0      	bcc.n	8005e3a <__gethex+0x21e>
 8005e78:	4618      	mov	r0, r3
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	9903      	ldr	r1, [sp, #12]
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	f001 fca0 	bl	80077c4 <strncmp>
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d1d7      	bne.n	8005e3a <__gethex+0x21e>
 8005e8a:	461e      	mov	r6, r3
 8005e8c:	e78c      	b.n	8005da8 <__gethex+0x18c>
 8005e8e:	f04f 0a03 	mov.w	sl, #3
 8005e92:	e7b9      	b.n	8005e08 <__gethex+0x1ec>
 8005e94:	da09      	bge.n	8005eaa <__gethex+0x28e>
 8005e96:	1bf7      	subs	r7, r6, r7
 8005e98:	4621      	mov	r1, r4
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	9802      	ldr	r0, [sp, #8]
 8005e9e:	f000 fc5f 	bl	8006760 <__lshift>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	1bed      	subs	r5, r5, r7
 8005ea6:	f100 0914 	add.w	r9, r0, #20
 8005eaa:	f04f 0a00 	mov.w	sl, #0
 8005eae:	e7b0      	b.n	8005e12 <__gethex+0x1f6>
 8005eb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005eb4:	42a8      	cmp	r0, r5
 8005eb6:	dd72      	ble.n	8005f9e <__gethex+0x382>
 8005eb8:	1b45      	subs	r5, r0, r5
 8005eba:	42ae      	cmp	r6, r5
 8005ebc:	dc35      	bgt.n	8005f2a <__gethex+0x30e>
 8005ebe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d029      	beq.n	8005f1a <__gethex+0x2fe>
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d02b      	beq.n	8005f22 <__gethex+0x306>
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d11c      	bne.n	8005f08 <__gethex+0x2ec>
 8005ece:	42ae      	cmp	r6, r5
 8005ed0:	d11a      	bne.n	8005f08 <__gethex+0x2ec>
 8005ed2:	2e01      	cmp	r6, #1
 8005ed4:	d112      	bne.n	8005efc <__gethex+0x2e0>
 8005ed6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005eda:	9a05      	ldr	r2, [sp, #20]
 8005edc:	2762      	movs	r7, #98	; 0x62
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	f8c9 3000 	str.w	r3, [r9]
 8005ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eea:	601c      	str	r4, [r3, #0]
 8005eec:	e728      	b.n	8005d40 <__gethex+0x124>
 8005eee:	bf00      	nop
 8005ef0:	08008e50 	.word	0x08008e50
 8005ef4:	08008dd8 	.word	0x08008dd8
 8005ef8:	08008de9 	.word	0x08008de9
 8005efc:	4620      	mov	r0, r4
 8005efe:	1e71      	subs	r1, r6, #1
 8005f00:	f000 fe6d 	bl	8006bde <__any_on>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1e6      	bne.n	8005ed6 <__gethex+0x2ba>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	9802      	ldr	r0, [sp, #8]
 8005f0c:	f000 fa10 	bl	8006330 <_Bfree>
 8005f10:	2300      	movs	r3, #0
 8005f12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f14:	2750      	movs	r7, #80	; 0x50
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e712      	b.n	8005d40 <__gethex+0x124>
 8005f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1f3      	bne.n	8005f08 <__gethex+0x2ec>
 8005f20:	e7d9      	b.n	8005ed6 <__gethex+0x2ba>
 8005f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1d6      	bne.n	8005ed6 <__gethex+0x2ba>
 8005f28:	e7ee      	b.n	8005f08 <__gethex+0x2ec>
 8005f2a:	1e6f      	subs	r7, r5, #1
 8005f2c:	f1ba 0f00 	cmp.w	sl, #0
 8005f30:	d132      	bne.n	8005f98 <__gethex+0x37c>
 8005f32:	b127      	cbz	r7, 8005f3e <__gethex+0x322>
 8005f34:	4639      	mov	r1, r7
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fe51 	bl	8006bde <__any_on>
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	2101      	movs	r1, #1
 8005f40:	117b      	asrs	r3, r7, #5
 8005f42:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005f46:	f007 071f 	and.w	r7, r7, #31
 8005f4a:	fa01 f707 	lsl.w	r7, r1, r7
 8005f4e:	421f      	tst	r7, r3
 8005f50:	f04f 0702 	mov.w	r7, #2
 8005f54:	4629      	mov	r1, r5
 8005f56:	4620      	mov	r0, r4
 8005f58:	bf18      	it	ne
 8005f5a:	f04a 0a02 	orrne.w	sl, sl, #2
 8005f5e:	1b76      	subs	r6, r6, r5
 8005f60:	f7ff fdf4 	bl	8005b4c <rshift>
 8005f64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005f68:	f1ba 0f00 	cmp.w	sl, #0
 8005f6c:	d048      	beq.n	8006000 <__gethex+0x3e4>
 8005f6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d015      	beq.n	8005fa2 <__gethex+0x386>
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d017      	beq.n	8005faa <__gethex+0x38e>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d109      	bne.n	8005f92 <__gethex+0x376>
 8005f7e:	f01a 0f02 	tst.w	sl, #2
 8005f82:	d006      	beq.n	8005f92 <__gethex+0x376>
 8005f84:	f8d9 0000 	ldr.w	r0, [r9]
 8005f88:	ea4a 0a00 	orr.w	sl, sl, r0
 8005f8c:	f01a 0f01 	tst.w	sl, #1
 8005f90:	d10e      	bne.n	8005fb0 <__gethex+0x394>
 8005f92:	f047 0710 	orr.w	r7, r7, #16
 8005f96:	e033      	b.n	8006000 <__gethex+0x3e4>
 8005f98:	f04f 0a01 	mov.w	sl, #1
 8005f9c:	e7cf      	b.n	8005f3e <__gethex+0x322>
 8005f9e:	2701      	movs	r7, #1
 8005fa0:	e7e2      	b.n	8005f68 <__gethex+0x34c>
 8005fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fa4:	f1c3 0301 	rsb	r3, r3, #1
 8005fa8:	9315      	str	r3, [sp, #84]	; 0x54
 8005faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <__gethex+0x376>
 8005fb0:	f04f 0c00 	mov.w	ip, #0
 8005fb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005fb8:	f104 0314 	add.w	r3, r4, #20
 8005fbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005fc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005fce:	d01c      	beq.n	800600a <__gethex+0x3ee>
 8005fd0:	3201      	adds	r2, #1
 8005fd2:	6002      	str	r2, [r0, #0]
 8005fd4:	2f02      	cmp	r7, #2
 8005fd6:	f104 0314 	add.w	r3, r4, #20
 8005fda:	d13d      	bne.n	8006058 <__gethex+0x43c>
 8005fdc:	f8d8 2000 	ldr.w	r2, [r8]
 8005fe0:	3a01      	subs	r2, #1
 8005fe2:	42b2      	cmp	r2, r6
 8005fe4:	d10a      	bne.n	8005ffc <__gethex+0x3e0>
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	1171      	asrs	r1, r6, #5
 8005fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fee:	f006 061f 	and.w	r6, r6, #31
 8005ff2:	fa02 f606 	lsl.w	r6, r2, r6
 8005ff6:	421e      	tst	r6, r3
 8005ff8:	bf18      	it	ne
 8005ffa:	4617      	movne	r7, r2
 8005ffc:	f047 0720 	orr.w	r7, r7, #32
 8006000:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006002:	601c      	str	r4, [r3, #0]
 8006004:	9b05      	ldr	r3, [sp, #20]
 8006006:	601d      	str	r5, [r3, #0]
 8006008:	e69a      	b.n	8005d40 <__gethex+0x124>
 800600a:	4299      	cmp	r1, r3
 800600c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006010:	d8d8      	bhi.n	8005fc4 <__gethex+0x3a8>
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	459b      	cmp	fp, r3
 8006016:	db17      	blt.n	8006048 <__gethex+0x42c>
 8006018:	6861      	ldr	r1, [r4, #4]
 800601a:	9802      	ldr	r0, [sp, #8]
 800601c:	3101      	adds	r1, #1
 800601e:	f000 f947 	bl	80062b0 <_Balloc>
 8006022:	4681      	mov	r9, r0
 8006024:	b918      	cbnz	r0, 800602e <__gethex+0x412>
 8006026:	4602      	mov	r2, r0
 8006028:	2184      	movs	r1, #132	; 0x84
 800602a:	4b19      	ldr	r3, [pc, #100]	; (8006090 <__gethex+0x474>)
 800602c:	e6ab      	b.n	8005d86 <__gethex+0x16a>
 800602e:	6922      	ldr	r2, [r4, #16]
 8006030:	f104 010c 	add.w	r1, r4, #12
 8006034:	3202      	adds	r2, #2
 8006036:	0092      	lsls	r2, r2, #2
 8006038:	300c      	adds	r0, #12
 800603a:	f000 f92b 	bl	8006294 <memcpy>
 800603e:	4621      	mov	r1, r4
 8006040:	9802      	ldr	r0, [sp, #8]
 8006042:	f000 f975 	bl	8006330 <_Bfree>
 8006046:	464c      	mov	r4, r9
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	6122      	str	r2, [r4, #16]
 800604e:	2201      	movs	r2, #1
 8006050:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006054:	615a      	str	r2, [r3, #20]
 8006056:	e7bd      	b.n	8005fd4 <__gethex+0x3b8>
 8006058:	6922      	ldr	r2, [r4, #16]
 800605a:	455a      	cmp	r2, fp
 800605c:	dd0b      	ble.n	8006076 <__gethex+0x45a>
 800605e:	2101      	movs	r1, #1
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff fd73 	bl	8005b4c <rshift>
 8006066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800606a:	3501      	adds	r5, #1
 800606c:	42ab      	cmp	r3, r5
 800606e:	f6ff aed4 	blt.w	8005e1a <__gethex+0x1fe>
 8006072:	2701      	movs	r7, #1
 8006074:	e7c2      	b.n	8005ffc <__gethex+0x3e0>
 8006076:	f016 061f 	ands.w	r6, r6, #31
 800607a:	d0fa      	beq.n	8006072 <__gethex+0x456>
 800607c:	4453      	add	r3, sl
 800607e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006082:	f000 fa07 	bl	8006494 <__hi0bits>
 8006086:	f1c6 0620 	rsb	r6, r6, #32
 800608a:	42b0      	cmp	r0, r6
 800608c:	dbe7      	blt.n	800605e <__gethex+0x442>
 800608e:	e7f0      	b.n	8006072 <__gethex+0x456>
 8006090:	08008dd8 	.word	0x08008dd8

08006094 <L_shift>:
 8006094:	f1c2 0208 	rsb	r2, r2, #8
 8006098:	0092      	lsls	r2, r2, #2
 800609a:	b570      	push	{r4, r5, r6, lr}
 800609c:	f1c2 0620 	rsb	r6, r2, #32
 80060a0:	6843      	ldr	r3, [r0, #4]
 80060a2:	6804      	ldr	r4, [r0, #0]
 80060a4:	fa03 f506 	lsl.w	r5, r3, r6
 80060a8:	432c      	orrs	r4, r5
 80060aa:	40d3      	lsrs	r3, r2
 80060ac:	6004      	str	r4, [r0, #0]
 80060ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80060b2:	4288      	cmp	r0, r1
 80060b4:	d3f4      	bcc.n	80060a0 <L_shift+0xc>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}

080060b8 <__match>:
 80060b8:	b530      	push	{r4, r5, lr}
 80060ba:	6803      	ldr	r3, [r0, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c2:	b914      	cbnz	r4, 80060ca <__match+0x12>
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	2001      	movs	r0, #1
 80060c8:	bd30      	pop	{r4, r5, pc}
 80060ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80060d2:	2d19      	cmp	r5, #25
 80060d4:	bf98      	it	ls
 80060d6:	3220      	addls	r2, #32
 80060d8:	42a2      	cmp	r2, r4
 80060da:	d0f0      	beq.n	80060be <__match+0x6>
 80060dc:	2000      	movs	r0, #0
 80060de:	e7f3      	b.n	80060c8 <__match+0x10>

080060e0 <__hexnan>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	2500      	movs	r5, #0
 80060e6:	680b      	ldr	r3, [r1, #0]
 80060e8:	4682      	mov	sl, r0
 80060ea:	115e      	asrs	r6, r3, #5
 80060ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80060f0:	f013 031f 	ands.w	r3, r3, #31
 80060f4:	bf18      	it	ne
 80060f6:	3604      	addne	r6, #4
 80060f8:	1f37      	subs	r7, r6, #4
 80060fa:	46b9      	mov	r9, r7
 80060fc:	463c      	mov	r4, r7
 80060fe:	46ab      	mov	fp, r5
 8006100:	b087      	sub	sp, #28
 8006102:	4690      	mov	r8, r2
 8006104:	6802      	ldr	r2, [r0, #0]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	f846 5c04 	str.w	r5, [r6, #-4]
 800610c:	9502      	str	r5, [sp, #8]
 800610e:	7851      	ldrb	r1, [r2, #1]
 8006110:	1c53      	adds	r3, r2, #1
 8006112:	9303      	str	r3, [sp, #12]
 8006114:	b341      	cbz	r1, 8006168 <__hexnan+0x88>
 8006116:	4608      	mov	r0, r1
 8006118:	9205      	str	r2, [sp, #20]
 800611a:	9104      	str	r1, [sp, #16]
 800611c:	f7ff fd69 	bl	8005bf2 <__hexdig_fun>
 8006120:	2800      	cmp	r0, #0
 8006122:	d14f      	bne.n	80061c4 <__hexnan+0xe4>
 8006124:	9904      	ldr	r1, [sp, #16]
 8006126:	9a05      	ldr	r2, [sp, #20]
 8006128:	2920      	cmp	r1, #32
 800612a:	d818      	bhi.n	800615e <__hexnan+0x7e>
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	459b      	cmp	fp, r3
 8006130:	dd13      	ble.n	800615a <__hexnan+0x7a>
 8006132:	454c      	cmp	r4, r9
 8006134:	d206      	bcs.n	8006144 <__hexnan+0x64>
 8006136:	2d07      	cmp	r5, #7
 8006138:	dc04      	bgt.n	8006144 <__hexnan+0x64>
 800613a:	462a      	mov	r2, r5
 800613c:	4649      	mov	r1, r9
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ffa8 	bl	8006094 <L_shift>
 8006144:	4544      	cmp	r4, r8
 8006146:	d950      	bls.n	80061ea <__hexnan+0x10a>
 8006148:	2300      	movs	r3, #0
 800614a:	f1a4 0904 	sub.w	r9, r4, #4
 800614e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006152:	461d      	mov	r5, r3
 8006154:	464c      	mov	r4, r9
 8006156:	f8cd b008 	str.w	fp, [sp, #8]
 800615a:	9a03      	ldr	r2, [sp, #12]
 800615c:	e7d7      	b.n	800610e <__hexnan+0x2e>
 800615e:	2929      	cmp	r1, #41	; 0x29
 8006160:	d156      	bne.n	8006210 <__hexnan+0x130>
 8006162:	3202      	adds	r2, #2
 8006164:	f8ca 2000 	str.w	r2, [sl]
 8006168:	f1bb 0f00 	cmp.w	fp, #0
 800616c:	d050      	beq.n	8006210 <__hexnan+0x130>
 800616e:	454c      	cmp	r4, r9
 8006170:	d206      	bcs.n	8006180 <__hexnan+0xa0>
 8006172:	2d07      	cmp	r5, #7
 8006174:	dc04      	bgt.n	8006180 <__hexnan+0xa0>
 8006176:	462a      	mov	r2, r5
 8006178:	4649      	mov	r1, r9
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff ff8a 	bl	8006094 <L_shift>
 8006180:	4544      	cmp	r4, r8
 8006182:	d934      	bls.n	80061ee <__hexnan+0x10e>
 8006184:	4623      	mov	r3, r4
 8006186:	f1a8 0204 	sub.w	r2, r8, #4
 800618a:	f853 1b04 	ldr.w	r1, [r3], #4
 800618e:	429f      	cmp	r7, r3
 8006190:	f842 1f04 	str.w	r1, [r2, #4]!
 8006194:	d2f9      	bcs.n	800618a <__hexnan+0xaa>
 8006196:	1b3b      	subs	r3, r7, r4
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	3304      	adds	r3, #4
 800619e:	3401      	adds	r4, #1
 80061a0:	3e03      	subs	r6, #3
 80061a2:	42b4      	cmp	r4, r6
 80061a4:	bf88      	it	hi
 80061a6:	2304      	movhi	r3, #4
 80061a8:	2200      	movs	r2, #0
 80061aa:	4443      	add	r3, r8
 80061ac:	f843 2b04 	str.w	r2, [r3], #4
 80061b0:	429f      	cmp	r7, r3
 80061b2:	d2fb      	bcs.n	80061ac <__hexnan+0xcc>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	b91b      	cbnz	r3, 80061c0 <__hexnan+0xe0>
 80061b8:	4547      	cmp	r7, r8
 80061ba:	d127      	bne.n	800620c <__hexnan+0x12c>
 80061bc:	2301      	movs	r3, #1
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	2005      	movs	r0, #5
 80061c2:	e026      	b.n	8006212 <__hexnan+0x132>
 80061c4:	3501      	adds	r5, #1
 80061c6:	2d08      	cmp	r5, #8
 80061c8:	f10b 0b01 	add.w	fp, fp, #1
 80061cc:	dd06      	ble.n	80061dc <__hexnan+0xfc>
 80061ce:	4544      	cmp	r4, r8
 80061d0:	d9c3      	bls.n	800615a <__hexnan+0x7a>
 80061d2:	2300      	movs	r3, #0
 80061d4:	2501      	movs	r5, #1
 80061d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80061da:	3c04      	subs	r4, #4
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	f000 000f 	and.w	r0, r0, #15
 80061e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80061e6:	6022      	str	r2, [r4, #0]
 80061e8:	e7b7      	b.n	800615a <__hexnan+0x7a>
 80061ea:	2508      	movs	r5, #8
 80061ec:	e7b5      	b.n	800615a <__hexnan+0x7a>
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0df      	beq.n	80061b4 <__hexnan+0xd4>
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	f1c3 0320 	rsb	r3, r3, #32
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006204:	401a      	ands	r2, r3
 8006206:	f846 2c04 	str.w	r2, [r6, #-4]
 800620a:	e7d3      	b.n	80061b4 <__hexnan+0xd4>
 800620c:	3f04      	subs	r7, #4
 800620e:	e7d1      	b.n	80061b4 <__hexnan+0xd4>
 8006210:	2004      	movs	r0, #4
 8006212:	b007      	add	sp, #28
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006218 <_localeconv_r>:
 8006218:	4800      	ldr	r0, [pc, #0]	; (800621c <_localeconv_r+0x4>)
 800621a:	4770      	bx	lr
 800621c:	20000170 	.word	0x20000170

08006220 <_lseek_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	4611      	mov	r1, r2
 8006228:	2200      	movs	r2, #0
 800622a:	4d05      	ldr	r5, [pc, #20]	; (8006240 <_lseek_r+0x20>)
 800622c:	602a      	str	r2, [r5, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	f7fb f8de 	bl	80013f0 <_lseek>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_lseek_r+0x1e>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_lseek_r+0x1e>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	200003b8 	.word	0x200003b8

08006244 <malloc>:
 8006244:	4b02      	ldr	r3, [pc, #8]	; (8006250 <malloc+0xc>)
 8006246:	4601      	mov	r1, r0
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	f000 bd65 	b.w	8006d18 <_malloc_r>
 800624e:	bf00      	nop
 8006250:	20000018 	.word	0x20000018

08006254 <__ascii_mbtowc>:
 8006254:	b082      	sub	sp, #8
 8006256:	b901      	cbnz	r1, 800625a <__ascii_mbtowc+0x6>
 8006258:	a901      	add	r1, sp, #4
 800625a:	b142      	cbz	r2, 800626e <__ascii_mbtowc+0x1a>
 800625c:	b14b      	cbz	r3, 8006272 <__ascii_mbtowc+0x1e>
 800625e:	7813      	ldrb	r3, [r2, #0]
 8006260:	600b      	str	r3, [r1, #0]
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	1e10      	subs	r0, r2, #0
 8006266:	bf18      	it	ne
 8006268:	2001      	movne	r0, #1
 800626a:	b002      	add	sp, #8
 800626c:	4770      	bx	lr
 800626e:	4610      	mov	r0, r2
 8006270:	e7fb      	b.n	800626a <__ascii_mbtowc+0x16>
 8006272:	f06f 0001 	mvn.w	r0, #1
 8006276:	e7f8      	b.n	800626a <__ascii_mbtowc+0x16>

08006278 <memchr>:
 8006278:	4603      	mov	r3, r0
 800627a:	b510      	push	{r4, lr}
 800627c:	b2c9      	uxtb	r1, r1
 800627e:	4402      	add	r2, r0
 8006280:	4293      	cmp	r3, r2
 8006282:	4618      	mov	r0, r3
 8006284:	d101      	bne.n	800628a <memchr+0x12>
 8006286:	2000      	movs	r0, #0
 8006288:	e003      	b.n	8006292 <memchr+0x1a>
 800628a:	7804      	ldrb	r4, [r0, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	428c      	cmp	r4, r1
 8006290:	d1f6      	bne.n	8006280 <memchr+0x8>
 8006292:	bd10      	pop	{r4, pc}

08006294 <memcpy>:
 8006294:	440a      	add	r2, r1
 8006296:	4291      	cmp	r1, r2
 8006298:	f100 33ff 	add.w	r3, r0, #4294967295
 800629c:	d100      	bne.n	80062a0 <memcpy+0xc>
 800629e:	4770      	bx	lr
 80062a0:	b510      	push	{r4, lr}
 80062a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062a6:	4291      	cmp	r1, r2
 80062a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ac:	d1f9      	bne.n	80062a2 <memcpy+0xe>
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <_Balloc>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062b4:	4604      	mov	r4, r0
 80062b6:	460d      	mov	r5, r1
 80062b8:	b976      	cbnz	r6, 80062d8 <_Balloc+0x28>
 80062ba:	2010      	movs	r0, #16
 80062bc:	f7ff ffc2 	bl	8006244 <malloc>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6260      	str	r0, [r4, #36]	; 0x24
 80062c4:	b920      	cbnz	r0, 80062d0 <_Balloc+0x20>
 80062c6:	2166      	movs	r1, #102	; 0x66
 80062c8:	4b17      	ldr	r3, [pc, #92]	; (8006328 <_Balloc+0x78>)
 80062ca:	4818      	ldr	r0, [pc, #96]	; (800632c <_Balloc+0x7c>)
 80062cc:	f001 fb48 	bl	8007960 <__assert_func>
 80062d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062d4:	6006      	str	r6, [r0, #0]
 80062d6:	60c6      	str	r6, [r0, #12]
 80062d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062da:	68f3      	ldr	r3, [r6, #12]
 80062dc:	b183      	cbz	r3, 8006300 <_Balloc+0x50>
 80062de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062e6:	b9b8      	cbnz	r0, 8006318 <_Balloc+0x68>
 80062e8:	2101      	movs	r1, #1
 80062ea:	fa01 f605 	lsl.w	r6, r1, r5
 80062ee:	1d72      	adds	r2, r6, #5
 80062f0:	4620      	mov	r0, r4
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	f000 fc94 	bl	8006c20 <_calloc_r>
 80062f8:	b160      	cbz	r0, 8006314 <_Balloc+0x64>
 80062fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062fe:	e00e      	b.n	800631e <_Balloc+0x6e>
 8006300:	2221      	movs	r2, #33	; 0x21
 8006302:	2104      	movs	r1, #4
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fc8b 	bl	8006c20 <_calloc_r>
 800630a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800630c:	60f0      	str	r0, [r6, #12]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <_Balloc+0x2e>
 8006314:	2000      	movs	r0, #0
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	6802      	ldr	r2, [r0, #0]
 800631a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800631e:	2300      	movs	r3, #0
 8006320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006324:	e7f7      	b.n	8006316 <_Balloc+0x66>
 8006326:	bf00      	nop
 8006328:	08008d66 	.word	0x08008d66
 800632c:	08008e64 	.word	0x08008e64

08006330 <_Bfree>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006334:	4605      	mov	r5, r0
 8006336:	460c      	mov	r4, r1
 8006338:	b976      	cbnz	r6, 8006358 <_Bfree+0x28>
 800633a:	2010      	movs	r0, #16
 800633c:	f7ff ff82 	bl	8006244 <malloc>
 8006340:	4602      	mov	r2, r0
 8006342:	6268      	str	r0, [r5, #36]	; 0x24
 8006344:	b920      	cbnz	r0, 8006350 <_Bfree+0x20>
 8006346:	218a      	movs	r1, #138	; 0x8a
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <_Bfree+0x3c>)
 800634a:	4809      	ldr	r0, [pc, #36]	; (8006370 <_Bfree+0x40>)
 800634c:	f001 fb08 	bl	8007960 <__assert_func>
 8006350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006354:	6006      	str	r6, [r0, #0]
 8006356:	60c6      	str	r6, [r0, #12]
 8006358:	b13c      	cbz	r4, 800636a <_Bfree+0x3a>
 800635a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800635c:	6862      	ldr	r2, [r4, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006364:	6021      	str	r1, [r4, #0]
 8006366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	08008d66 	.word	0x08008d66
 8006370:	08008e64 	.word	0x08008e64

08006374 <__multadd>:
 8006374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006378:	4607      	mov	r7, r0
 800637a:	460c      	mov	r4, r1
 800637c:	461e      	mov	r6, r3
 800637e:	2000      	movs	r0, #0
 8006380:	690d      	ldr	r5, [r1, #16]
 8006382:	f101 0c14 	add.w	ip, r1, #20
 8006386:	f8dc 3000 	ldr.w	r3, [ip]
 800638a:	3001      	adds	r0, #1
 800638c:	b299      	uxth	r1, r3
 800638e:	fb02 6101 	mla	r1, r2, r1, r6
 8006392:	0c1e      	lsrs	r6, r3, #16
 8006394:	0c0b      	lsrs	r3, r1, #16
 8006396:	fb02 3306 	mla	r3, r2, r6, r3
 800639a:	b289      	uxth	r1, r1
 800639c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063a0:	4285      	cmp	r5, r0
 80063a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063a6:	f84c 1b04 	str.w	r1, [ip], #4
 80063aa:	dcec      	bgt.n	8006386 <__multadd+0x12>
 80063ac:	b30e      	cbz	r6, 80063f2 <__multadd+0x7e>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	42ab      	cmp	r3, r5
 80063b2:	dc19      	bgt.n	80063e8 <__multadd+0x74>
 80063b4:	6861      	ldr	r1, [r4, #4]
 80063b6:	4638      	mov	r0, r7
 80063b8:	3101      	adds	r1, #1
 80063ba:	f7ff ff79 	bl	80062b0 <_Balloc>
 80063be:	4680      	mov	r8, r0
 80063c0:	b928      	cbnz	r0, 80063ce <__multadd+0x5a>
 80063c2:	4602      	mov	r2, r0
 80063c4:	21b5      	movs	r1, #181	; 0xb5
 80063c6:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <__multadd+0x84>)
 80063c8:	480c      	ldr	r0, [pc, #48]	; (80063fc <__multadd+0x88>)
 80063ca:	f001 fac9 	bl	8007960 <__assert_func>
 80063ce:	6922      	ldr	r2, [r4, #16]
 80063d0:	f104 010c 	add.w	r1, r4, #12
 80063d4:	3202      	adds	r2, #2
 80063d6:	0092      	lsls	r2, r2, #2
 80063d8:	300c      	adds	r0, #12
 80063da:	f7ff ff5b 	bl	8006294 <memcpy>
 80063de:	4621      	mov	r1, r4
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7ff ffa5 	bl	8006330 <_Bfree>
 80063e6:	4644      	mov	r4, r8
 80063e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063ec:	3501      	adds	r5, #1
 80063ee:	615e      	str	r6, [r3, #20]
 80063f0:	6125      	str	r5, [r4, #16]
 80063f2:	4620      	mov	r0, r4
 80063f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f8:	08008dd8 	.word	0x08008dd8
 80063fc:	08008e64 	.word	0x08008e64

08006400 <__s2b>:
 8006400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006404:	4615      	mov	r5, r2
 8006406:	2209      	movs	r2, #9
 8006408:	461f      	mov	r7, r3
 800640a:	3308      	adds	r3, #8
 800640c:	460c      	mov	r4, r1
 800640e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006412:	4606      	mov	r6, r0
 8006414:	2201      	movs	r2, #1
 8006416:	2100      	movs	r1, #0
 8006418:	429a      	cmp	r2, r3
 800641a:	db09      	blt.n	8006430 <__s2b+0x30>
 800641c:	4630      	mov	r0, r6
 800641e:	f7ff ff47 	bl	80062b0 <_Balloc>
 8006422:	b940      	cbnz	r0, 8006436 <__s2b+0x36>
 8006424:	4602      	mov	r2, r0
 8006426:	21ce      	movs	r1, #206	; 0xce
 8006428:	4b18      	ldr	r3, [pc, #96]	; (800648c <__s2b+0x8c>)
 800642a:	4819      	ldr	r0, [pc, #100]	; (8006490 <__s2b+0x90>)
 800642c:	f001 fa98 	bl	8007960 <__assert_func>
 8006430:	0052      	lsls	r2, r2, #1
 8006432:	3101      	adds	r1, #1
 8006434:	e7f0      	b.n	8006418 <__s2b+0x18>
 8006436:	9b08      	ldr	r3, [sp, #32]
 8006438:	2d09      	cmp	r5, #9
 800643a:	6143      	str	r3, [r0, #20]
 800643c:	f04f 0301 	mov.w	r3, #1
 8006440:	6103      	str	r3, [r0, #16]
 8006442:	dd16      	ble.n	8006472 <__s2b+0x72>
 8006444:	f104 0909 	add.w	r9, r4, #9
 8006448:	46c8      	mov	r8, r9
 800644a:	442c      	add	r4, r5
 800644c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006450:	4601      	mov	r1, r0
 8006452:	220a      	movs	r2, #10
 8006454:	4630      	mov	r0, r6
 8006456:	3b30      	subs	r3, #48	; 0x30
 8006458:	f7ff ff8c 	bl	8006374 <__multadd>
 800645c:	45a0      	cmp	r8, r4
 800645e:	d1f5      	bne.n	800644c <__s2b+0x4c>
 8006460:	f1a5 0408 	sub.w	r4, r5, #8
 8006464:	444c      	add	r4, r9
 8006466:	1b2d      	subs	r5, r5, r4
 8006468:	1963      	adds	r3, r4, r5
 800646a:	42bb      	cmp	r3, r7
 800646c:	db04      	blt.n	8006478 <__s2b+0x78>
 800646e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006472:	2509      	movs	r5, #9
 8006474:	340a      	adds	r4, #10
 8006476:	e7f6      	b.n	8006466 <__s2b+0x66>
 8006478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800647c:	4601      	mov	r1, r0
 800647e:	220a      	movs	r2, #10
 8006480:	4630      	mov	r0, r6
 8006482:	3b30      	subs	r3, #48	; 0x30
 8006484:	f7ff ff76 	bl	8006374 <__multadd>
 8006488:	e7ee      	b.n	8006468 <__s2b+0x68>
 800648a:	bf00      	nop
 800648c:	08008dd8 	.word	0x08008dd8
 8006490:	08008e64 	.word	0x08008e64

08006494 <__hi0bits>:
 8006494:	0c02      	lsrs	r2, r0, #16
 8006496:	0412      	lsls	r2, r2, #16
 8006498:	4603      	mov	r3, r0
 800649a:	b9ca      	cbnz	r2, 80064d0 <__hi0bits+0x3c>
 800649c:	0403      	lsls	r3, r0, #16
 800649e:	2010      	movs	r0, #16
 80064a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064a4:	bf04      	itt	eq
 80064a6:	021b      	lsleq	r3, r3, #8
 80064a8:	3008      	addeq	r0, #8
 80064aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064ae:	bf04      	itt	eq
 80064b0:	011b      	lsleq	r3, r3, #4
 80064b2:	3004      	addeq	r0, #4
 80064b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064b8:	bf04      	itt	eq
 80064ba:	009b      	lsleq	r3, r3, #2
 80064bc:	3002      	addeq	r0, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	db05      	blt.n	80064ce <__hi0bits+0x3a>
 80064c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064c6:	f100 0001 	add.w	r0, r0, #1
 80064ca:	bf08      	it	eq
 80064cc:	2020      	moveq	r0, #32
 80064ce:	4770      	bx	lr
 80064d0:	2000      	movs	r0, #0
 80064d2:	e7e5      	b.n	80064a0 <__hi0bits+0xc>

080064d4 <__lo0bits>:
 80064d4:	6803      	ldr	r3, [r0, #0]
 80064d6:	4602      	mov	r2, r0
 80064d8:	f013 0007 	ands.w	r0, r3, #7
 80064dc:	d00b      	beq.n	80064f6 <__lo0bits+0x22>
 80064de:	07d9      	lsls	r1, r3, #31
 80064e0:	d421      	bmi.n	8006526 <__lo0bits+0x52>
 80064e2:	0798      	lsls	r0, r3, #30
 80064e4:	bf49      	itett	mi
 80064e6:	085b      	lsrmi	r3, r3, #1
 80064e8:	089b      	lsrpl	r3, r3, #2
 80064ea:	2001      	movmi	r0, #1
 80064ec:	6013      	strmi	r3, [r2, #0]
 80064ee:	bf5c      	itt	pl
 80064f0:	2002      	movpl	r0, #2
 80064f2:	6013      	strpl	r3, [r2, #0]
 80064f4:	4770      	bx	lr
 80064f6:	b299      	uxth	r1, r3
 80064f8:	b909      	cbnz	r1, 80064fe <__lo0bits+0x2a>
 80064fa:	2010      	movs	r0, #16
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	b2d9      	uxtb	r1, r3
 8006500:	b909      	cbnz	r1, 8006506 <__lo0bits+0x32>
 8006502:	3008      	adds	r0, #8
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	0719      	lsls	r1, r3, #28
 8006508:	bf04      	itt	eq
 800650a:	091b      	lsreq	r3, r3, #4
 800650c:	3004      	addeq	r0, #4
 800650e:	0799      	lsls	r1, r3, #30
 8006510:	bf04      	itt	eq
 8006512:	089b      	lsreq	r3, r3, #2
 8006514:	3002      	addeq	r0, #2
 8006516:	07d9      	lsls	r1, r3, #31
 8006518:	d403      	bmi.n	8006522 <__lo0bits+0x4e>
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	f100 0001 	add.w	r0, r0, #1
 8006520:	d003      	beq.n	800652a <__lo0bits+0x56>
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4770      	bx	lr
 8006526:	2000      	movs	r0, #0
 8006528:	4770      	bx	lr
 800652a:	2020      	movs	r0, #32
 800652c:	4770      	bx	lr
	...

08006530 <__i2b>:
 8006530:	b510      	push	{r4, lr}
 8006532:	460c      	mov	r4, r1
 8006534:	2101      	movs	r1, #1
 8006536:	f7ff febb 	bl	80062b0 <_Balloc>
 800653a:	4602      	mov	r2, r0
 800653c:	b928      	cbnz	r0, 800654a <__i2b+0x1a>
 800653e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006542:	4b04      	ldr	r3, [pc, #16]	; (8006554 <__i2b+0x24>)
 8006544:	4804      	ldr	r0, [pc, #16]	; (8006558 <__i2b+0x28>)
 8006546:	f001 fa0b 	bl	8007960 <__assert_func>
 800654a:	2301      	movs	r3, #1
 800654c:	6144      	str	r4, [r0, #20]
 800654e:	6103      	str	r3, [r0, #16]
 8006550:	bd10      	pop	{r4, pc}
 8006552:	bf00      	nop
 8006554:	08008dd8 	.word	0x08008dd8
 8006558:	08008e64 	.word	0x08008e64

0800655c <__multiply>:
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	4691      	mov	r9, r2
 8006562:	690a      	ldr	r2, [r1, #16]
 8006564:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006568:	460c      	mov	r4, r1
 800656a:	429a      	cmp	r2, r3
 800656c:	bfbe      	ittt	lt
 800656e:	460b      	movlt	r3, r1
 8006570:	464c      	movlt	r4, r9
 8006572:	4699      	movlt	r9, r3
 8006574:	6927      	ldr	r7, [r4, #16]
 8006576:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	6861      	ldr	r1, [r4, #4]
 800657e:	eb07 060a 	add.w	r6, r7, sl
 8006582:	42b3      	cmp	r3, r6
 8006584:	b085      	sub	sp, #20
 8006586:	bfb8      	it	lt
 8006588:	3101      	addlt	r1, #1
 800658a:	f7ff fe91 	bl	80062b0 <_Balloc>
 800658e:	b930      	cbnz	r0, 800659e <__multiply+0x42>
 8006590:	4602      	mov	r2, r0
 8006592:	f240 115d 	movw	r1, #349	; 0x15d
 8006596:	4b43      	ldr	r3, [pc, #268]	; (80066a4 <__multiply+0x148>)
 8006598:	4843      	ldr	r0, [pc, #268]	; (80066a8 <__multiply+0x14c>)
 800659a:	f001 f9e1 	bl	8007960 <__assert_func>
 800659e:	f100 0514 	add.w	r5, r0, #20
 80065a2:	462b      	mov	r3, r5
 80065a4:	2200      	movs	r2, #0
 80065a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065aa:	4543      	cmp	r3, r8
 80065ac:	d321      	bcc.n	80065f2 <__multiply+0x96>
 80065ae:	f104 0314 	add.w	r3, r4, #20
 80065b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065b6:	f109 0314 	add.w	r3, r9, #20
 80065ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065be:	9202      	str	r2, [sp, #8]
 80065c0:	1b3a      	subs	r2, r7, r4
 80065c2:	3a15      	subs	r2, #21
 80065c4:	f022 0203 	bic.w	r2, r2, #3
 80065c8:	3204      	adds	r2, #4
 80065ca:	f104 0115 	add.w	r1, r4, #21
 80065ce:	428f      	cmp	r7, r1
 80065d0:	bf38      	it	cc
 80065d2:	2204      	movcc	r2, #4
 80065d4:	9201      	str	r2, [sp, #4]
 80065d6:	9a02      	ldr	r2, [sp, #8]
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d80c      	bhi.n	80065f8 <__multiply+0x9c>
 80065de:	2e00      	cmp	r6, #0
 80065e0:	dd03      	ble.n	80065ea <__multiply+0x8e>
 80065e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d059      	beq.n	800669e <__multiply+0x142>
 80065ea:	6106      	str	r6, [r0, #16]
 80065ec:	b005      	add	sp, #20
 80065ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f2:	f843 2b04 	str.w	r2, [r3], #4
 80065f6:	e7d8      	b.n	80065aa <__multiply+0x4e>
 80065f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80065fc:	f1ba 0f00 	cmp.w	sl, #0
 8006600:	d023      	beq.n	800664a <__multiply+0xee>
 8006602:	46a9      	mov	r9, r5
 8006604:	f04f 0c00 	mov.w	ip, #0
 8006608:	f104 0e14 	add.w	lr, r4, #20
 800660c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006610:	f8d9 1000 	ldr.w	r1, [r9]
 8006614:	fa1f fb82 	uxth.w	fp, r2
 8006618:	b289      	uxth	r1, r1
 800661a:	fb0a 110b 	mla	r1, sl, fp, r1
 800661e:	4461      	add	r1, ip
 8006620:	f8d9 c000 	ldr.w	ip, [r9]
 8006624:	0c12      	lsrs	r2, r2, #16
 8006626:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800662a:	fb0a c202 	mla	r2, sl, r2, ip
 800662e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006632:	b289      	uxth	r1, r1
 8006634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006638:	4577      	cmp	r7, lr
 800663a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800663e:	f849 1b04 	str.w	r1, [r9], #4
 8006642:	d8e3      	bhi.n	800660c <__multiply+0xb0>
 8006644:	9a01      	ldr	r2, [sp, #4]
 8006646:	f845 c002 	str.w	ip, [r5, r2]
 800664a:	9a03      	ldr	r2, [sp, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006652:	f1b9 0f00 	cmp.w	r9, #0
 8006656:	d020      	beq.n	800669a <__multiply+0x13e>
 8006658:	46ae      	mov	lr, r5
 800665a:	f04f 0a00 	mov.w	sl, #0
 800665e:	6829      	ldr	r1, [r5, #0]
 8006660:	f104 0c14 	add.w	ip, r4, #20
 8006664:	f8bc b000 	ldrh.w	fp, [ip]
 8006668:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800666c:	b289      	uxth	r1, r1
 800666e:	fb09 220b 	mla	r2, r9, fp, r2
 8006672:	4492      	add	sl, r2
 8006674:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006678:	f84e 1b04 	str.w	r1, [lr], #4
 800667c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006680:	f8be 1000 	ldrh.w	r1, [lr]
 8006684:	0c12      	lsrs	r2, r2, #16
 8006686:	fb09 1102 	mla	r1, r9, r2, r1
 800668a:	4567      	cmp	r7, ip
 800668c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006694:	d8e6      	bhi.n	8006664 <__multiply+0x108>
 8006696:	9a01      	ldr	r2, [sp, #4]
 8006698:	50a9      	str	r1, [r5, r2]
 800669a:	3504      	adds	r5, #4
 800669c:	e79b      	b.n	80065d6 <__multiply+0x7a>
 800669e:	3e01      	subs	r6, #1
 80066a0:	e79d      	b.n	80065de <__multiply+0x82>
 80066a2:	bf00      	nop
 80066a4:	08008dd8 	.word	0x08008dd8
 80066a8:	08008e64 	.word	0x08008e64

080066ac <__pow5mult>:
 80066ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b0:	4615      	mov	r5, r2
 80066b2:	f012 0203 	ands.w	r2, r2, #3
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	d007      	beq.n	80066cc <__pow5mult+0x20>
 80066bc:	4c25      	ldr	r4, [pc, #148]	; (8006754 <__pow5mult+0xa8>)
 80066be:	3a01      	subs	r2, #1
 80066c0:	2300      	movs	r3, #0
 80066c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066c6:	f7ff fe55 	bl	8006374 <__multadd>
 80066ca:	4607      	mov	r7, r0
 80066cc:	10ad      	asrs	r5, r5, #2
 80066ce:	d03d      	beq.n	800674c <__pow5mult+0xa0>
 80066d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066d2:	b97c      	cbnz	r4, 80066f4 <__pow5mult+0x48>
 80066d4:	2010      	movs	r0, #16
 80066d6:	f7ff fdb5 	bl	8006244 <malloc>
 80066da:	4602      	mov	r2, r0
 80066dc:	6270      	str	r0, [r6, #36]	; 0x24
 80066de:	b928      	cbnz	r0, 80066ec <__pow5mult+0x40>
 80066e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066e4:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <__pow5mult+0xac>)
 80066e6:	481d      	ldr	r0, [pc, #116]	; (800675c <__pow5mult+0xb0>)
 80066e8:	f001 f93a 	bl	8007960 <__assert_func>
 80066ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066f0:	6004      	str	r4, [r0, #0]
 80066f2:	60c4      	str	r4, [r0, #12]
 80066f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066fc:	b94c      	cbnz	r4, 8006712 <__pow5mult+0x66>
 80066fe:	f240 2171 	movw	r1, #625	; 0x271
 8006702:	4630      	mov	r0, r6
 8006704:	f7ff ff14 	bl	8006530 <__i2b>
 8006708:	2300      	movs	r3, #0
 800670a:	4604      	mov	r4, r0
 800670c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006710:	6003      	str	r3, [r0, #0]
 8006712:	f04f 0900 	mov.w	r9, #0
 8006716:	07eb      	lsls	r3, r5, #31
 8006718:	d50a      	bpl.n	8006730 <__pow5mult+0x84>
 800671a:	4639      	mov	r1, r7
 800671c:	4622      	mov	r2, r4
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ff1c 	bl	800655c <__multiply>
 8006724:	4680      	mov	r8, r0
 8006726:	4639      	mov	r1, r7
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff fe01 	bl	8006330 <_Bfree>
 800672e:	4647      	mov	r7, r8
 8006730:	106d      	asrs	r5, r5, #1
 8006732:	d00b      	beq.n	800674c <__pow5mult+0xa0>
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	b938      	cbnz	r0, 8006748 <__pow5mult+0x9c>
 8006738:	4622      	mov	r2, r4
 800673a:	4621      	mov	r1, r4
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff ff0d 	bl	800655c <__multiply>
 8006742:	6020      	str	r0, [r4, #0]
 8006744:	f8c0 9000 	str.w	r9, [r0]
 8006748:	4604      	mov	r4, r0
 800674a:	e7e4      	b.n	8006716 <__pow5mult+0x6a>
 800674c:	4638      	mov	r0, r7
 800674e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006752:	bf00      	nop
 8006754:	08008fb0 	.word	0x08008fb0
 8006758:	08008d66 	.word	0x08008d66
 800675c:	08008e64 	.word	0x08008e64

08006760 <__lshift>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	460c      	mov	r4, r1
 8006766:	4607      	mov	r7, r0
 8006768:	4691      	mov	r9, r2
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	6849      	ldr	r1, [r1, #4]
 800676e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006778:	f108 0601 	add.w	r6, r8, #1
 800677c:	42b3      	cmp	r3, r6
 800677e:	db0b      	blt.n	8006798 <__lshift+0x38>
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff fd95 	bl	80062b0 <_Balloc>
 8006786:	4605      	mov	r5, r0
 8006788:	b948      	cbnz	r0, 800679e <__lshift+0x3e>
 800678a:	4602      	mov	r2, r0
 800678c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006790:	4b29      	ldr	r3, [pc, #164]	; (8006838 <__lshift+0xd8>)
 8006792:	482a      	ldr	r0, [pc, #168]	; (800683c <__lshift+0xdc>)
 8006794:	f001 f8e4 	bl	8007960 <__assert_func>
 8006798:	3101      	adds	r1, #1
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	e7ee      	b.n	800677c <__lshift+0x1c>
 800679e:	2300      	movs	r3, #0
 80067a0:	f100 0114 	add.w	r1, r0, #20
 80067a4:	f100 0210 	add.w	r2, r0, #16
 80067a8:	4618      	mov	r0, r3
 80067aa:	4553      	cmp	r3, sl
 80067ac:	db37      	blt.n	800681e <__lshift+0xbe>
 80067ae:	6920      	ldr	r0, [r4, #16]
 80067b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067b4:	f104 0314 	add.w	r3, r4, #20
 80067b8:	f019 091f 	ands.w	r9, r9, #31
 80067bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067c4:	d02f      	beq.n	8006826 <__lshift+0xc6>
 80067c6:	468a      	mov	sl, r1
 80067c8:	f04f 0c00 	mov.w	ip, #0
 80067cc:	f1c9 0e20 	rsb	lr, r9, #32
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	fa02 f209 	lsl.w	r2, r2, r9
 80067d6:	ea42 020c 	orr.w	r2, r2, ip
 80067da:	f84a 2b04 	str.w	r2, [sl], #4
 80067de:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e2:	4298      	cmp	r0, r3
 80067e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067e8:	d8f2      	bhi.n	80067d0 <__lshift+0x70>
 80067ea:	1b03      	subs	r3, r0, r4
 80067ec:	3b15      	subs	r3, #21
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	3304      	adds	r3, #4
 80067f4:	f104 0215 	add.w	r2, r4, #21
 80067f8:	4290      	cmp	r0, r2
 80067fa:	bf38      	it	cc
 80067fc:	2304      	movcc	r3, #4
 80067fe:	f841 c003 	str.w	ip, [r1, r3]
 8006802:	f1bc 0f00 	cmp.w	ip, #0
 8006806:	d001      	beq.n	800680c <__lshift+0xac>
 8006808:	f108 0602 	add.w	r6, r8, #2
 800680c:	3e01      	subs	r6, #1
 800680e:	4638      	mov	r0, r7
 8006810:	4621      	mov	r1, r4
 8006812:	612e      	str	r6, [r5, #16]
 8006814:	f7ff fd8c 	bl	8006330 <_Bfree>
 8006818:	4628      	mov	r0, r5
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006822:	3301      	adds	r3, #1
 8006824:	e7c1      	b.n	80067aa <__lshift+0x4a>
 8006826:	3904      	subs	r1, #4
 8006828:	f853 2b04 	ldr.w	r2, [r3], #4
 800682c:	4298      	cmp	r0, r3
 800682e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006832:	d8f9      	bhi.n	8006828 <__lshift+0xc8>
 8006834:	e7ea      	b.n	800680c <__lshift+0xac>
 8006836:	bf00      	nop
 8006838:	08008dd8 	.word	0x08008dd8
 800683c:	08008e64 	.word	0x08008e64

08006840 <__mcmp>:
 8006840:	4603      	mov	r3, r0
 8006842:	690a      	ldr	r2, [r1, #16]
 8006844:	6900      	ldr	r0, [r0, #16]
 8006846:	b530      	push	{r4, r5, lr}
 8006848:	1a80      	subs	r0, r0, r2
 800684a:	d10d      	bne.n	8006868 <__mcmp+0x28>
 800684c:	3314      	adds	r3, #20
 800684e:	3114      	adds	r1, #20
 8006850:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006854:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800685c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006860:	4295      	cmp	r5, r2
 8006862:	d002      	beq.n	800686a <__mcmp+0x2a>
 8006864:	d304      	bcc.n	8006870 <__mcmp+0x30>
 8006866:	2001      	movs	r0, #1
 8006868:	bd30      	pop	{r4, r5, pc}
 800686a:	42a3      	cmp	r3, r4
 800686c:	d3f4      	bcc.n	8006858 <__mcmp+0x18>
 800686e:	e7fb      	b.n	8006868 <__mcmp+0x28>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e7f8      	b.n	8006868 <__mcmp+0x28>
	...

08006878 <__mdiff>:
 8006878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	460d      	mov	r5, r1
 800687e:	4607      	mov	r7, r0
 8006880:	4611      	mov	r1, r2
 8006882:	4628      	mov	r0, r5
 8006884:	4614      	mov	r4, r2
 8006886:	f7ff ffdb 	bl	8006840 <__mcmp>
 800688a:	1e06      	subs	r6, r0, #0
 800688c:	d111      	bne.n	80068b2 <__mdiff+0x3a>
 800688e:	4631      	mov	r1, r6
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff fd0d 	bl	80062b0 <_Balloc>
 8006896:	4602      	mov	r2, r0
 8006898:	b928      	cbnz	r0, 80068a6 <__mdiff+0x2e>
 800689a:	f240 2132 	movw	r1, #562	; 0x232
 800689e:	4b3a      	ldr	r3, [pc, #232]	; (8006988 <__mdiff+0x110>)
 80068a0:	483a      	ldr	r0, [pc, #232]	; (800698c <__mdiff+0x114>)
 80068a2:	f001 f85d 	bl	8007960 <__assert_func>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068ac:	4610      	mov	r0, r2
 80068ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	bfa4      	itt	ge
 80068b4:	4623      	movge	r3, r4
 80068b6:	462c      	movge	r4, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	6861      	ldr	r1, [r4, #4]
 80068bc:	bfa6      	itte	ge
 80068be:	461d      	movge	r5, r3
 80068c0:	2600      	movge	r6, #0
 80068c2:	2601      	movlt	r6, #1
 80068c4:	f7ff fcf4 	bl	80062b0 <_Balloc>
 80068c8:	4602      	mov	r2, r0
 80068ca:	b918      	cbnz	r0, 80068d4 <__mdiff+0x5c>
 80068cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068d0:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <__mdiff+0x110>)
 80068d2:	e7e5      	b.n	80068a0 <__mdiff+0x28>
 80068d4:	f102 0814 	add.w	r8, r2, #20
 80068d8:	46c2      	mov	sl, r8
 80068da:	f04f 0c00 	mov.w	ip, #0
 80068de:	6927      	ldr	r7, [r4, #16]
 80068e0:	60c6      	str	r6, [r0, #12]
 80068e2:	692e      	ldr	r6, [r5, #16]
 80068e4:	f104 0014 	add.w	r0, r4, #20
 80068e8:	f105 0914 	add.w	r9, r5, #20
 80068ec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068f4:	3410      	adds	r4, #16
 80068f6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80068fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80068fe:	fa1f f18b 	uxth.w	r1, fp
 8006902:	448c      	add	ip, r1
 8006904:	b299      	uxth	r1, r3
 8006906:	0c1b      	lsrs	r3, r3, #16
 8006908:	ebac 0101 	sub.w	r1, ip, r1
 800690c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006910:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006914:	b289      	uxth	r1, r1
 8006916:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800691a:	454e      	cmp	r6, r9
 800691c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006920:	f84a 3b04 	str.w	r3, [sl], #4
 8006924:	d8e7      	bhi.n	80068f6 <__mdiff+0x7e>
 8006926:	1b73      	subs	r3, r6, r5
 8006928:	3b15      	subs	r3, #21
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	3515      	adds	r5, #21
 8006930:	3304      	adds	r3, #4
 8006932:	42ae      	cmp	r6, r5
 8006934:	bf38      	it	cc
 8006936:	2304      	movcc	r3, #4
 8006938:	4418      	add	r0, r3
 800693a:	4443      	add	r3, r8
 800693c:	461e      	mov	r6, r3
 800693e:	4605      	mov	r5, r0
 8006940:	4575      	cmp	r5, lr
 8006942:	d30e      	bcc.n	8006962 <__mdiff+0xea>
 8006944:	f10e 0103 	add.w	r1, lr, #3
 8006948:	1a09      	subs	r1, r1, r0
 800694a:	f021 0103 	bic.w	r1, r1, #3
 800694e:	3803      	subs	r0, #3
 8006950:	4586      	cmp	lr, r0
 8006952:	bf38      	it	cc
 8006954:	2100      	movcc	r1, #0
 8006956:	4419      	add	r1, r3
 8006958:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800695c:	b18b      	cbz	r3, 8006982 <__mdiff+0x10a>
 800695e:	6117      	str	r7, [r2, #16]
 8006960:	e7a4      	b.n	80068ac <__mdiff+0x34>
 8006962:	f855 8b04 	ldr.w	r8, [r5], #4
 8006966:	fa1f f188 	uxth.w	r1, r8
 800696a:	4461      	add	r1, ip
 800696c:	140c      	asrs	r4, r1, #16
 800696e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006972:	b289      	uxth	r1, r1
 8006974:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006978:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800697c:	f846 1b04 	str.w	r1, [r6], #4
 8006980:	e7de      	b.n	8006940 <__mdiff+0xc8>
 8006982:	3f01      	subs	r7, #1
 8006984:	e7e8      	b.n	8006958 <__mdiff+0xe0>
 8006986:	bf00      	nop
 8006988:	08008dd8 	.word	0x08008dd8
 800698c:	08008e64 	.word	0x08008e64

08006990 <__ulp>:
 8006990:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <__ulp+0x48>)
 8006992:	400b      	ands	r3, r1
 8006994:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006998:	2b00      	cmp	r3, #0
 800699a:	dd02      	ble.n	80069a2 <__ulp+0x12>
 800699c:	2000      	movs	r0, #0
 800699e:	4619      	mov	r1, r3
 80069a0:	4770      	bx	lr
 80069a2:	425b      	negs	r3, r3
 80069a4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80069a8:	f04f 0000 	mov.w	r0, #0
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069b4:	da04      	bge.n	80069c0 <__ulp+0x30>
 80069b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069ba:	fa43 f102 	asr.w	r1, r3, r2
 80069be:	4770      	bx	lr
 80069c0:	f1a2 0314 	sub.w	r3, r2, #20
 80069c4:	2b1e      	cmp	r3, #30
 80069c6:	bfd6      	itet	le
 80069c8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80069cc:	2301      	movgt	r3, #1
 80069ce:	fa22 f303 	lsrle.w	r3, r2, r3
 80069d2:	4618      	mov	r0, r3
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	7ff00000 	.word	0x7ff00000

080069dc <__b2d>:
 80069dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e0:	6907      	ldr	r7, [r0, #16]
 80069e2:	f100 0914 	add.w	r9, r0, #20
 80069e6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80069ea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80069ee:	f1a7 0804 	sub.w	r8, r7, #4
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff fd4e 	bl	8006494 <__hi0bits>
 80069f8:	f1c0 0320 	rsb	r3, r0, #32
 80069fc:	280a      	cmp	r0, #10
 80069fe:	600b      	str	r3, [r1, #0]
 8006a00:	491f      	ldr	r1, [pc, #124]	; (8006a80 <__b2d+0xa4>)
 8006a02:	dc17      	bgt.n	8006a34 <__b2d+0x58>
 8006a04:	45c1      	cmp	r9, r8
 8006a06:	bf28      	it	cs
 8006a08:	2200      	movcs	r2, #0
 8006a0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a0e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006a12:	bf38      	it	cc
 8006a14:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a18:	ea43 0501 	orr.w	r5, r3, r1
 8006a1c:	f100 0315 	add.w	r3, r0, #21
 8006a20:	fa06 f303 	lsl.w	r3, r6, r3
 8006a24:	fa22 f20c 	lsr.w	r2, r2, ip
 8006a28:	ea43 0402 	orr.w	r4, r3, r2
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a34:	45c1      	cmp	r9, r8
 8006a36:	bf2e      	itee	cs
 8006a38:	2200      	movcs	r2, #0
 8006a3a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a3e:	f1a7 0808 	subcc.w	r8, r7, #8
 8006a42:	f1b0 030b 	subs.w	r3, r0, #11
 8006a46:	d016      	beq.n	8006a76 <__b2d+0x9a>
 8006a48:	f1c3 0720 	rsb	r7, r3, #32
 8006a4c:	fa22 f107 	lsr.w	r1, r2, r7
 8006a50:	45c8      	cmp	r8, r9
 8006a52:	fa06 f603 	lsl.w	r6, r6, r3
 8006a56:	ea46 0601 	orr.w	r6, r6, r1
 8006a5a:	bf94      	ite	ls
 8006a5c:	2100      	movls	r1, #0
 8006a5e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006a62:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006a66:	fa02 f003 	lsl.w	r0, r2, r3
 8006a6a:	40f9      	lsrs	r1, r7
 8006a6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a70:	ea40 0401 	orr.w	r4, r0, r1
 8006a74:	e7da      	b.n	8006a2c <__b2d+0x50>
 8006a76:	4614      	mov	r4, r2
 8006a78:	ea46 0501 	orr.w	r5, r6, r1
 8006a7c:	e7d6      	b.n	8006a2c <__b2d+0x50>
 8006a7e:	bf00      	nop
 8006a80:	3ff00000 	.word	0x3ff00000

08006a84 <__d2b>:
 8006a84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a88:	2101      	movs	r1, #1
 8006a8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a8e:	4690      	mov	r8, r2
 8006a90:	461d      	mov	r5, r3
 8006a92:	f7ff fc0d 	bl	80062b0 <_Balloc>
 8006a96:	4604      	mov	r4, r0
 8006a98:	b930      	cbnz	r0, 8006aa8 <__d2b+0x24>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8006aa0:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <__d2b+0xb0>)
 8006aa2:	4825      	ldr	r0, [pc, #148]	; (8006b38 <__d2b+0xb4>)
 8006aa4:	f000 ff5c 	bl	8007960 <__assert_func>
 8006aa8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006aac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006ab0:	bb2d      	cbnz	r5, 8006afe <__d2b+0x7a>
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	f1b8 0300 	subs.w	r3, r8, #0
 8006ab8:	d026      	beq.n	8006b08 <__d2b+0x84>
 8006aba:	4668      	mov	r0, sp
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	f7ff fd09 	bl	80064d4 <__lo0bits>
 8006ac2:	9900      	ldr	r1, [sp, #0]
 8006ac4:	b1f0      	cbz	r0, 8006b04 <__d2b+0x80>
 8006ac6:	9a01      	ldr	r2, [sp, #4]
 8006ac8:	f1c0 0320 	rsb	r3, r0, #32
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	40c2      	lsrs	r2, r0
 8006ad4:	6163      	str	r3, [r4, #20]
 8006ad6:	9201      	str	r2, [sp, #4]
 8006ad8:	9b01      	ldr	r3, [sp, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bf14      	ite	ne
 8006ade:	2102      	movne	r1, #2
 8006ae0:	2101      	moveq	r1, #1
 8006ae2:	61a3      	str	r3, [r4, #24]
 8006ae4:	6121      	str	r1, [r4, #16]
 8006ae6:	b1c5      	cbz	r5, 8006b1a <__d2b+0x96>
 8006ae8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006aec:	4405      	add	r5, r0
 8006aee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006af2:	603d      	str	r5, [r7, #0]
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	4620      	mov	r0, r4
 8006af8:	b002      	add	sp, #8
 8006afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b02:	e7d6      	b.n	8006ab2 <__d2b+0x2e>
 8006b04:	6161      	str	r1, [r4, #20]
 8006b06:	e7e7      	b.n	8006ad8 <__d2b+0x54>
 8006b08:	a801      	add	r0, sp, #4
 8006b0a:	f7ff fce3 	bl	80064d4 <__lo0bits>
 8006b0e:	2101      	movs	r1, #1
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	6121      	str	r1, [r4, #16]
 8006b14:	6163      	str	r3, [r4, #20]
 8006b16:	3020      	adds	r0, #32
 8006b18:	e7e5      	b.n	8006ae6 <__d2b+0x62>
 8006b1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006b1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b22:	6038      	str	r0, [r7, #0]
 8006b24:	6918      	ldr	r0, [r3, #16]
 8006b26:	f7ff fcb5 	bl	8006494 <__hi0bits>
 8006b2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006b2e:	6031      	str	r1, [r6, #0]
 8006b30:	e7e1      	b.n	8006af6 <__d2b+0x72>
 8006b32:	bf00      	nop
 8006b34:	08008dd8 	.word	0x08008dd8
 8006b38:	08008e64 	.word	0x08008e64

08006b3c <__ratio>:
 8006b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4688      	mov	r8, r1
 8006b42:	4669      	mov	r1, sp
 8006b44:	4681      	mov	r9, r0
 8006b46:	f7ff ff49 	bl	80069dc <__b2d>
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	a901      	add	r1, sp, #4
 8006b54:	f7ff ff42 	bl	80069dc <__b2d>
 8006b58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b60:	468b      	mov	fp, r1
 8006b62:	eba3 0c02 	sub.w	ip, r3, r2
 8006b66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b6a:	1a9b      	subs	r3, r3, r2
 8006b6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bfd5      	itete	le
 8006b74:	460a      	movle	r2, r1
 8006b76:	462a      	movgt	r2, r5
 8006b78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b7c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006b80:	bfd8      	it	le
 8006b82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006b86:	465b      	mov	r3, fp
 8006b88:	4602      	mov	r2, r0
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7f9 fdcd 	bl	800072c <__aeabi_ddiv>
 8006b92:	b003      	add	sp, #12
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b98 <__copybits>:
 8006b98:	3901      	subs	r1, #1
 8006b9a:	b570      	push	{r4, r5, r6, lr}
 8006b9c:	1149      	asrs	r1, r1, #5
 8006b9e:	6914      	ldr	r4, [r2, #16]
 8006ba0:	3101      	adds	r1, #1
 8006ba2:	f102 0314 	add.w	r3, r2, #20
 8006ba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006bae:	1f05      	subs	r5, r0, #4
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d30c      	bcc.n	8006bce <__copybits+0x36>
 8006bb4:	1aa3      	subs	r3, r4, r2
 8006bb6:	3b11      	subs	r3, #17
 8006bb8:	f023 0303 	bic.w	r3, r3, #3
 8006bbc:	3211      	adds	r2, #17
 8006bbe:	42a2      	cmp	r2, r4
 8006bc0:	bf88      	it	hi
 8006bc2:	2300      	movhi	r3, #0
 8006bc4:	4418      	add	r0, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4288      	cmp	r0, r1
 8006bca:	d305      	bcc.n	8006bd8 <__copybits+0x40>
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
 8006bce:	f853 6b04 	ldr.w	r6, [r3], #4
 8006bd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8006bd6:	e7eb      	b.n	8006bb0 <__copybits+0x18>
 8006bd8:	f840 3b04 	str.w	r3, [r0], #4
 8006bdc:	e7f4      	b.n	8006bc8 <__copybits+0x30>

08006bde <__any_on>:
 8006bde:	f100 0214 	add.w	r2, r0, #20
 8006be2:	6900      	ldr	r0, [r0, #16]
 8006be4:	114b      	asrs	r3, r1, #5
 8006be6:	4298      	cmp	r0, r3
 8006be8:	b510      	push	{r4, lr}
 8006bea:	db11      	blt.n	8006c10 <__any_on+0x32>
 8006bec:	dd0a      	ble.n	8006c04 <__any_on+0x26>
 8006bee:	f011 011f 	ands.w	r1, r1, #31
 8006bf2:	d007      	beq.n	8006c04 <__any_on+0x26>
 8006bf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006bf8:	fa24 f001 	lsr.w	r0, r4, r1
 8006bfc:	fa00 f101 	lsl.w	r1, r0, r1
 8006c00:	428c      	cmp	r4, r1
 8006c02:	d10b      	bne.n	8006c1c <__any_on+0x3e>
 8006c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d803      	bhi.n	8006c14 <__any_on+0x36>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	bd10      	pop	{r4, pc}
 8006c10:	4603      	mov	r3, r0
 8006c12:	e7f7      	b.n	8006c04 <__any_on+0x26>
 8006c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	d0f5      	beq.n	8006c08 <__any_on+0x2a>
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	e7f6      	b.n	8006c0e <__any_on+0x30>

08006c20 <_calloc_r>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	fba1 5402 	umull	r5, r4, r1, r2
 8006c26:	b934      	cbnz	r4, 8006c36 <_calloc_r+0x16>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f000 f875 	bl	8006d18 <_malloc_r>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	b928      	cbnz	r0, 8006c3e <_calloc_r+0x1e>
 8006c32:	4630      	mov	r0, r6
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
 8006c36:	220c      	movs	r2, #12
 8006c38:	2600      	movs	r6, #0
 8006c3a:	6002      	str	r2, [r0, #0]
 8006c3c:	e7f9      	b.n	8006c32 <_calloc_r+0x12>
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4621      	mov	r1, r4
 8006c42:	f7fc fb4f 	bl	80032e4 <memset>
 8006c46:	e7f4      	b.n	8006c32 <_calloc_r+0x12>

08006c48 <_free_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d040      	beq.n	8006cd2 <_free_r+0x8a>
 8006c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c54:	1f0c      	subs	r4, r1, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfb8      	it	lt
 8006c5a:	18e4      	addlt	r4, r4, r3
 8006c5c:	f001 f880 	bl	8007d60 <__malloc_lock>
 8006c60:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <_free_r+0x8c>)
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	b933      	cbnz	r3, 8006c74 <_free_r+0x2c>
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	6014      	str	r4, [r2, #0]
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c70:	f001 b87c 	b.w	8007d6c <__malloc_unlock>
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	d908      	bls.n	8006c8a <_free_r+0x42>
 8006c78:	6820      	ldr	r0, [r4, #0]
 8006c7a:	1821      	adds	r1, r4, r0
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	bf01      	itttt	eq
 8006c80:	6819      	ldreq	r1, [r3, #0]
 8006c82:	685b      	ldreq	r3, [r3, #4]
 8006c84:	1809      	addeq	r1, r1, r0
 8006c86:	6021      	streq	r1, [r4, #0]
 8006c88:	e7ed      	b.n	8006c66 <_free_r+0x1e>
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	b10b      	cbz	r3, 8006c94 <_free_r+0x4c>
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d9fa      	bls.n	8006c8a <_free_r+0x42>
 8006c94:	6811      	ldr	r1, [r2, #0]
 8006c96:	1850      	adds	r0, r2, r1
 8006c98:	42a0      	cmp	r0, r4
 8006c9a:	d10b      	bne.n	8006cb4 <_free_r+0x6c>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	4401      	add	r1, r0
 8006ca0:	1850      	adds	r0, r2, r1
 8006ca2:	4283      	cmp	r3, r0
 8006ca4:	6011      	str	r1, [r2, #0]
 8006ca6:	d1e0      	bne.n	8006c6a <_free_r+0x22>
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4401      	add	r1, r0
 8006cae:	6011      	str	r1, [r2, #0]
 8006cb0:	6053      	str	r3, [r2, #4]
 8006cb2:	e7da      	b.n	8006c6a <_free_r+0x22>
 8006cb4:	d902      	bls.n	8006cbc <_free_r+0x74>
 8006cb6:	230c      	movs	r3, #12
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	e7d6      	b.n	8006c6a <_free_r+0x22>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	1821      	adds	r1, r4, r0
 8006cc0:	428b      	cmp	r3, r1
 8006cc2:	bf01      	itttt	eq
 8006cc4:	6819      	ldreq	r1, [r3, #0]
 8006cc6:	685b      	ldreq	r3, [r3, #4]
 8006cc8:	1809      	addeq	r1, r1, r0
 8006cca:	6021      	streq	r1, [r4, #0]
 8006ccc:	6063      	str	r3, [r4, #4]
 8006cce:	6054      	str	r4, [r2, #4]
 8006cd0:	e7cb      	b.n	8006c6a <_free_r+0x22>
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	200003b0 	.word	0x200003b0

08006cd8 <sbrk_aligned>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4e0e      	ldr	r6, [pc, #56]	; (8006d14 <sbrk_aligned+0x3c>)
 8006cdc:	460c      	mov	r4, r1
 8006cde:	6831      	ldr	r1, [r6, #0]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	b911      	cbnz	r1, 8006cea <sbrk_aligned+0x12>
 8006ce4:	f000 fd26 	bl	8007734 <_sbrk_r>
 8006ce8:	6030      	str	r0, [r6, #0]
 8006cea:	4621      	mov	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 fd21 	bl	8007734 <_sbrk_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d00a      	beq.n	8006d0c <sbrk_aligned+0x34>
 8006cf6:	1cc4      	adds	r4, r0, #3
 8006cf8:	f024 0403 	bic.w	r4, r4, #3
 8006cfc:	42a0      	cmp	r0, r4
 8006cfe:	d007      	beq.n	8006d10 <sbrk_aligned+0x38>
 8006d00:	1a21      	subs	r1, r4, r0
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fd16 	bl	8007734 <_sbrk_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d101      	bne.n	8006d10 <sbrk_aligned+0x38>
 8006d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d10:	4620      	mov	r0, r4
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	200003b4 	.word	0x200003b4

08006d18 <_malloc_r>:
 8006d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	1ccd      	adds	r5, r1, #3
 8006d1e:	f025 0503 	bic.w	r5, r5, #3
 8006d22:	3508      	adds	r5, #8
 8006d24:	2d0c      	cmp	r5, #12
 8006d26:	bf38      	it	cc
 8006d28:	250c      	movcc	r5, #12
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	db01      	blt.n	8006d34 <_malloc_r+0x1c>
 8006d30:	42a9      	cmp	r1, r5
 8006d32:	d905      	bls.n	8006d40 <_malloc_r+0x28>
 8006d34:	230c      	movs	r3, #12
 8006d36:	2600      	movs	r6, #0
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	4e2e      	ldr	r6, [pc, #184]	; (8006dfc <_malloc_r+0xe4>)
 8006d42:	f001 f80d 	bl	8007d60 <__malloc_lock>
 8006d46:	6833      	ldr	r3, [r6, #0]
 8006d48:	461c      	mov	r4, r3
 8006d4a:	bb34      	cbnz	r4, 8006d9a <_malloc_r+0x82>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f7ff ffc2 	bl	8006cd8 <sbrk_aligned>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	4604      	mov	r4, r0
 8006d58:	d14d      	bne.n	8006df6 <_malloc_r+0xde>
 8006d5a:	6834      	ldr	r4, [r6, #0]
 8006d5c:	4626      	mov	r6, r4
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	d140      	bne.n	8006de4 <_malloc_r+0xcc>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	4631      	mov	r1, r6
 8006d66:	4638      	mov	r0, r7
 8006d68:	eb04 0803 	add.w	r8, r4, r3
 8006d6c:	f000 fce2 	bl	8007734 <_sbrk_r>
 8006d70:	4580      	cmp	r8, r0
 8006d72:	d13a      	bne.n	8006dea <_malloc_r+0xd2>
 8006d74:	6821      	ldr	r1, [r4, #0]
 8006d76:	3503      	adds	r5, #3
 8006d78:	1a6d      	subs	r5, r5, r1
 8006d7a:	f025 0503 	bic.w	r5, r5, #3
 8006d7e:	3508      	adds	r5, #8
 8006d80:	2d0c      	cmp	r5, #12
 8006d82:	bf38      	it	cc
 8006d84:	250c      	movcc	r5, #12
 8006d86:	4638      	mov	r0, r7
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7ff ffa5 	bl	8006cd8 <sbrk_aligned>
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d02b      	beq.n	8006dea <_malloc_r+0xd2>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	442b      	add	r3, r5
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	e00e      	b.n	8006db8 <_malloc_r+0xa0>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	1b52      	subs	r2, r2, r5
 8006d9e:	d41e      	bmi.n	8006dde <_malloc_r+0xc6>
 8006da0:	2a0b      	cmp	r2, #11
 8006da2:	d916      	bls.n	8006dd2 <_malloc_r+0xba>
 8006da4:	1961      	adds	r1, r4, r5
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	6025      	str	r5, [r4, #0]
 8006daa:	bf18      	it	ne
 8006dac:	6059      	strne	r1, [r3, #4]
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	bf08      	it	eq
 8006db2:	6031      	streq	r1, [r6, #0]
 8006db4:	5162      	str	r2, [r4, r5]
 8006db6:	604b      	str	r3, [r1, #4]
 8006db8:	4638      	mov	r0, r7
 8006dba:	f104 060b 	add.w	r6, r4, #11
 8006dbe:	f000 ffd5 	bl	8007d6c <__malloc_unlock>
 8006dc2:	f026 0607 	bic.w	r6, r6, #7
 8006dc6:	1d23      	adds	r3, r4, #4
 8006dc8:	1af2      	subs	r2, r6, r3
 8006dca:	d0b6      	beq.n	8006d3a <_malloc_r+0x22>
 8006dcc:	1b9b      	subs	r3, r3, r6
 8006dce:	50a3      	str	r3, [r4, r2]
 8006dd0:	e7b3      	b.n	8006d3a <_malloc_r+0x22>
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	bf0c      	ite	eq
 8006dd8:	6032      	streq	r2, [r6, #0]
 8006dda:	605a      	strne	r2, [r3, #4]
 8006ddc:	e7ec      	b.n	8006db8 <_malloc_r+0xa0>
 8006dde:	4623      	mov	r3, r4
 8006de0:	6864      	ldr	r4, [r4, #4]
 8006de2:	e7b2      	b.n	8006d4a <_malloc_r+0x32>
 8006de4:	4634      	mov	r4, r6
 8006de6:	6876      	ldr	r6, [r6, #4]
 8006de8:	e7b9      	b.n	8006d5e <_malloc_r+0x46>
 8006dea:	230c      	movs	r3, #12
 8006dec:	4638      	mov	r0, r7
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	f000 ffbc 	bl	8007d6c <__malloc_unlock>
 8006df4:	e7a1      	b.n	8006d3a <_malloc_r+0x22>
 8006df6:	6025      	str	r5, [r4, #0]
 8006df8:	e7de      	b.n	8006db8 <_malloc_r+0xa0>
 8006dfa:	bf00      	nop
 8006dfc:	200003b0 	.word	0x200003b0

08006e00 <__ssputs_r>:
 8006e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	688e      	ldr	r6, [r1, #8]
 8006e06:	4682      	mov	sl, r0
 8006e08:	429e      	cmp	r6, r3
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	4690      	mov	r8, r2
 8006e0e:	461f      	mov	r7, r3
 8006e10:	d838      	bhi.n	8006e84 <__ssputs_r+0x84>
 8006e12:	898a      	ldrh	r2, [r1, #12]
 8006e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e18:	d032      	beq.n	8006e80 <__ssputs_r+0x80>
 8006e1a:	6825      	ldr	r5, [r4, #0]
 8006e1c:	6909      	ldr	r1, [r1, #16]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	eba5 0901 	sub.w	r9, r5, r1
 8006e24:	6965      	ldr	r5, [r4, #20]
 8006e26:	444b      	add	r3, r9
 8006e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e30:	106d      	asrs	r5, r5, #1
 8006e32:	429d      	cmp	r5, r3
 8006e34:	bf38      	it	cc
 8006e36:	461d      	movcc	r5, r3
 8006e38:	0553      	lsls	r3, r2, #21
 8006e3a:	d531      	bpl.n	8006ea0 <__ssputs_r+0xa0>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7ff ff6b 	bl	8006d18 <_malloc_r>
 8006e42:	4606      	mov	r6, r0
 8006e44:	b950      	cbnz	r0, 8006e5c <__ssputs_r+0x5c>
 8006e46:	230c      	movs	r3, #12
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	f8ca 3000 	str.w	r3, [sl]
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	464a      	mov	r2, r9
 8006e5e:	6921      	ldr	r1, [r4, #16]
 8006e60:	f7ff fa18 	bl	8006294 <memcpy>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	6126      	str	r6, [r4, #16]
 8006e72:	444e      	add	r6, r9
 8006e74:	6026      	str	r6, [r4, #0]
 8006e76:	463e      	mov	r6, r7
 8006e78:	6165      	str	r5, [r4, #20]
 8006e7a:	eba5 0509 	sub.w	r5, r5, r9
 8006e7e:	60a5      	str	r5, [r4, #8]
 8006e80:	42be      	cmp	r6, r7
 8006e82:	d900      	bls.n	8006e86 <__ssputs_r+0x86>
 8006e84:	463e      	mov	r6, r7
 8006e86:	4632      	mov	r2, r6
 8006e88:	4641      	mov	r1, r8
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f000 ff4e 	bl	8007d2c <memmove>
 8006e90:	68a3      	ldr	r3, [r4, #8]
 8006e92:	2000      	movs	r0, #0
 8006e94:	1b9b      	subs	r3, r3, r6
 8006e96:	60a3      	str	r3, [r4, #8]
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	4433      	add	r3, r6
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	e7db      	b.n	8006e58 <__ssputs_r+0x58>
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	f000 ff69 	bl	8007d78 <_realloc_r>
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1e1      	bne.n	8006e70 <__ssputs_r+0x70>
 8006eac:	4650      	mov	r0, sl
 8006eae:	6921      	ldr	r1, [r4, #16]
 8006eb0:	f7ff feca 	bl	8006c48 <_free_r>
 8006eb4:	e7c7      	b.n	8006e46 <__ssputs_r+0x46>
	...

08006eb8 <_svfiprintf_r>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	4698      	mov	r8, r3
 8006ebe:	898b      	ldrh	r3, [r1, #12]
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	b09d      	sub	sp, #116	; 0x74
 8006eca:	d50e      	bpl.n	8006eea <_svfiprintf_r+0x32>
 8006ecc:	690b      	ldr	r3, [r1, #16]
 8006ece:	b963      	cbnz	r3, 8006eea <_svfiprintf_r+0x32>
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	f7ff ff21 	bl	8006d18 <_malloc_r>
 8006ed6:	6028      	str	r0, [r5, #0]
 8006ed8:	6128      	str	r0, [r5, #16]
 8006eda:	b920      	cbnz	r0, 8006ee6 <_svfiprintf_r+0x2e>
 8006edc:	230c      	movs	r3, #12
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e0d1      	b.n	800708a <_svfiprintf_r+0x1d2>
 8006ee6:	2340      	movs	r3, #64	; 0x40
 8006ee8:	616b      	str	r3, [r5, #20]
 8006eea:	2300      	movs	r3, #0
 8006eec:	9309      	str	r3, [sp, #36]	; 0x24
 8006eee:	2320      	movs	r3, #32
 8006ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ef4:	2330      	movs	r3, #48	; 0x30
 8006ef6:	f04f 0901 	mov.w	r9, #1
 8006efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006efe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070a4 <_svfiprintf_r+0x1ec>
 8006f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f06:	4623      	mov	r3, r4
 8006f08:	469a      	mov	sl, r3
 8006f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f0e:	b10a      	cbz	r2, 8006f14 <_svfiprintf_r+0x5c>
 8006f10:	2a25      	cmp	r2, #37	; 0x25
 8006f12:	d1f9      	bne.n	8006f08 <_svfiprintf_r+0x50>
 8006f14:	ebba 0b04 	subs.w	fp, sl, r4
 8006f18:	d00b      	beq.n	8006f32 <_svfiprintf_r+0x7a>
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4638      	mov	r0, r7
 8006f22:	f7ff ff6d 	bl	8006e00 <__ssputs_r>
 8006f26:	3001      	adds	r0, #1
 8006f28:	f000 80aa 	beq.w	8007080 <_svfiprintf_r+0x1c8>
 8006f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f2e:	445a      	add	r2, fp
 8006f30:	9209      	str	r2, [sp, #36]	; 0x24
 8006f32:	f89a 3000 	ldrb.w	r3, [sl]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 80a2 	beq.w	8007080 <_svfiprintf_r+0x1c8>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f46:	f10a 0a01 	add.w	sl, sl, #1
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	9307      	str	r3, [sp, #28]
 8006f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f52:	931a      	str	r3, [sp, #104]	; 0x68
 8006f54:	4654      	mov	r4, sl
 8006f56:	2205      	movs	r2, #5
 8006f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5c:	4851      	ldr	r0, [pc, #324]	; (80070a4 <_svfiprintf_r+0x1ec>)
 8006f5e:	f7ff f98b 	bl	8006278 <memchr>
 8006f62:	9a04      	ldr	r2, [sp, #16]
 8006f64:	b9d8      	cbnz	r0, 8006f9e <_svfiprintf_r+0xe6>
 8006f66:	06d0      	lsls	r0, r2, #27
 8006f68:	bf44      	itt	mi
 8006f6a:	2320      	movmi	r3, #32
 8006f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f70:	0711      	lsls	r1, r2, #28
 8006f72:	bf44      	itt	mi
 8006f74:	232b      	movmi	r3, #43	; 0x2b
 8006f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f80:	d015      	beq.n	8006fae <_svfiprintf_r+0xf6>
 8006f82:	4654      	mov	r4, sl
 8006f84:	2000      	movs	r0, #0
 8006f86:	f04f 0c0a 	mov.w	ip, #10
 8006f8a:	9a07      	ldr	r2, [sp, #28]
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f92:	3b30      	subs	r3, #48	; 0x30
 8006f94:	2b09      	cmp	r3, #9
 8006f96:	d94e      	bls.n	8007036 <_svfiprintf_r+0x17e>
 8006f98:	b1b0      	cbz	r0, 8006fc8 <_svfiprintf_r+0x110>
 8006f9a:	9207      	str	r2, [sp, #28]
 8006f9c:	e014      	b.n	8006fc8 <_svfiprintf_r+0x110>
 8006f9e:	eba0 0308 	sub.w	r3, r0, r8
 8006fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	46a2      	mov	sl, r4
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	e7d2      	b.n	8006f54 <_svfiprintf_r+0x9c>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	9103      	str	r1, [sp, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bfbb      	ittet	lt
 8006fba:	425b      	neglt	r3, r3
 8006fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc0:	9307      	strge	r3, [sp, #28]
 8006fc2:	9307      	strlt	r3, [sp, #28]
 8006fc4:	bfb8      	it	lt
 8006fc6:	9204      	strlt	r2, [sp, #16]
 8006fc8:	7823      	ldrb	r3, [r4, #0]
 8006fca:	2b2e      	cmp	r3, #46	; 0x2e
 8006fcc:	d10c      	bne.n	8006fe8 <_svfiprintf_r+0x130>
 8006fce:	7863      	ldrb	r3, [r4, #1]
 8006fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd2:	d135      	bne.n	8007040 <_svfiprintf_r+0x188>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	3402      	adds	r4, #2
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	9203      	str	r2, [sp, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bfb8      	it	lt
 8006fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe6:	9305      	str	r3, [sp, #20]
 8006fe8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80070a8 <_svfiprintf_r+0x1f0>
 8006fec:	2203      	movs	r2, #3
 8006fee:	4650      	mov	r0, sl
 8006ff0:	7821      	ldrb	r1, [r4, #0]
 8006ff2:	f7ff f941 	bl	8006278 <memchr>
 8006ff6:	b140      	cbz	r0, 800700a <_svfiprintf_r+0x152>
 8006ff8:	2340      	movs	r3, #64	; 0x40
 8006ffa:	eba0 000a 	sub.w	r0, r0, sl
 8006ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	3401      	adds	r4, #1
 8007006:	4303      	orrs	r3, r0
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700e:	2206      	movs	r2, #6
 8007010:	4826      	ldr	r0, [pc, #152]	; (80070ac <_svfiprintf_r+0x1f4>)
 8007012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007016:	f7ff f92f 	bl	8006278 <memchr>
 800701a:	2800      	cmp	r0, #0
 800701c:	d038      	beq.n	8007090 <_svfiprintf_r+0x1d8>
 800701e:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <_svfiprintf_r+0x1f8>)
 8007020:	bb1b      	cbnz	r3, 800706a <_svfiprintf_r+0x1b2>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	3307      	adds	r3, #7
 8007026:	f023 0307 	bic.w	r3, r3, #7
 800702a:	3308      	adds	r3, #8
 800702c:	9303      	str	r3, [sp, #12]
 800702e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007030:	4433      	add	r3, r6
 8007032:	9309      	str	r3, [sp, #36]	; 0x24
 8007034:	e767      	b.n	8006f06 <_svfiprintf_r+0x4e>
 8007036:	460c      	mov	r4, r1
 8007038:	2001      	movs	r0, #1
 800703a:	fb0c 3202 	mla	r2, ip, r2, r3
 800703e:	e7a5      	b.n	8006f8c <_svfiprintf_r+0xd4>
 8007040:	2300      	movs	r3, #0
 8007042:	f04f 0c0a 	mov.w	ip, #10
 8007046:	4619      	mov	r1, r3
 8007048:	3401      	adds	r4, #1
 800704a:	9305      	str	r3, [sp, #20]
 800704c:	4620      	mov	r0, r4
 800704e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007052:	3a30      	subs	r2, #48	; 0x30
 8007054:	2a09      	cmp	r2, #9
 8007056:	d903      	bls.n	8007060 <_svfiprintf_r+0x1a8>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0c5      	beq.n	8006fe8 <_svfiprintf_r+0x130>
 800705c:	9105      	str	r1, [sp, #20]
 800705e:	e7c3      	b.n	8006fe8 <_svfiprintf_r+0x130>
 8007060:	4604      	mov	r4, r0
 8007062:	2301      	movs	r3, #1
 8007064:	fb0c 2101 	mla	r1, ip, r1, r2
 8007068:	e7f0      	b.n	800704c <_svfiprintf_r+0x194>
 800706a:	ab03      	add	r3, sp, #12
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	462a      	mov	r2, r5
 8007070:	4638      	mov	r0, r7
 8007072:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <_svfiprintf_r+0x1fc>)
 8007074:	a904      	add	r1, sp, #16
 8007076:	f7fc f9db 	bl	8003430 <_printf_float>
 800707a:	1c42      	adds	r2, r0, #1
 800707c:	4606      	mov	r6, r0
 800707e:	d1d6      	bne.n	800702e <_svfiprintf_r+0x176>
 8007080:	89ab      	ldrh	r3, [r5, #12]
 8007082:	065b      	lsls	r3, r3, #25
 8007084:	f53f af2c 	bmi.w	8006ee0 <_svfiprintf_r+0x28>
 8007088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800708a:	b01d      	add	sp, #116	; 0x74
 800708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007090:	ab03      	add	r3, sp, #12
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	462a      	mov	r2, r5
 8007096:	4638      	mov	r0, r7
 8007098:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <_svfiprintf_r+0x1fc>)
 800709a:	a904      	add	r1, sp, #16
 800709c:	f7fc fc64 	bl	8003968 <_printf_i>
 80070a0:	e7eb      	b.n	800707a <_svfiprintf_r+0x1c2>
 80070a2:	bf00      	nop
 80070a4:	08008fbc 	.word	0x08008fbc
 80070a8:	08008fc2 	.word	0x08008fc2
 80070ac:	08008fc6 	.word	0x08008fc6
 80070b0:	08003431 	.word	0x08003431
 80070b4:	08006e01 	.word	0x08006e01

080070b8 <_sungetc_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	1c4b      	adds	r3, r1, #1
 80070bc:	4614      	mov	r4, r2
 80070be:	d103      	bne.n	80070c8 <_sungetc_r+0x10>
 80070c0:	f04f 35ff 	mov.w	r5, #4294967295
 80070c4:	4628      	mov	r0, r5
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	8993      	ldrh	r3, [r2, #12]
 80070ca:	b2cd      	uxtb	r5, r1
 80070cc:	f023 0320 	bic.w	r3, r3, #32
 80070d0:	8193      	strh	r3, [r2, #12]
 80070d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070d4:	6852      	ldr	r2, [r2, #4]
 80070d6:	b18b      	cbz	r3, 80070fc <_sungetc_r+0x44>
 80070d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070da:	4293      	cmp	r3, r2
 80070dc:	dd08      	ble.n	80070f0 <_sungetc_r+0x38>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80070e8:	6863      	ldr	r3, [r4, #4]
 80070ea:	3301      	adds	r3, #1
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	e7e9      	b.n	80070c4 <_sungetc_r+0xc>
 80070f0:	4621      	mov	r1, r4
 80070f2:	f000 fbef 	bl	80078d4 <__submore>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d0f1      	beq.n	80070de <_sungetc_r+0x26>
 80070fa:	e7e1      	b.n	80070c0 <_sungetc_r+0x8>
 80070fc:	6921      	ldr	r1, [r4, #16]
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	b151      	cbz	r1, 8007118 <_sungetc_r+0x60>
 8007102:	4299      	cmp	r1, r3
 8007104:	d208      	bcs.n	8007118 <_sungetc_r+0x60>
 8007106:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800710a:	42a9      	cmp	r1, r5
 800710c:	d104      	bne.n	8007118 <_sungetc_r+0x60>
 800710e:	3b01      	subs	r3, #1
 8007110:	3201      	adds	r2, #1
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	6062      	str	r2, [r4, #4]
 8007116:	e7d5      	b.n	80070c4 <_sungetc_r+0xc>
 8007118:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800711c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007120:	6363      	str	r3, [r4, #52]	; 0x34
 8007122:	2303      	movs	r3, #3
 8007124:	63a3      	str	r3, [r4, #56]	; 0x38
 8007126:	4623      	mov	r3, r4
 8007128:	f803 5f46 	strb.w	r5, [r3, #70]!
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	2301      	movs	r3, #1
 8007130:	e7dc      	b.n	80070ec <_sungetc_r+0x34>

08007132 <__ssrefill_r>:
 8007132:	b510      	push	{r4, lr}
 8007134:	460c      	mov	r4, r1
 8007136:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007138:	b169      	cbz	r1, 8007156 <__ssrefill_r+0x24>
 800713a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800713e:	4299      	cmp	r1, r3
 8007140:	d001      	beq.n	8007146 <__ssrefill_r+0x14>
 8007142:	f7ff fd81 	bl	8006c48 <_free_r>
 8007146:	2000      	movs	r0, #0
 8007148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800714a:	6360      	str	r0, [r4, #52]	; 0x34
 800714c:	6063      	str	r3, [r4, #4]
 800714e:	b113      	cbz	r3, 8007156 <__ssrefill_r+0x24>
 8007150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007152:	6023      	str	r3, [r4, #0]
 8007154:	bd10      	pop	{r4, pc}
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	2300      	movs	r3, #0
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f043 0320 	orr.w	r3, r3, #32
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	e7f3      	b.n	8007154 <__ssrefill_r+0x22>

0800716c <__ssvfiscanf_r>:
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	460c      	mov	r4, r1
 8007172:	2100      	movs	r1, #0
 8007174:	4606      	mov	r6, r0
 8007176:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800717a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800717e:	49a7      	ldr	r1, [pc, #668]	; (800741c <__ssvfiscanf_r+0x2b0>)
 8007180:	f10d 0804 	add.w	r8, sp, #4
 8007184:	91a0      	str	r1, [sp, #640]	; 0x280
 8007186:	49a6      	ldr	r1, [pc, #664]	; (8007420 <__ssvfiscanf_r+0x2b4>)
 8007188:	4fa6      	ldr	r7, [pc, #664]	; (8007424 <__ssvfiscanf_r+0x2b8>)
 800718a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8007428 <__ssvfiscanf_r+0x2bc>
 800718e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007192:	91a1      	str	r1, [sp, #644]	; 0x284
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	7813      	ldrb	r3, [r2, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 815c 	beq.w	8007456 <__ssvfiscanf_r+0x2ea>
 800719e:	5dd9      	ldrb	r1, [r3, r7]
 80071a0:	1c55      	adds	r5, r2, #1
 80071a2:	f011 0108 	ands.w	r1, r1, #8
 80071a6:	d019      	beq.n	80071dc <__ssvfiscanf_r+0x70>
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dd0f      	ble.n	80071ce <__ssvfiscanf_r+0x62>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	5cba      	ldrb	r2, [r7, r2]
 80071b4:	0712      	lsls	r2, r2, #28
 80071b6:	d401      	bmi.n	80071bc <__ssvfiscanf_r+0x50>
 80071b8:	462a      	mov	r2, r5
 80071ba:	e7ec      	b.n	8007196 <__ssvfiscanf_r+0x2a>
 80071bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80071be:	3301      	adds	r3, #1
 80071c0:	3201      	adds	r2, #1
 80071c2:	9245      	str	r2, [sp, #276]	; 0x114
 80071c4:	6862      	ldr	r2, [r4, #4]
 80071c6:	6023      	str	r3, [r4, #0]
 80071c8:	3a01      	subs	r2, #1
 80071ca:	6062      	str	r2, [r4, #4]
 80071cc:	e7ec      	b.n	80071a8 <__ssvfiscanf_r+0x3c>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4630      	mov	r0, r6
 80071d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80071d4:	4798      	blx	r3
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0e9      	beq.n	80071ae <__ssvfiscanf_r+0x42>
 80071da:	e7ed      	b.n	80071b8 <__ssvfiscanf_r+0x4c>
 80071dc:	2b25      	cmp	r3, #37	; 0x25
 80071de:	d012      	beq.n	8007206 <__ssvfiscanf_r+0x9a>
 80071e0:	469a      	mov	sl, r3
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f340 8094 	ble.w	8007312 <__ssvfiscanf_r+0x1a6>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	7813      	ldrb	r3, [r2, #0]
 80071ee:	4553      	cmp	r3, sl
 80071f0:	f040 8131 	bne.w	8007456 <__ssvfiscanf_r+0x2ea>
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	3201      	adds	r2, #1
 80071f8:	3b01      	subs	r3, #1
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	3301      	adds	r3, #1
 8007202:	9345      	str	r3, [sp, #276]	; 0x114
 8007204:	e7d8      	b.n	80071b8 <__ssvfiscanf_r+0x4c>
 8007206:	9141      	str	r1, [sp, #260]	; 0x104
 8007208:	9143      	str	r1, [sp, #268]	; 0x10c
 800720a:	7853      	ldrb	r3, [r2, #1]
 800720c:	2b2a      	cmp	r3, #42	; 0x2a
 800720e:	bf04      	itt	eq
 8007210:	2310      	moveq	r3, #16
 8007212:	1c95      	addeq	r5, r2, #2
 8007214:	f04f 020a 	mov.w	r2, #10
 8007218:	bf08      	it	eq
 800721a:	9341      	streq	r3, [sp, #260]	; 0x104
 800721c:	46aa      	mov	sl, r5
 800721e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007222:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007226:	2b09      	cmp	r3, #9
 8007228:	d91d      	bls.n	8007266 <__ssvfiscanf_r+0xfa>
 800722a:	2203      	movs	r2, #3
 800722c:	487e      	ldr	r0, [pc, #504]	; (8007428 <__ssvfiscanf_r+0x2bc>)
 800722e:	f7ff f823 	bl	8006278 <memchr>
 8007232:	b140      	cbz	r0, 8007246 <__ssvfiscanf_r+0xda>
 8007234:	2301      	movs	r3, #1
 8007236:	4655      	mov	r5, sl
 8007238:	eba0 0009 	sub.w	r0, r0, r9
 800723c:	fa03 f000 	lsl.w	r0, r3, r0
 8007240:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007242:	4318      	orrs	r0, r3
 8007244:	9041      	str	r0, [sp, #260]	; 0x104
 8007246:	f815 3b01 	ldrb.w	r3, [r5], #1
 800724a:	2b78      	cmp	r3, #120	; 0x78
 800724c:	d806      	bhi.n	800725c <__ssvfiscanf_r+0xf0>
 800724e:	2b57      	cmp	r3, #87	; 0x57
 8007250:	d810      	bhi.n	8007274 <__ssvfiscanf_r+0x108>
 8007252:	2b25      	cmp	r3, #37	; 0x25
 8007254:	d0c4      	beq.n	80071e0 <__ssvfiscanf_r+0x74>
 8007256:	d857      	bhi.n	8007308 <__ssvfiscanf_r+0x19c>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d065      	beq.n	8007328 <__ssvfiscanf_r+0x1bc>
 800725c:	2303      	movs	r3, #3
 800725e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007260:	230a      	movs	r3, #10
 8007262:	9342      	str	r3, [sp, #264]	; 0x108
 8007264:	e072      	b.n	800734c <__ssvfiscanf_r+0x1e0>
 8007266:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007268:	4655      	mov	r5, sl
 800726a:	fb02 1103 	mla	r1, r2, r3, r1
 800726e:	3930      	subs	r1, #48	; 0x30
 8007270:	9143      	str	r1, [sp, #268]	; 0x10c
 8007272:	e7d3      	b.n	800721c <__ssvfiscanf_r+0xb0>
 8007274:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007278:	2a20      	cmp	r2, #32
 800727a:	d8ef      	bhi.n	800725c <__ssvfiscanf_r+0xf0>
 800727c:	a101      	add	r1, pc, #4	; (adr r1, 8007284 <__ssvfiscanf_r+0x118>)
 800727e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007282:	bf00      	nop
 8007284:	08007337 	.word	0x08007337
 8007288:	0800725d 	.word	0x0800725d
 800728c:	0800725d 	.word	0x0800725d
 8007290:	08007395 	.word	0x08007395
 8007294:	0800725d 	.word	0x0800725d
 8007298:	0800725d 	.word	0x0800725d
 800729c:	0800725d 	.word	0x0800725d
 80072a0:	0800725d 	.word	0x0800725d
 80072a4:	0800725d 	.word	0x0800725d
 80072a8:	0800725d 	.word	0x0800725d
 80072ac:	0800725d 	.word	0x0800725d
 80072b0:	080073ab 	.word	0x080073ab
 80072b4:	08007381 	.word	0x08007381
 80072b8:	0800730f 	.word	0x0800730f
 80072bc:	0800730f 	.word	0x0800730f
 80072c0:	0800730f 	.word	0x0800730f
 80072c4:	0800725d 	.word	0x0800725d
 80072c8:	08007385 	.word	0x08007385
 80072cc:	0800725d 	.word	0x0800725d
 80072d0:	0800725d 	.word	0x0800725d
 80072d4:	0800725d 	.word	0x0800725d
 80072d8:	0800725d 	.word	0x0800725d
 80072dc:	080073bb 	.word	0x080073bb
 80072e0:	0800738d 	.word	0x0800738d
 80072e4:	0800732f 	.word	0x0800732f
 80072e8:	0800725d 	.word	0x0800725d
 80072ec:	0800725d 	.word	0x0800725d
 80072f0:	080073b7 	.word	0x080073b7
 80072f4:	0800725d 	.word	0x0800725d
 80072f8:	08007381 	.word	0x08007381
 80072fc:	0800725d 	.word	0x0800725d
 8007300:	0800725d 	.word	0x0800725d
 8007304:	08007337 	.word	0x08007337
 8007308:	3b45      	subs	r3, #69	; 0x45
 800730a:	2b02      	cmp	r3, #2
 800730c:	d8a6      	bhi.n	800725c <__ssvfiscanf_r+0xf0>
 800730e:	2305      	movs	r3, #5
 8007310:	e01b      	b.n	800734a <__ssvfiscanf_r+0x1de>
 8007312:	4621      	mov	r1, r4
 8007314:	4630      	mov	r0, r6
 8007316:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007318:	4798      	blx	r3
 800731a:	2800      	cmp	r0, #0
 800731c:	f43f af65 	beq.w	80071ea <__ssvfiscanf_r+0x7e>
 8007320:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007322:	2800      	cmp	r0, #0
 8007324:	f040 808d 	bne.w	8007442 <__ssvfiscanf_r+0x2d6>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	e08f      	b.n	800744e <__ssvfiscanf_r+0x2e2>
 800732e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007330:	f042 0220 	orr.w	r2, r2, #32
 8007334:	9241      	str	r2, [sp, #260]	; 0x104
 8007336:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800733c:	9241      	str	r2, [sp, #260]	; 0x104
 800733e:	2210      	movs	r2, #16
 8007340:	2b6f      	cmp	r3, #111	; 0x6f
 8007342:	bf34      	ite	cc
 8007344:	2303      	movcc	r3, #3
 8007346:	2304      	movcs	r3, #4
 8007348:	9242      	str	r2, [sp, #264]	; 0x108
 800734a:	9347      	str	r3, [sp, #284]	; 0x11c
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	dd42      	ble.n	80073d8 <__ssvfiscanf_r+0x26c>
 8007352:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007354:	0659      	lsls	r1, r3, #25
 8007356:	d404      	bmi.n	8007362 <__ssvfiscanf_r+0x1f6>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	5cba      	ldrb	r2, [r7, r2]
 800735e:	0712      	lsls	r2, r2, #28
 8007360:	d441      	bmi.n	80073e6 <__ssvfiscanf_r+0x27a>
 8007362:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007364:	2b02      	cmp	r3, #2
 8007366:	dc50      	bgt.n	800740a <__ssvfiscanf_r+0x29e>
 8007368:	466b      	mov	r3, sp
 800736a:	4622      	mov	r2, r4
 800736c:	4630      	mov	r0, r6
 800736e:	a941      	add	r1, sp, #260	; 0x104
 8007370:	f000 f876 	bl	8007460 <_scanf_chars>
 8007374:	2801      	cmp	r0, #1
 8007376:	d06e      	beq.n	8007456 <__ssvfiscanf_r+0x2ea>
 8007378:	2802      	cmp	r0, #2
 800737a:	f47f af1d 	bne.w	80071b8 <__ssvfiscanf_r+0x4c>
 800737e:	e7cf      	b.n	8007320 <__ssvfiscanf_r+0x1b4>
 8007380:	220a      	movs	r2, #10
 8007382:	e7dd      	b.n	8007340 <__ssvfiscanf_r+0x1d4>
 8007384:	2300      	movs	r3, #0
 8007386:	9342      	str	r3, [sp, #264]	; 0x108
 8007388:	2303      	movs	r3, #3
 800738a:	e7de      	b.n	800734a <__ssvfiscanf_r+0x1de>
 800738c:	2308      	movs	r3, #8
 800738e:	9342      	str	r3, [sp, #264]	; 0x108
 8007390:	2304      	movs	r3, #4
 8007392:	e7da      	b.n	800734a <__ssvfiscanf_r+0x1de>
 8007394:	4629      	mov	r1, r5
 8007396:	4640      	mov	r0, r8
 8007398:	f000 f9dc 	bl	8007754 <__sccl>
 800739c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800739e:	4605      	mov	r5, r0
 80073a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a4:	9341      	str	r3, [sp, #260]	; 0x104
 80073a6:	2301      	movs	r3, #1
 80073a8:	e7cf      	b.n	800734a <__ssvfiscanf_r+0x1de>
 80073aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b0:	9341      	str	r3, [sp, #260]	; 0x104
 80073b2:	2300      	movs	r3, #0
 80073b4:	e7c9      	b.n	800734a <__ssvfiscanf_r+0x1de>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e7c7      	b.n	800734a <__ssvfiscanf_r+0x1de>
 80073ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80073bc:	06c3      	lsls	r3, r0, #27
 80073be:	f53f aefb 	bmi.w	80071b8 <__ssvfiscanf_r+0x4c>
 80073c2:	9b00      	ldr	r3, [sp, #0]
 80073c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073c6:	1d19      	adds	r1, r3, #4
 80073c8:	9100      	str	r1, [sp, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f010 0f01 	tst.w	r0, #1
 80073d0:	bf14      	ite	ne
 80073d2:	801a      	strhne	r2, [r3, #0]
 80073d4:	601a      	streq	r2, [r3, #0]
 80073d6:	e6ef      	b.n	80071b8 <__ssvfiscanf_r+0x4c>
 80073d8:	4621      	mov	r1, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073de:	4798      	blx	r3
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d0b6      	beq.n	8007352 <__ssvfiscanf_r+0x1e6>
 80073e4:	e79c      	b.n	8007320 <__ssvfiscanf_r+0x1b4>
 80073e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073e8:	3201      	adds	r2, #1
 80073ea:	9245      	str	r2, [sp, #276]	; 0x114
 80073ec:	6862      	ldr	r2, [r4, #4]
 80073ee:	3a01      	subs	r2, #1
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	6062      	str	r2, [r4, #4]
 80073f4:	dd02      	ble.n	80073fc <__ssvfiscanf_r+0x290>
 80073f6:	3301      	adds	r3, #1
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	e7ad      	b.n	8007358 <__ssvfiscanf_r+0x1ec>
 80073fc:	4621      	mov	r1, r4
 80073fe:	4630      	mov	r0, r6
 8007400:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007402:	4798      	blx	r3
 8007404:	2800      	cmp	r0, #0
 8007406:	d0a7      	beq.n	8007358 <__ssvfiscanf_r+0x1ec>
 8007408:	e78a      	b.n	8007320 <__ssvfiscanf_r+0x1b4>
 800740a:	2b04      	cmp	r3, #4
 800740c:	dc0e      	bgt.n	800742c <__ssvfiscanf_r+0x2c0>
 800740e:	466b      	mov	r3, sp
 8007410:	4622      	mov	r2, r4
 8007412:	4630      	mov	r0, r6
 8007414:	a941      	add	r1, sp, #260	; 0x104
 8007416:	f000 f87d 	bl	8007514 <_scanf_i>
 800741a:	e7ab      	b.n	8007374 <__ssvfiscanf_r+0x208>
 800741c:	080070b9 	.word	0x080070b9
 8007420:	08007133 	.word	0x08007133
 8007424:	08008c59 	.word	0x08008c59
 8007428:	08008fc2 	.word	0x08008fc2
 800742c:	4b0b      	ldr	r3, [pc, #44]	; (800745c <__ssvfiscanf_r+0x2f0>)
 800742e:	2b00      	cmp	r3, #0
 8007430:	f43f aec2 	beq.w	80071b8 <__ssvfiscanf_r+0x4c>
 8007434:	466b      	mov	r3, sp
 8007436:	4622      	mov	r2, r4
 8007438:	4630      	mov	r0, r6
 800743a:	a941      	add	r1, sp, #260	; 0x104
 800743c:	f7fc fbba 	bl	8003bb4 <_scanf_float>
 8007440:	e798      	b.n	8007374 <__ssvfiscanf_r+0x208>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007448:	bf18      	it	ne
 800744a:	f04f 30ff 	movne.w	r0, #4294967295
 800744e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007458:	e7f9      	b.n	800744e <__ssvfiscanf_r+0x2e2>
 800745a:	bf00      	nop
 800745c:	08003bb5 	.word	0x08003bb5

08007460 <_scanf_chars>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	4615      	mov	r5, r2
 8007466:	688a      	ldr	r2, [r1, #8]
 8007468:	4680      	mov	r8, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b932      	cbnz	r2, 800747c <_scanf_chars+0x1c>
 800746e:	698a      	ldr	r2, [r1, #24]
 8007470:	2a00      	cmp	r2, #0
 8007472:	bf0c      	ite	eq
 8007474:	2201      	moveq	r2, #1
 8007476:	f04f 32ff 	movne.w	r2, #4294967295
 800747a:	608a      	str	r2, [r1, #8]
 800747c:	2700      	movs	r7, #0
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007510 <_scanf_chars+0xb0>
 8007484:	06d1      	lsls	r1, r2, #27
 8007486:	bf5f      	itttt	pl
 8007488:	681a      	ldrpl	r2, [r3, #0]
 800748a:	1d11      	addpl	r1, r2, #4
 800748c:	6019      	strpl	r1, [r3, #0]
 800748e:	6816      	ldrpl	r6, [r2, #0]
 8007490:	69a0      	ldr	r0, [r4, #24]
 8007492:	b188      	cbz	r0, 80074b8 <_scanf_chars+0x58>
 8007494:	2801      	cmp	r0, #1
 8007496:	d107      	bne.n	80074a8 <_scanf_chars+0x48>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	781a      	ldrb	r2, [r3, #0]
 800749c:	6963      	ldr	r3, [r4, #20]
 800749e:	5c9b      	ldrb	r3, [r3, r2]
 80074a0:	b953      	cbnz	r3, 80074b8 <_scanf_chars+0x58>
 80074a2:	2f00      	cmp	r7, #0
 80074a4:	d031      	beq.n	800750a <_scanf_chars+0xaa>
 80074a6:	e022      	b.n	80074ee <_scanf_chars+0x8e>
 80074a8:	2802      	cmp	r0, #2
 80074aa:	d120      	bne.n	80074ee <_scanf_chars+0x8e>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80074b4:	071b      	lsls	r3, r3, #28
 80074b6:	d41a      	bmi.n	80074ee <_scanf_chars+0x8e>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	3701      	adds	r7, #1
 80074bc:	06da      	lsls	r2, r3, #27
 80074be:	bf5e      	ittt	pl
 80074c0:	682b      	ldrpl	r3, [r5, #0]
 80074c2:	781b      	ldrbpl	r3, [r3, #0]
 80074c4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80074c8:	682a      	ldr	r2, [r5, #0]
 80074ca:	686b      	ldr	r3, [r5, #4]
 80074cc:	3201      	adds	r2, #1
 80074ce:	602a      	str	r2, [r5, #0]
 80074d0:	68a2      	ldr	r2, [r4, #8]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	3a01      	subs	r2, #1
 80074d6:	606b      	str	r3, [r5, #4]
 80074d8:	60a2      	str	r2, [r4, #8]
 80074da:	b142      	cbz	r2, 80074ee <_scanf_chars+0x8e>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dcd7      	bgt.n	8007490 <_scanf_chars+0x30>
 80074e0:	4629      	mov	r1, r5
 80074e2:	4640      	mov	r0, r8
 80074e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074e8:	4798      	blx	r3
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d0d0      	beq.n	8007490 <_scanf_chars+0x30>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	f013 0310 	ands.w	r3, r3, #16
 80074f4:	d105      	bne.n	8007502 <_scanf_chars+0xa2>
 80074f6:	68e2      	ldr	r2, [r4, #12]
 80074f8:	3201      	adds	r2, #1
 80074fa:	60e2      	str	r2, [r4, #12]
 80074fc:	69a2      	ldr	r2, [r4, #24]
 80074fe:	b102      	cbz	r2, 8007502 <_scanf_chars+0xa2>
 8007500:	7033      	strb	r3, [r6, #0]
 8007502:	2000      	movs	r0, #0
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	443b      	add	r3, r7
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	bf00      	nop
 8007510:	08008c59 	.word	0x08008c59

08007514 <_scanf_i>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	460c      	mov	r4, r1
 800751a:	4698      	mov	r8, r3
 800751c:	4b75      	ldr	r3, [pc, #468]	; (80076f4 <_scanf_i+0x1e0>)
 800751e:	b087      	sub	sp, #28
 8007520:	4682      	mov	sl, r0
 8007522:	4616      	mov	r6, r2
 8007524:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007528:	ab03      	add	r3, sp, #12
 800752a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800752e:	4b72      	ldr	r3, [pc, #456]	; (80076f8 <_scanf_i+0x1e4>)
 8007530:	69a1      	ldr	r1, [r4, #24]
 8007532:	4a72      	ldr	r2, [pc, #456]	; (80076fc <_scanf_i+0x1e8>)
 8007534:	4627      	mov	r7, r4
 8007536:	2903      	cmp	r1, #3
 8007538:	bf18      	it	ne
 800753a:	461a      	movne	r2, r3
 800753c:	68a3      	ldr	r3, [r4, #8]
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	1e5a      	subs	r2, r3, #1
 8007542:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007546:	bf81      	itttt	hi
 8007548:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800754c:	eb03 0905 	addhi.w	r9, r3, r5
 8007550:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007554:	60a3      	strhi	r3, [r4, #8]
 8007556:	f857 3b1c 	ldr.w	r3, [r7], #28
 800755a:	bf98      	it	ls
 800755c:	f04f 0900 	movls.w	r9, #0
 8007560:	463d      	mov	r5, r7
 8007562:	f04f 0b00 	mov.w	fp, #0
 8007566:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	6831      	ldr	r1, [r6, #0]
 800756e:	ab03      	add	r3, sp, #12
 8007570:	2202      	movs	r2, #2
 8007572:	7809      	ldrb	r1, [r1, #0]
 8007574:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007578:	f7fe fe7e 	bl	8006278 <memchr>
 800757c:	b328      	cbz	r0, 80075ca <_scanf_i+0xb6>
 800757e:	f1bb 0f01 	cmp.w	fp, #1
 8007582:	d159      	bne.n	8007638 <_scanf_i+0x124>
 8007584:	6862      	ldr	r2, [r4, #4]
 8007586:	b92a      	cbnz	r2, 8007594 <_scanf_i+0x80>
 8007588:	2308      	movs	r3, #8
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	6822      	ldr	r2, [r4, #0]
 8007596:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800759a:	6022      	str	r2, [r4, #0]
 800759c:	68a2      	ldr	r2, [r4, #8]
 800759e:	1e51      	subs	r1, r2, #1
 80075a0:	60a1      	str	r1, [r4, #8]
 80075a2:	b192      	cbz	r2, 80075ca <_scanf_i+0xb6>
 80075a4:	6832      	ldr	r2, [r6, #0]
 80075a6:	1c51      	adds	r1, r2, #1
 80075a8:	6031      	str	r1, [r6, #0]
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	f805 2b01 	strb.w	r2, [r5], #1
 80075b0:	6872      	ldr	r2, [r6, #4]
 80075b2:	3a01      	subs	r2, #1
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	6072      	str	r2, [r6, #4]
 80075b8:	dc07      	bgt.n	80075ca <_scanf_i+0xb6>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4650      	mov	r0, sl
 80075be:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80075c2:	4790      	blx	r2
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f040 8085 	bne.w	80076d4 <_scanf_i+0x1c0>
 80075ca:	f10b 0b01 	add.w	fp, fp, #1
 80075ce:	f1bb 0f03 	cmp.w	fp, #3
 80075d2:	d1cb      	bne.n	800756c <_scanf_i+0x58>
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	b90b      	cbnz	r3, 80075dc <_scanf_i+0xc8>
 80075d8:	230a      	movs	r3, #10
 80075da:	6063      	str	r3, [r4, #4]
 80075dc:	6863      	ldr	r3, [r4, #4]
 80075de:	4948      	ldr	r1, [pc, #288]	; (8007700 <_scanf_i+0x1ec>)
 80075e0:	6960      	ldr	r0, [r4, #20]
 80075e2:	1ac9      	subs	r1, r1, r3
 80075e4:	f000 f8b6 	bl	8007754 <__sccl>
 80075e8:	f04f 0b00 	mov.w	fp, #0
 80075ec:	68a3      	ldr	r3, [r4, #8]
 80075ee:	6822      	ldr	r2, [r4, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d03d      	beq.n	8007670 <_scanf_i+0x15c>
 80075f4:	6831      	ldr	r1, [r6, #0]
 80075f6:	6960      	ldr	r0, [r4, #20]
 80075f8:	f891 c000 	ldrb.w	ip, [r1]
 80075fc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007600:	2800      	cmp	r0, #0
 8007602:	d035      	beq.n	8007670 <_scanf_i+0x15c>
 8007604:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007608:	d124      	bne.n	8007654 <_scanf_i+0x140>
 800760a:	0510      	lsls	r0, r2, #20
 800760c:	d522      	bpl.n	8007654 <_scanf_i+0x140>
 800760e:	f10b 0b01 	add.w	fp, fp, #1
 8007612:	f1b9 0f00 	cmp.w	r9, #0
 8007616:	d003      	beq.n	8007620 <_scanf_i+0x10c>
 8007618:	3301      	adds	r3, #1
 800761a:	f109 39ff 	add.w	r9, r9, #4294967295
 800761e:	60a3      	str	r3, [r4, #8]
 8007620:	6873      	ldr	r3, [r6, #4]
 8007622:	3b01      	subs	r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	6073      	str	r3, [r6, #4]
 8007628:	dd1b      	ble.n	8007662 <_scanf_i+0x14e>
 800762a:	6833      	ldr	r3, [r6, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	68a3      	ldr	r3, [r4, #8]
 8007632:	3b01      	subs	r3, #1
 8007634:	60a3      	str	r3, [r4, #8]
 8007636:	e7d9      	b.n	80075ec <_scanf_i+0xd8>
 8007638:	f1bb 0f02 	cmp.w	fp, #2
 800763c:	d1ae      	bne.n	800759c <_scanf_i+0x88>
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007644:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007648:	d1bf      	bne.n	80075ca <_scanf_i+0xb6>
 800764a:	2310      	movs	r3, #16
 800764c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	e7a2      	b.n	800759a <_scanf_i+0x86>
 8007654:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007658:	6022      	str	r2, [r4, #0]
 800765a:	780b      	ldrb	r3, [r1, #0]
 800765c:	f805 3b01 	strb.w	r3, [r5], #1
 8007660:	e7de      	b.n	8007620 <_scanf_i+0x10c>
 8007662:	4631      	mov	r1, r6
 8007664:	4650      	mov	r0, sl
 8007666:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800766a:	4798      	blx	r3
 800766c:	2800      	cmp	r0, #0
 800766e:	d0df      	beq.n	8007630 <_scanf_i+0x11c>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	05db      	lsls	r3, r3, #23
 8007674:	d50d      	bpl.n	8007692 <_scanf_i+0x17e>
 8007676:	42bd      	cmp	r5, r7
 8007678:	d909      	bls.n	800768e <_scanf_i+0x17a>
 800767a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800767e:	4632      	mov	r2, r6
 8007680:	4650      	mov	r0, sl
 8007682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007686:	f105 39ff 	add.w	r9, r5, #4294967295
 800768a:	4798      	blx	r3
 800768c:	464d      	mov	r5, r9
 800768e:	42bd      	cmp	r5, r7
 8007690:	d02d      	beq.n	80076ee <_scanf_i+0x1da>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	f012 0210 	ands.w	r2, r2, #16
 8007698:	d113      	bne.n	80076c2 <_scanf_i+0x1ae>
 800769a:	702a      	strb	r2, [r5, #0]
 800769c:	4639      	mov	r1, r7
 800769e:	6863      	ldr	r3, [r4, #4]
 80076a0:	4650      	mov	r0, sl
 80076a2:	9e01      	ldr	r6, [sp, #4]
 80076a4:	47b0      	blx	r6
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	f8d8 3000 	ldr.w	r3, [r8]
 80076ac:	f011 0f20 	tst.w	r1, #32
 80076b0:	d013      	beq.n	80076da <_scanf_i+0x1c6>
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	f8c8 2000 	str.w	r2, [r8]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6018      	str	r0, [r3, #0]
 80076bc:	68e3      	ldr	r3, [r4, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60e3      	str	r3, [r4, #12]
 80076c2:	2000      	movs	r0, #0
 80076c4:	1bed      	subs	r5, r5, r7
 80076c6:	44ab      	add	fp, r5
 80076c8:	6925      	ldr	r5, [r4, #16]
 80076ca:	445d      	add	r5, fp
 80076cc:	6125      	str	r5, [r4, #16]
 80076ce:	b007      	add	sp, #28
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	e7ca      	b.n	8007670 <_scanf_i+0x15c>
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	f8c8 2000 	str.w	r2, [r8]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f011 0f01 	tst.w	r1, #1
 80076e6:	bf14      	ite	ne
 80076e8:	8018      	strhne	r0, [r3, #0]
 80076ea:	6018      	streq	r0, [r3, #0]
 80076ec:	e7e6      	b.n	80076bc <_scanf_i+0x1a8>
 80076ee:	2001      	movs	r0, #1
 80076f0:	e7ed      	b.n	80076ce <_scanf_i+0x1ba>
 80076f2:	bf00      	nop
 80076f4:	08008b90 	.word	0x08008b90
 80076f8:	080078d1 	.word	0x080078d1
 80076fc:	08004e0d 	.word	0x08004e0d
 8007700:	08008fe6 	.word	0x08008fe6

08007704 <_read_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	4611      	mov	r1, r2
 800770c:	2200      	movs	r2, #0
 800770e:	4d05      	ldr	r5, [pc, #20]	; (8007724 <_read_r+0x20>)
 8007710:	602a      	str	r2, [r5, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7f9 fe0f 	bl	8001336 <_read>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_read_r+0x1e>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_read_r+0x1e>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	200003b8 	.word	0x200003b8

08007728 <nan>:
 8007728:	2000      	movs	r0, #0
 800772a:	4901      	ldr	r1, [pc, #4]	; (8007730 <nan+0x8>)
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	7ff80000 	.word	0x7ff80000

08007734 <_sbrk_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	2300      	movs	r3, #0
 8007738:	4d05      	ldr	r5, [pc, #20]	; (8007750 <_sbrk_r+0x1c>)
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	602b      	str	r3, [r5, #0]
 8007740:	f7f9 fe62 	bl	8001408 <_sbrk>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d102      	bne.n	800774e <_sbrk_r+0x1a>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	b103      	cbz	r3, 800774e <_sbrk_r+0x1a>
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	200003b8 	.word	0x200003b8

08007754 <__sccl>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	780b      	ldrb	r3, [r1, #0]
 8007758:	4604      	mov	r4, r0
 800775a:	2b5e      	cmp	r3, #94	; 0x5e
 800775c:	bf13      	iteet	ne
 800775e:	2200      	movne	r2, #0
 8007760:	2201      	moveq	r2, #1
 8007762:	784b      	ldrbeq	r3, [r1, #1]
 8007764:	1c48      	addne	r0, r1, #1
 8007766:	bf08      	it	eq
 8007768:	1c88      	addeq	r0, r1, #2
 800776a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800776e:	1e61      	subs	r1, r4, #1
 8007770:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007774:	42a9      	cmp	r1, r5
 8007776:	d1fb      	bne.n	8007770 <__sccl+0x1c>
 8007778:	b90b      	cbnz	r3, 800777e <__sccl+0x2a>
 800777a:	3801      	subs	r0, #1
 800777c:	bd70      	pop	{r4, r5, r6, pc}
 800777e:	f082 0201 	eor.w	r2, r2, #1
 8007782:	4605      	mov	r5, r0
 8007784:	54e2      	strb	r2, [r4, r3]
 8007786:	4628      	mov	r0, r5
 8007788:	f810 1b01 	ldrb.w	r1, [r0], #1
 800778c:	292d      	cmp	r1, #45	; 0x2d
 800778e:	d006      	beq.n	800779e <__sccl+0x4a>
 8007790:	295d      	cmp	r1, #93	; 0x5d
 8007792:	d0f3      	beq.n	800777c <__sccl+0x28>
 8007794:	b909      	cbnz	r1, 800779a <__sccl+0x46>
 8007796:	4628      	mov	r0, r5
 8007798:	e7f0      	b.n	800777c <__sccl+0x28>
 800779a:	460b      	mov	r3, r1
 800779c:	e7f1      	b.n	8007782 <__sccl+0x2e>
 800779e:	786e      	ldrb	r6, [r5, #1]
 80077a0:	2e5d      	cmp	r6, #93	; 0x5d
 80077a2:	d0fa      	beq.n	800779a <__sccl+0x46>
 80077a4:	42b3      	cmp	r3, r6
 80077a6:	dcf8      	bgt.n	800779a <__sccl+0x46>
 80077a8:	4619      	mov	r1, r3
 80077aa:	3502      	adds	r5, #2
 80077ac:	3101      	adds	r1, #1
 80077ae:	428e      	cmp	r6, r1
 80077b0:	5462      	strb	r2, [r4, r1]
 80077b2:	dcfb      	bgt.n	80077ac <__sccl+0x58>
 80077b4:	1af1      	subs	r1, r6, r3
 80077b6:	3901      	subs	r1, #1
 80077b8:	42b3      	cmp	r3, r6
 80077ba:	bfa8      	it	ge
 80077bc:	2100      	movge	r1, #0
 80077be:	1c58      	adds	r0, r3, #1
 80077c0:	1843      	adds	r3, r0, r1
 80077c2:	e7e0      	b.n	8007786 <__sccl+0x32>

080077c4 <strncmp>:
 80077c4:	4603      	mov	r3, r0
 80077c6:	b510      	push	{r4, lr}
 80077c8:	b172      	cbz	r2, 80077e8 <strncmp+0x24>
 80077ca:	3901      	subs	r1, #1
 80077cc:	1884      	adds	r4, r0, r2
 80077ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80077d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077d6:	4290      	cmp	r0, r2
 80077d8:	d101      	bne.n	80077de <strncmp+0x1a>
 80077da:	42a3      	cmp	r3, r4
 80077dc:	d101      	bne.n	80077e2 <strncmp+0x1e>
 80077de:	1a80      	subs	r0, r0, r2
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d1f3      	bne.n	80077ce <strncmp+0xa>
 80077e6:	e7fa      	b.n	80077de <strncmp+0x1a>
 80077e8:	4610      	mov	r0, r2
 80077ea:	e7f9      	b.n	80077e0 <strncmp+0x1c>

080077ec <_strtoul_l.constprop.0>:
 80077ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077f0:	4686      	mov	lr, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	4f35      	ldr	r7, [pc, #212]	; (80078cc <_strtoul_l.constprop.0+0xe0>)
 80077f6:	4628      	mov	r0, r5
 80077f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077fc:	5de6      	ldrb	r6, [r4, r7]
 80077fe:	f016 0608 	ands.w	r6, r6, #8
 8007802:	d1f8      	bne.n	80077f6 <_strtoul_l.constprop.0+0xa>
 8007804:	2c2d      	cmp	r4, #45	; 0x2d
 8007806:	d12f      	bne.n	8007868 <_strtoul_l.constprop.0+0x7c>
 8007808:	2601      	movs	r6, #1
 800780a:	782c      	ldrb	r4, [r5, #0]
 800780c:	1c85      	adds	r5, r0, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d057      	beq.n	80078c2 <_strtoul_l.constprop.0+0xd6>
 8007812:	2b10      	cmp	r3, #16
 8007814:	d109      	bne.n	800782a <_strtoul_l.constprop.0+0x3e>
 8007816:	2c30      	cmp	r4, #48	; 0x30
 8007818:	d107      	bne.n	800782a <_strtoul_l.constprop.0+0x3e>
 800781a:	7828      	ldrb	r0, [r5, #0]
 800781c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007820:	2858      	cmp	r0, #88	; 0x58
 8007822:	d149      	bne.n	80078b8 <_strtoul_l.constprop.0+0xcc>
 8007824:	2310      	movs	r3, #16
 8007826:	786c      	ldrb	r4, [r5, #1]
 8007828:	3502      	adds	r5, #2
 800782a:	f04f 38ff 	mov.w	r8, #4294967295
 800782e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007832:	2700      	movs	r7, #0
 8007834:	fb03 f908 	mul.w	r9, r3, r8
 8007838:	4638      	mov	r0, r7
 800783a:	ea6f 0909 	mvn.w	r9, r9
 800783e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007842:	f1bc 0f09 	cmp.w	ip, #9
 8007846:	d814      	bhi.n	8007872 <_strtoul_l.constprop.0+0x86>
 8007848:	4664      	mov	r4, ip
 800784a:	42a3      	cmp	r3, r4
 800784c:	dd22      	ble.n	8007894 <_strtoul_l.constprop.0+0xa8>
 800784e:	2f00      	cmp	r7, #0
 8007850:	db1d      	blt.n	800788e <_strtoul_l.constprop.0+0xa2>
 8007852:	4580      	cmp	r8, r0
 8007854:	d31b      	bcc.n	800788e <_strtoul_l.constprop.0+0xa2>
 8007856:	d101      	bne.n	800785c <_strtoul_l.constprop.0+0x70>
 8007858:	45a1      	cmp	r9, r4
 800785a:	db18      	blt.n	800788e <_strtoul_l.constprop.0+0xa2>
 800785c:	2701      	movs	r7, #1
 800785e:	fb00 4003 	mla	r0, r0, r3, r4
 8007862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007866:	e7ea      	b.n	800783e <_strtoul_l.constprop.0+0x52>
 8007868:	2c2b      	cmp	r4, #43	; 0x2b
 800786a:	bf04      	itt	eq
 800786c:	782c      	ldrbeq	r4, [r5, #0]
 800786e:	1c85      	addeq	r5, r0, #2
 8007870:	e7cd      	b.n	800780e <_strtoul_l.constprop.0+0x22>
 8007872:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007876:	f1bc 0f19 	cmp.w	ip, #25
 800787a:	d801      	bhi.n	8007880 <_strtoul_l.constprop.0+0x94>
 800787c:	3c37      	subs	r4, #55	; 0x37
 800787e:	e7e4      	b.n	800784a <_strtoul_l.constprop.0+0x5e>
 8007880:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007884:	f1bc 0f19 	cmp.w	ip, #25
 8007888:	d804      	bhi.n	8007894 <_strtoul_l.constprop.0+0xa8>
 800788a:	3c57      	subs	r4, #87	; 0x57
 800788c:	e7dd      	b.n	800784a <_strtoul_l.constprop.0+0x5e>
 800788e:	f04f 37ff 	mov.w	r7, #4294967295
 8007892:	e7e6      	b.n	8007862 <_strtoul_l.constprop.0+0x76>
 8007894:	2f00      	cmp	r7, #0
 8007896:	da07      	bge.n	80078a8 <_strtoul_l.constprop.0+0xbc>
 8007898:	2322      	movs	r3, #34	; 0x22
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	f8ce 3000 	str.w	r3, [lr]
 80078a2:	b932      	cbnz	r2, 80078b2 <_strtoul_l.constprop.0+0xc6>
 80078a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078a8:	b106      	cbz	r6, 80078ac <_strtoul_l.constprop.0+0xc0>
 80078aa:	4240      	negs	r0, r0
 80078ac:	2a00      	cmp	r2, #0
 80078ae:	d0f9      	beq.n	80078a4 <_strtoul_l.constprop.0+0xb8>
 80078b0:	b107      	cbz	r7, 80078b4 <_strtoul_l.constprop.0+0xc8>
 80078b2:	1e69      	subs	r1, r5, #1
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	e7f5      	b.n	80078a4 <_strtoul_l.constprop.0+0xb8>
 80078b8:	2430      	movs	r4, #48	; 0x30
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1b5      	bne.n	800782a <_strtoul_l.constprop.0+0x3e>
 80078be:	2308      	movs	r3, #8
 80078c0:	e7b3      	b.n	800782a <_strtoul_l.constprop.0+0x3e>
 80078c2:	2c30      	cmp	r4, #48	; 0x30
 80078c4:	d0a9      	beq.n	800781a <_strtoul_l.constprop.0+0x2e>
 80078c6:	230a      	movs	r3, #10
 80078c8:	e7af      	b.n	800782a <_strtoul_l.constprop.0+0x3e>
 80078ca:	bf00      	nop
 80078cc:	08008c59 	.word	0x08008c59

080078d0 <_strtoul_r>:
 80078d0:	f7ff bf8c 	b.w	80077ec <_strtoul_l.constprop.0>

080078d4 <__submore>:
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	460c      	mov	r4, r1
 80078da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80078dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e0:	4299      	cmp	r1, r3
 80078e2:	d11b      	bne.n	800791c <__submore+0x48>
 80078e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078e8:	f7ff fa16 	bl	8006d18 <_malloc_r>
 80078ec:	b918      	cbnz	r0, 80078f6 <__submore+0x22>
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295
 80078f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80078fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007900:	6360      	str	r0, [r4, #52]	; 0x34
 8007902:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007906:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800790a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800790e:	7043      	strb	r3, [r0, #1]
 8007910:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007914:	7003      	strb	r3, [r0, #0]
 8007916:	6020      	str	r0, [r4, #0]
 8007918:	2000      	movs	r0, #0
 800791a:	e7ea      	b.n	80078f2 <__submore+0x1e>
 800791c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800791e:	0077      	lsls	r7, r6, #1
 8007920:	463a      	mov	r2, r7
 8007922:	f000 fa29 	bl	8007d78 <_realloc_r>
 8007926:	4605      	mov	r5, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	d0e0      	beq.n	80078ee <__submore+0x1a>
 800792c:	eb00 0806 	add.w	r8, r0, r6
 8007930:	4601      	mov	r1, r0
 8007932:	4632      	mov	r2, r6
 8007934:	4640      	mov	r0, r8
 8007936:	f7fe fcad 	bl	8006294 <memcpy>
 800793a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800793e:	f8c4 8000 	str.w	r8, [r4]
 8007942:	e7e9      	b.n	8007918 <__submore+0x44>

08007944 <__ascii_wctomb>:
 8007944:	4603      	mov	r3, r0
 8007946:	4608      	mov	r0, r1
 8007948:	b141      	cbz	r1, 800795c <__ascii_wctomb+0x18>
 800794a:	2aff      	cmp	r2, #255	; 0xff
 800794c:	d904      	bls.n	8007958 <__ascii_wctomb+0x14>
 800794e:	228a      	movs	r2, #138	; 0x8a
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	4770      	bx	lr
 8007958:	2001      	movs	r0, #1
 800795a:	700a      	strb	r2, [r1, #0]
 800795c:	4770      	bx	lr
	...

08007960 <__assert_func>:
 8007960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007962:	4614      	mov	r4, r2
 8007964:	461a      	mov	r2, r3
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <__assert_func+0x2c>)
 8007968:	4605      	mov	r5, r0
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68d8      	ldr	r0, [r3, #12]
 800796e:	b14c      	cbz	r4, 8007984 <__assert_func+0x24>
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <__assert_func+0x30>)
 8007972:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007976:	9100      	str	r1, [sp, #0]
 8007978:	462b      	mov	r3, r5
 800797a:	4906      	ldr	r1, [pc, #24]	; (8007994 <__assert_func+0x34>)
 800797c:	f000 f9a2 	bl	8007cc4 <fiprintf>
 8007980:	f000 fc40 	bl	8008204 <abort>
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <__assert_func+0x38>)
 8007986:	461c      	mov	r4, r3
 8007988:	e7f3      	b.n	8007972 <__assert_func+0x12>
 800798a:	bf00      	nop
 800798c:	20000018 	.word	0x20000018
 8007990:	08008fe8 	.word	0x08008fe8
 8007994:	08008ff5 	.word	0x08008ff5
 8007998:	08009023 	.word	0x08009023

0800799c <__sflush_r>:
 800799c:	898a      	ldrh	r2, [r1, #12]
 800799e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a0:	4605      	mov	r5, r0
 80079a2:	0710      	lsls	r0, r2, #28
 80079a4:	460c      	mov	r4, r1
 80079a6:	d457      	bmi.n	8007a58 <__sflush_r+0xbc>
 80079a8:	684b      	ldr	r3, [r1, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dc04      	bgt.n	80079b8 <__sflush_r+0x1c>
 80079ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	dc01      	bgt.n	80079b8 <__sflush_r+0x1c>
 80079b4:	2000      	movs	r0, #0
 80079b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	d0fa      	beq.n	80079b4 <__sflush_r+0x18>
 80079be:	2300      	movs	r3, #0
 80079c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079c4:	682f      	ldr	r7, [r5, #0]
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	d032      	beq.n	8007a30 <__sflush_r+0x94>
 80079ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	075a      	lsls	r2, r3, #29
 80079d0:	d505      	bpl.n	80079de <__sflush_r+0x42>
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	1ac0      	subs	r0, r0, r3
 80079d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079d8:	b10b      	cbz	r3, 80079de <__sflush_r+0x42>
 80079da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079dc:	1ac0      	subs	r0, r0, r3
 80079de:	2300      	movs	r3, #0
 80079e0:	4602      	mov	r2, r0
 80079e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e4:	4628      	mov	r0, r5
 80079e6:	6a21      	ldr	r1, [r4, #32]
 80079e8:	47b0      	blx	r6
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	d106      	bne.n	80079fe <__sflush_r+0x62>
 80079f0:	6829      	ldr	r1, [r5, #0]
 80079f2:	291d      	cmp	r1, #29
 80079f4:	d82c      	bhi.n	8007a50 <__sflush_r+0xb4>
 80079f6:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <__sflush_r+0x100>)
 80079f8:	40ca      	lsrs	r2, r1
 80079fa:	07d6      	lsls	r6, r2, #31
 80079fc:	d528      	bpl.n	8007a50 <__sflush_r+0xb4>
 80079fe:	2200      	movs	r2, #0
 8007a00:	6062      	str	r2, [r4, #4]
 8007a02:	6922      	ldr	r2, [r4, #16]
 8007a04:	04d9      	lsls	r1, r3, #19
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	d504      	bpl.n	8007a14 <__sflush_r+0x78>
 8007a0a:	1c42      	adds	r2, r0, #1
 8007a0c:	d101      	bne.n	8007a12 <__sflush_r+0x76>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b903      	cbnz	r3, 8007a14 <__sflush_r+0x78>
 8007a12:	6560      	str	r0, [r4, #84]	; 0x54
 8007a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a16:	602f      	str	r7, [r5, #0]
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	d0cb      	beq.n	80079b4 <__sflush_r+0x18>
 8007a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <__sflush_r+0x8e>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f7ff f90f 	bl	8006c48 <_free_r>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a2e:	e7c2      	b.n	80079b6 <__sflush_r+0x1a>
 8007a30:	6a21      	ldr	r1, [r4, #32]
 8007a32:	2301      	movs	r3, #1
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b0      	blx	r6
 8007a38:	1c41      	adds	r1, r0, #1
 8007a3a:	d1c7      	bne.n	80079cc <__sflush_r+0x30>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0c4      	beq.n	80079cc <__sflush_r+0x30>
 8007a42:	2b1d      	cmp	r3, #29
 8007a44:	d001      	beq.n	8007a4a <__sflush_r+0xae>
 8007a46:	2b16      	cmp	r3, #22
 8007a48:	d101      	bne.n	8007a4e <__sflush_r+0xb2>
 8007a4a:	602f      	str	r7, [r5, #0]
 8007a4c:	e7b2      	b.n	80079b4 <__sflush_r+0x18>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	e7ae      	b.n	80079b6 <__sflush_r+0x1a>
 8007a58:	690f      	ldr	r7, [r1, #16]
 8007a5a:	2f00      	cmp	r7, #0
 8007a5c:	d0aa      	beq.n	80079b4 <__sflush_r+0x18>
 8007a5e:	0793      	lsls	r3, r2, #30
 8007a60:	bf18      	it	ne
 8007a62:	2300      	movne	r3, #0
 8007a64:	680e      	ldr	r6, [r1, #0]
 8007a66:	bf08      	it	eq
 8007a68:	694b      	ldreq	r3, [r1, #20]
 8007a6a:	1bf6      	subs	r6, r6, r7
 8007a6c:	600f      	str	r7, [r1, #0]
 8007a6e:	608b      	str	r3, [r1, #8]
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	dd9f      	ble.n	80079b4 <__sflush_r+0x18>
 8007a74:	4633      	mov	r3, r6
 8007a76:	463a      	mov	r2, r7
 8007a78:	4628      	mov	r0, r5
 8007a7a:	6a21      	ldr	r1, [r4, #32]
 8007a7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a80:	47e0      	blx	ip
 8007a82:	2800      	cmp	r0, #0
 8007a84:	dc06      	bgt.n	8007a94 <__sflush_r+0xf8>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	e790      	b.n	80079b6 <__sflush_r+0x1a>
 8007a94:	4407      	add	r7, r0
 8007a96:	1a36      	subs	r6, r6, r0
 8007a98:	e7ea      	b.n	8007a70 <__sflush_r+0xd4>
 8007a9a:	bf00      	nop
 8007a9c:	20400001 	.word	0x20400001

08007aa0 <_fflush_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	690b      	ldr	r3, [r1, #16]
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b913      	cbnz	r3, 8007ab0 <_fflush_r+0x10>
 8007aaa:	2500      	movs	r5, #0
 8007aac:	4628      	mov	r0, r5
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	b118      	cbz	r0, 8007aba <_fflush_r+0x1a>
 8007ab2:	6983      	ldr	r3, [r0, #24]
 8007ab4:	b90b      	cbnz	r3, 8007aba <_fflush_r+0x1a>
 8007ab6:	f000 f887 	bl	8007bc8 <__sinit>
 8007aba:	4b14      	ldr	r3, [pc, #80]	; (8007b0c <_fflush_r+0x6c>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d11b      	bne.n	8007af8 <_fflush_r+0x58>
 8007ac0:	686c      	ldr	r4, [r5, #4]
 8007ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0ef      	beq.n	8007aaa <_fflush_r+0xa>
 8007aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007acc:	07d0      	lsls	r0, r2, #31
 8007ace:	d404      	bmi.n	8007ada <_fflush_r+0x3a>
 8007ad0:	0599      	lsls	r1, r3, #22
 8007ad2:	d402      	bmi.n	8007ada <_fflush_r+0x3a>
 8007ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad6:	f000 f927 	bl	8007d28 <__retarget_lock_acquire_recursive>
 8007ada:	4628      	mov	r0, r5
 8007adc:	4621      	mov	r1, r4
 8007ade:	f7ff ff5d 	bl	800799c <__sflush_r>
 8007ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	07da      	lsls	r2, r3, #31
 8007ae8:	d4e0      	bmi.n	8007aac <_fflush_r+0xc>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	059b      	lsls	r3, r3, #22
 8007aee:	d4dd      	bmi.n	8007aac <_fflush_r+0xc>
 8007af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007af2:	f000 f91a 	bl	8007d2a <__retarget_lock_release_recursive>
 8007af6:	e7d9      	b.n	8007aac <_fflush_r+0xc>
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <_fflush_r+0x70>)
 8007afa:	429c      	cmp	r4, r3
 8007afc:	d101      	bne.n	8007b02 <_fflush_r+0x62>
 8007afe:	68ac      	ldr	r4, [r5, #8]
 8007b00:	e7df      	b.n	8007ac2 <_fflush_r+0x22>
 8007b02:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <_fflush_r+0x74>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	bf08      	it	eq
 8007b08:	68ec      	ldreq	r4, [r5, #12]
 8007b0a:	e7da      	b.n	8007ac2 <_fflush_r+0x22>
 8007b0c:	08009044 	.word	0x08009044
 8007b10:	08009064 	.word	0x08009064
 8007b14:	08009024 	.word	0x08009024

08007b18 <std>:
 8007b18:	2300      	movs	r3, #0
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b26:	6083      	str	r3, [r0, #8]
 8007b28:	8181      	strh	r1, [r0, #12]
 8007b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b2c:	81c2      	strh	r2, [r0, #14]
 8007b2e:	6183      	str	r3, [r0, #24]
 8007b30:	4619      	mov	r1, r3
 8007b32:	2208      	movs	r2, #8
 8007b34:	305c      	adds	r0, #92	; 0x5c
 8007b36:	f7fb fbd5 	bl	80032e4 <memset>
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <std+0x38>)
 8007b3c:	6224      	str	r4, [r4, #32]
 8007b3e:	6263      	str	r3, [r4, #36]	; 0x24
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <std+0x3c>)
 8007b42:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b44:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <std+0x40>)
 8007b46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <std+0x44>)
 8007b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	bf00      	nop
 8007b50:	0800406d 	.word	0x0800406d
 8007b54:	08004093 	.word	0x08004093
 8007b58:	080040cb 	.word	0x080040cb
 8007b5c:	080040ef 	.word	0x080040ef

08007b60 <_cleanup_r>:
 8007b60:	4901      	ldr	r1, [pc, #4]	; (8007b68 <_cleanup_r+0x8>)
 8007b62:	f000 b8c1 	b.w	8007ce8 <_fwalk_reent>
 8007b66:	bf00      	nop
 8007b68:	08007aa1 	.word	0x08007aa1

08007b6c <__sfmoreglue>:
 8007b6c:	2268      	movs	r2, #104	; 0x68
 8007b6e:	b570      	push	{r4, r5, r6, lr}
 8007b70:	1e4d      	subs	r5, r1, #1
 8007b72:	4355      	muls	r5, r2
 8007b74:	460e      	mov	r6, r1
 8007b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b7a:	f7ff f8cd 	bl	8006d18 <_malloc_r>
 8007b7e:	4604      	mov	r4, r0
 8007b80:	b140      	cbz	r0, 8007b94 <__sfmoreglue+0x28>
 8007b82:	2100      	movs	r1, #0
 8007b84:	e9c0 1600 	strd	r1, r6, [r0]
 8007b88:	300c      	adds	r0, #12
 8007b8a:	60a0      	str	r0, [r4, #8]
 8007b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b90:	f7fb fba8 	bl	80032e4 <memset>
 8007b94:	4620      	mov	r0, r4
 8007b96:	bd70      	pop	{r4, r5, r6, pc}

08007b98 <__sfp_lock_acquire>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sfp_lock_acquire+0x8>)
 8007b9a:	f000 b8c5 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	200003bd 	.word	0x200003bd

08007ba4 <__sfp_lock_release>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__sfp_lock_release+0x8>)
 8007ba6:	f000 b8c0 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	200003bd 	.word	0x200003bd

08007bb0 <__sinit_lock_acquire>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__sinit_lock_acquire+0x8>)
 8007bb2:	f000 b8b9 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	200003be 	.word	0x200003be

08007bbc <__sinit_lock_release>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	; (8007bc4 <__sinit_lock_release+0x8>)
 8007bbe:	f000 b8b4 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	200003be 	.word	0x200003be

08007bc8 <__sinit>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4604      	mov	r4, r0
 8007bcc:	f7ff fff0 	bl	8007bb0 <__sinit_lock_acquire>
 8007bd0:	69a3      	ldr	r3, [r4, #24]
 8007bd2:	b11b      	cbz	r3, 8007bdc <__sinit+0x14>
 8007bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd8:	f7ff bff0 	b.w	8007bbc <__sinit_lock_release>
 8007bdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007be0:	6523      	str	r3, [r4, #80]	; 0x50
 8007be2:	4b13      	ldr	r3, [pc, #76]	; (8007c30 <__sinit+0x68>)
 8007be4:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <__sinit+0x6c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	bf08      	it	eq
 8007bee:	2301      	moveq	r3, #1
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	bf08      	it	eq
 8007bf4:	61a3      	streq	r3, [r4, #24]
 8007bf6:	f000 f81f 	bl	8007c38 <__sfp>
 8007bfa:	6060      	str	r0, [r4, #4]
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 f81b 	bl	8007c38 <__sfp>
 8007c02:	60a0      	str	r0, [r4, #8]
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 f817 	bl	8007c38 <__sfp>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	60e0      	str	r0, [r4, #12]
 8007c10:	6860      	ldr	r0, [r4, #4]
 8007c12:	f7ff ff81 	bl	8007b18 <std>
 8007c16:	2201      	movs	r2, #1
 8007c18:	2109      	movs	r1, #9
 8007c1a:	68a0      	ldr	r0, [r4, #8]
 8007c1c:	f7ff ff7c 	bl	8007b18 <std>
 8007c20:	2202      	movs	r2, #2
 8007c22:	2112      	movs	r1, #18
 8007c24:	68e0      	ldr	r0, [r4, #12]
 8007c26:	f7ff ff77 	bl	8007b18 <std>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61a3      	str	r3, [r4, #24]
 8007c2e:	e7d1      	b.n	8007bd4 <__sinit+0xc>
 8007c30:	08008bc8 	.word	0x08008bc8
 8007c34:	08007b61 	.word	0x08007b61

08007c38 <__sfp>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	f7ff ffac 	bl	8007b98 <__sfp_lock_acquire>
 8007c40:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <__sfp+0x84>)
 8007c42:	681e      	ldr	r6, [r3, #0]
 8007c44:	69b3      	ldr	r3, [r6, #24]
 8007c46:	b913      	cbnz	r3, 8007c4e <__sfp+0x16>
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7ff ffbd 	bl	8007bc8 <__sinit>
 8007c4e:	3648      	adds	r6, #72	; 0x48
 8007c50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	d503      	bpl.n	8007c60 <__sfp+0x28>
 8007c58:	6833      	ldr	r3, [r6, #0]
 8007c5a:	b30b      	cbz	r3, 8007ca0 <__sfp+0x68>
 8007c5c:	6836      	ldr	r6, [r6, #0]
 8007c5e:	e7f7      	b.n	8007c50 <__sfp+0x18>
 8007c60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c64:	b9d5      	cbnz	r5, 8007c9c <__sfp+0x64>
 8007c66:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <__sfp+0x88>)
 8007c68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c6c:	60e3      	str	r3, [r4, #12]
 8007c6e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c70:	f000 f859 	bl	8007d26 <__retarget_lock_init_recursive>
 8007c74:	f7ff ff96 	bl	8007ba4 <__sfp_lock_release>
 8007c78:	2208      	movs	r2, #8
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c84:	6025      	str	r5, [r4, #0]
 8007c86:	61a5      	str	r5, [r4, #24]
 8007c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c8c:	f7fb fb2a 	bl	80032e4 <memset>
 8007c90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c98:	4620      	mov	r0, r4
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9c:	3468      	adds	r4, #104	; 0x68
 8007c9e:	e7d9      	b.n	8007c54 <__sfp+0x1c>
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f7ff ff62 	bl	8007b6c <__sfmoreglue>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	6030      	str	r0, [r6, #0]
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1d5      	bne.n	8007c5c <__sfp+0x24>
 8007cb0:	f7ff ff78 	bl	8007ba4 <__sfp_lock_release>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	e7ee      	b.n	8007c98 <__sfp+0x60>
 8007cba:	bf00      	nop
 8007cbc:	08008bc8 	.word	0x08008bc8
 8007cc0:	ffff0001 	.word	0xffff0001

08007cc4 <fiprintf>:
 8007cc4:	b40e      	push	{r1, r2, r3}
 8007cc6:	b503      	push	{r0, r1, lr}
 8007cc8:	4601      	mov	r1, r0
 8007cca:	ab03      	add	r3, sp, #12
 8007ccc:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <fiprintf+0x20>)
 8007cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd2:	6800      	ldr	r0, [r0, #0]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	f000 f8a5 	bl	8007e24 <_vfiprintf_r>
 8007cda:	b002      	add	sp, #8
 8007cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce0:	b003      	add	sp, #12
 8007ce2:	4770      	bx	lr
 8007ce4:	20000018 	.word	0x20000018

08007ce8 <_fwalk_reent>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4606      	mov	r6, r0
 8007cee:	4688      	mov	r8, r1
 8007cf0:	2700      	movs	r7, #0
 8007cf2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8007cfe:	d505      	bpl.n	8007d0c <_fwalk_reent+0x24>
 8007d00:	6824      	ldr	r4, [r4, #0]
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	d1f7      	bne.n	8007cf6 <_fwalk_reent+0xe>
 8007d06:	4638      	mov	r0, r7
 8007d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0c:	89ab      	ldrh	r3, [r5, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d907      	bls.n	8007d22 <_fwalk_reent+0x3a>
 8007d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d16:	3301      	adds	r3, #1
 8007d18:	d003      	beq.n	8007d22 <_fwalk_reent+0x3a>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	47c0      	blx	r8
 8007d20:	4307      	orrs	r7, r0
 8007d22:	3568      	adds	r5, #104	; 0x68
 8007d24:	e7e9      	b.n	8007cfa <_fwalk_reent+0x12>

08007d26 <__retarget_lock_init_recursive>:
 8007d26:	4770      	bx	lr

08007d28 <__retarget_lock_acquire_recursive>:
 8007d28:	4770      	bx	lr

08007d2a <__retarget_lock_release_recursive>:
 8007d2a:	4770      	bx	lr

08007d2c <memmove>:
 8007d2c:	4288      	cmp	r0, r1
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	eb01 0402 	add.w	r4, r1, r2
 8007d34:	d902      	bls.n	8007d3c <memmove+0x10>
 8007d36:	4284      	cmp	r4, r0
 8007d38:	4623      	mov	r3, r4
 8007d3a:	d807      	bhi.n	8007d4c <memmove+0x20>
 8007d3c:	1e43      	subs	r3, r0, #1
 8007d3e:	42a1      	cmp	r1, r4
 8007d40:	d008      	beq.n	8007d54 <memmove+0x28>
 8007d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d4a:	e7f8      	b.n	8007d3e <memmove+0x12>
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	4402      	add	r2, r0
 8007d50:	428a      	cmp	r2, r1
 8007d52:	d100      	bne.n	8007d56 <memmove+0x2a>
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d5e:	e7f7      	b.n	8007d50 <memmove+0x24>

08007d60 <__malloc_lock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	; (8007d68 <__malloc_lock+0x8>)
 8007d62:	f7ff bfe1 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	200003bc 	.word	0x200003bc

08007d6c <__malloc_unlock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__malloc_unlock+0x8>)
 8007d6e:	f7ff bfdc 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	200003bc 	.word	0x200003bc

08007d78 <_realloc_r>:
 8007d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4614      	mov	r4, r2
 8007d80:	460e      	mov	r6, r1
 8007d82:	b921      	cbnz	r1, 8007d8e <_realloc_r+0x16>
 8007d84:	4611      	mov	r1, r2
 8007d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8a:	f7fe bfc5 	b.w	8006d18 <_malloc_r>
 8007d8e:	b92a      	cbnz	r2, 8007d9c <_realloc_r+0x24>
 8007d90:	f7fe ff5a 	bl	8006c48 <_free_r>
 8007d94:	4625      	mov	r5, r4
 8007d96:	4628      	mov	r0, r5
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9c:	f000 fa9e 	bl	80082dc <_malloc_usable_size_r>
 8007da0:	4284      	cmp	r4, r0
 8007da2:	4607      	mov	r7, r0
 8007da4:	d802      	bhi.n	8007dac <_realloc_r+0x34>
 8007da6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007daa:	d812      	bhi.n	8007dd2 <_realloc_r+0x5a>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4640      	mov	r0, r8
 8007db0:	f7fe ffb2 	bl	8006d18 <_malloc_r>
 8007db4:	4605      	mov	r5, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d0ed      	beq.n	8007d96 <_realloc_r+0x1e>
 8007dba:	42bc      	cmp	r4, r7
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	bf28      	it	cs
 8007dc2:	463a      	movcs	r2, r7
 8007dc4:	f7fe fa66 	bl	8006294 <memcpy>
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4640      	mov	r0, r8
 8007dcc:	f7fe ff3c 	bl	8006c48 <_free_r>
 8007dd0:	e7e1      	b.n	8007d96 <_realloc_r+0x1e>
 8007dd2:	4635      	mov	r5, r6
 8007dd4:	e7df      	b.n	8007d96 <_realloc_r+0x1e>

08007dd6 <__sfputc_r>:
 8007dd6:	6893      	ldr	r3, [r2, #8]
 8007dd8:	b410      	push	{r4}
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	6093      	str	r3, [r2, #8]
 8007de0:	da07      	bge.n	8007df2 <__sfputc_r+0x1c>
 8007de2:	6994      	ldr	r4, [r2, #24]
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	db01      	blt.n	8007dec <__sfputc_r+0x16>
 8007de8:	290a      	cmp	r1, #10
 8007dea:	d102      	bne.n	8007df2 <__sfputc_r+0x1c>
 8007dec:	bc10      	pop	{r4}
 8007dee:	f000 b949 	b.w	8008084 <__swbuf_r>
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	1c58      	adds	r0, r3, #1
 8007df6:	6010      	str	r0, [r2, #0]
 8007df8:	7019      	strb	r1, [r3, #0]
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	bc10      	pop	{r4}
 8007dfe:	4770      	bx	lr

08007e00 <__sfputs_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	4614      	mov	r4, r2
 8007e08:	18d5      	adds	r5, r2, r3
 8007e0a:	42ac      	cmp	r4, r5
 8007e0c:	d101      	bne.n	8007e12 <__sfputs_r+0x12>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e007      	b.n	8007e22 <__sfputs_r+0x22>
 8007e12:	463a      	mov	r2, r7
 8007e14:	4630      	mov	r0, r6
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	f7ff ffdc 	bl	8007dd6 <__sfputc_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d1f3      	bne.n	8007e0a <__sfputs_r+0xa>
 8007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e24 <_vfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	460d      	mov	r5, r1
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	4606      	mov	r6, r0
 8007e30:	b09d      	sub	sp, #116	; 0x74
 8007e32:	b118      	cbz	r0, 8007e3c <_vfiprintf_r+0x18>
 8007e34:	6983      	ldr	r3, [r0, #24]
 8007e36:	b90b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x18>
 8007e38:	f7ff fec6 	bl	8007bc8 <__sinit>
 8007e3c:	4b89      	ldr	r3, [pc, #548]	; (8008064 <_vfiprintf_r+0x240>)
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	d11b      	bne.n	8007e7a <_vfiprintf_r+0x56>
 8007e42:	6875      	ldr	r5, [r6, #4]
 8007e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e46:	07d9      	lsls	r1, r3, #31
 8007e48:	d405      	bmi.n	8007e56 <_vfiprintf_r+0x32>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	059a      	lsls	r2, r3, #22
 8007e4e:	d402      	bmi.n	8007e56 <_vfiprintf_r+0x32>
 8007e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e52:	f7ff ff69 	bl	8007d28 <__retarget_lock_acquire_recursive>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	071b      	lsls	r3, r3, #28
 8007e5a:	d501      	bpl.n	8007e60 <_vfiprintf_r+0x3c>
 8007e5c:	692b      	ldr	r3, [r5, #16]
 8007e5e:	b9eb      	cbnz	r3, 8007e9c <_vfiprintf_r+0x78>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f960 	bl	8008128 <__swsetup_r>
 8007e68:	b1c0      	cbz	r0, 8007e9c <_vfiprintf_r+0x78>
 8007e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e6c:	07dc      	lsls	r4, r3, #31
 8007e6e:	d50e      	bpl.n	8007e8e <_vfiprintf_r+0x6a>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	b01d      	add	sp, #116	; 0x74
 8007e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7a:	4b7b      	ldr	r3, [pc, #492]	; (8008068 <_vfiprintf_r+0x244>)
 8007e7c:	429d      	cmp	r5, r3
 8007e7e:	d101      	bne.n	8007e84 <_vfiprintf_r+0x60>
 8007e80:	68b5      	ldr	r5, [r6, #8]
 8007e82:	e7df      	b.n	8007e44 <_vfiprintf_r+0x20>
 8007e84:	4b79      	ldr	r3, [pc, #484]	; (800806c <_vfiprintf_r+0x248>)
 8007e86:	429d      	cmp	r5, r3
 8007e88:	bf08      	it	eq
 8007e8a:	68f5      	ldreq	r5, [r6, #12]
 8007e8c:	e7da      	b.n	8007e44 <_vfiprintf_r+0x20>
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4ed      	bmi.n	8007e70 <_vfiprintf_r+0x4c>
 8007e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e96:	f7ff ff48 	bl	8007d2a <__retarget_lock_release_recursive>
 8007e9a:	e7e9      	b.n	8007e70 <_vfiprintf_r+0x4c>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea6:	2330      	movs	r3, #48	; 0x30
 8007ea8:	f04f 0901 	mov.w	r9, #1
 8007eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008070 <_vfiprintf_r+0x24c>
 8007eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0xa2>
 8007ec2:	2a25      	cmp	r2, #37	; 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x96>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xc0>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ff94 	bl	8007e00 <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80aa 	beq.w	8008032 <_vfiprintf_r+0x20e>
 8007ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80a2 	beq.w	8008032 <_vfiprintf_r+0x20e>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f04:	931a      	str	r3, [sp, #104]	; 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4858      	ldr	r0, [pc, #352]	; (8008070 <_vfiprintf_r+0x24c>)
 8007f10:	f7fe f9b2 	bl	8006278 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x12c>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	; 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	; 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x13c>
 8007f34:	4654      	mov	r4, sl
 8007f36:	2000      	movs	r0, #0
 8007f38:	f04f 0c0a 	mov.w	ip, #10
 8007f3c:	9a07      	ldr	r2, [sp, #28]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	; 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94e      	bls.n	8007fe8 <_vfiprintf_r+0x1c4>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x156>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x156>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	46a2      	mov	sl, r4
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xe2>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f7e:	d10c      	bne.n	8007f9a <_vfiprintf_r+0x176>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	; 0x2a
 8007f84:	d135      	bne.n	8007ff2 <_vfiprintf_r+0x1ce>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	3402      	adds	r4, #2
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	9203      	str	r2, [sp, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bfb8      	it	lt
 8007f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008074 <_vfiprintf_r+0x250>
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	7821      	ldrb	r1, [r4, #0]
 8007fa4:	f7fe f968 	bl	8006278 <memchr>
 8007fa8:	b140      	cbz	r0, 8007fbc <_vfiprintf_r+0x198>
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	eba0 000a 	sub.w	r0, r0, sl
 8007fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	3401      	adds	r4, #1
 8007fb8:	4303      	orrs	r3, r0
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	482d      	ldr	r0, [pc, #180]	; (8008078 <_vfiprintf_r+0x254>)
 8007fc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc8:	f7fe f956 	bl	8006278 <memchr>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d03f      	beq.n	8008050 <_vfiprintf_r+0x22c>
 8007fd0:	4b2a      	ldr	r3, [pc, #168]	; (800807c <_vfiprintf_r+0x258>)
 8007fd2:	bb1b      	cbnz	r3, 800801c <_vfiprintf_r+0x1f8>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	f023 0307 	bic.w	r3, r3, #7
 8007fdc:	3308      	adds	r3, #8
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	443b      	add	r3, r7
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	e767      	b.n	8007eb8 <_vfiprintf_r+0x94>
 8007fe8:	460c      	mov	r4, r1
 8007fea:	2001      	movs	r0, #1
 8007fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff0:	e7a5      	b.n	8007f3e <_vfiprintf_r+0x11a>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f04f 0c0a 	mov.w	ip, #10
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	3401      	adds	r4, #1
 8007ffc:	9305      	str	r3, [sp, #20]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008004:	3a30      	subs	r2, #48	; 0x30
 8008006:	2a09      	cmp	r2, #9
 8008008:	d903      	bls.n	8008012 <_vfiprintf_r+0x1ee>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0c5      	beq.n	8007f9a <_vfiprintf_r+0x176>
 800800e:	9105      	str	r1, [sp, #20]
 8008010:	e7c3      	b.n	8007f9a <_vfiprintf_r+0x176>
 8008012:	4604      	mov	r4, r0
 8008014:	2301      	movs	r3, #1
 8008016:	fb0c 2101 	mla	r1, ip, r1, r2
 800801a:	e7f0      	b.n	8007ffe <_vfiprintf_r+0x1da>
 800801c:	ab03      	add	r3, sp, #12
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	462a      	mov	r2, r5
 8008022:	4630      	mov	r0, r6
 8008024:	4b16      	ldr	r3, [pc, #88]	; (8008080 <_vfiprintf_r+0x25c>)
 8008026:	a904      	add	r1, sp, #16
 8008028:	f7fb fa02 	bl	8003430 <_printf_float>
 800802c:	4607      	mov	r7, r0
 800802e:	1c78      	adds	r0, r7, #1
 8008030:	d1d6      	bne.n	8007fe0 <_vfiprintf_r+0x1bc>
 8008032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008034:	07d9      	lsls	r1, r3, #31
 8008036:	d405      	bmi.n	8008044 <_vfiprintf_r+0x220>
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	059a      	lsls	r2, r3, #22
 800803c:	d402      	bmi.n	8008044 <_vfiprintf_r+0x220>
 800803e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008040:	f7ff fe73 	bl	8007d2a <__retarget_lock_release_recursive>
 8008044:	89ab      	ldrh	r3, [r5, #12]
 8008046:	065b      	lsls	r3, r3, #25
 8008048:	f53f af12 	bmi.w	8007e70 <_vfiprintf_r+0x4c>
 800804c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804e:	e711      	b.n	8007e74 <_vfiprintf_r+0x50>
 8008050:	ab03      	add	r3, sp, #12
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	462a      	mov	r2, r5
 8008056:	4630      	mov	r0, r6
 8008058:	4b09      	ldr	r3, [pc, #36]	; (8008080 <_vfiprintf_r+0x25c>)
 800805a:	a904      	add	r1, sp, #16
 800805c:	f7fb fc84 	bl	8003968 <_printf_i>
 8008060:	e7e4      	b.n	800802c <_vfiprintf_r+0x208>
 8008062:	bf00      	nop
 8008064:	08009044 	.word	0x08009044
 8008068:	08009064 	.word	0x08009064
 800806c:	08009024 	.word	0x08009024
 8008070:	08008fbc 	.word	0x08008fbc
 8008074:	08008fc2 	.word	0x08008fc2
 8008078:	08008fc6 	.word	0x08008fc6
 800807c:	08003431 	.word	0x08003431
 8008080:	08007e01 	.word	0x08007e01

08008084 <__swbuf_r>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	460e      	mov	r6, r1
 8008088:	4614      	mov	r4, r2
 800808a:	4605      	mov	r5, r0
 800808c:	b118      	cbz	r0, 8008096 <__swbuf_r+0x12>
 800808e:	6983      	ldr	r3, [r0, #24]
 8008090:	b90b      	cbnz	r3, 8008096 <__swbuf_r+0x12>
 8008092:	f7ff fd99 	bl	8007bc8 <__sinit>
 8008096:	4b21      	ldr	r3, [pc, #132]	; (800811c <__swbuf_r+0x98>)
 8008098:	429c      	cmp	r4, r3
 800809a:	d12b      	bne.n	80080f4 <__swbuf_r+0x70>
 800809c:	686c      	ldr	r4, [r5, #4]
 800809e:	69a3      	ldr	r3, [r4, #24]
 80080a0:	60a3      	str	r3, [r4, #8]
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	071a      	lsls	r2, r3, #28
 80080a6:	d52f      	bpl.n	8008108 <__swbuf_r+0x84>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	b36b      	cbz	r3, 8008108 <__swbuf_r+0x84>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	b2f6      	uxtb	r6, r6
 80080b2:	1ac0      	subs	r0, r0, r3
 80080b4:	6963      	ldr	r3, [r4, #20]
 80080b6:	4637      	mov	r7, r6
 80080b8:	4283      	cmp	r3, r0
 80080ba:	dc04      	bgt.n	80080c6 <__swbuf_r+0x42>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f7ff fcee 	bl	8007aa0 <_fflush_r>
 80080c4:	bb30      	cbnz	r0, 8008114 <__swbuf_r+0x90>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	3001      	adds	r0, #1
 80080ca:	3b01      	subs	r3, #1
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	701e      	strb	r6, [r3, #0]
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	4283      	cmp	r3, r0
 80080da:	d004      	beq.n	80080e6 <__swbuf_r+0x62>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d506      	bpl.n	80080f0 <__swbuf_r+0x6c>
 80080e2:	2e0a      	cmp	r6, #10
 80080e4:	d104      	bne.n	80080f0 <__swbuf_r+0x6c>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f7ff fcd9 	bl	8007aa0 <_fflush_r>
 80080ee:	b988      	cbnz	r0, 8008114 <__swbuf_r+0x90>
 80080f0:	4638      	mov	r0, r7
 80080f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f4:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <__swbuf_r+0x9c>)
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d101      	bne.n	80080fe <__swbuf_r+0x7a>
 80080fa:	68ac      	ldr	r4, [r5, #8]
 80080fc:	e7cf      	b.n	800809e <__swbuf_r+0x1a>
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <__swbuf_r+0xa0>)
 8008100:	429c      	cmp	r4, r3
 8008102:	bf08      	it	eq
 8008104:	68ec      	ldreq	r4, [r5, #12]
 8008106:	e7ca      	b.n	800809e <__swbuf_r+0x1a>
 8008108:	4621      	mov	r1, r4
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f80c 	bl	8008128 <__swsetup_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	d0cb      	beq.n	80080ac <__swbuf_r+0x28>
 8008114:	f04f 37ff 	mov.w	r7, #4294967295
 8008118:	e7ea      	b.n	80080f0 <__swbuf_r+0x6c>
 800811a:	bf00      	nop
 800811c:	08009044 	.word	0x08009044
 8008120:	08009064 	.word	0x08009064
 8008124:	08009024 	.word	0x08009024

08008128 <__swsetup_r>:
 8008128:	4b32      	ldr	r3, [pc, #200]	; (80081f4 <__swsetup_r+0xcc>)
 800812a:	b570      	push	{r4, r5, r6, lr}
 800812c:	681d      	ldr	r5, [r3, #0]
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	b125      	cbz	r5, 800813e <__swsetup_r+0x16>
 8008134:	69ab      	ldr	r3, [r5, #24]
 8008136:	b913      	cbnz	r3, 800813e <__swsetup_r+0x16>
 8008138:	4628      	mov	r0, r5
 800813a:	f7ff fd45 	bl	8007bc8 <__sinit>
 800813e:	4b2e      	ldr	r3, [pc, #184]	; (80081f8 <__swsetup_r+0xd0>)
 8008140:	429c      	cmp	r4, r3
 8008142:	d10f      	bne.n	8008164 <__swsetup_r+0x3c>
 8008144:	686c      	ldr	r4, [r5, #4]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800814c:	0719      	lsls	r1, r3, #28
 800814e:	d42c      	bmi.n	80081aa <__swsetup_r+0x82>
 8008150:	06dd      	lsls	r5, r3, #27
 8008152:	d411      	bmi.n	8008178 <__swsetup_r+0x50>
 8008154:	2309      	movs	r3, #9
 8008156:	6033      	str	r3, [r6, #0]
 8008158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	e03e      	b.n	80081e2 <__swsetup_r+0xba>
 8008164:	4b25      	ldr	r3, [pc, #148]	; (80081fc <__swsetup_r+0xd4>)
 8008166:	429c      	cmp	r4, r3
 8008168:	d101      	bne.n	800816e <__swsetup_r+0x46>
 800816a:	68ac      	ldr	r4, [r5, #8]
 800816c:	e7eb      	b.n	8008146 <__swsetup_r+0x1e>
 800816e:	4b24      	ldr	r3, [pc, #144]	; (8008200 <__swsetup_r+0xd8>)
 8008170:	429c      	cmp	r4, r3
 8008172:	bf08      	it	eq
 8008174:	68ec      	ldreq	r4, [r5, #12]
 8008176:	e7e6      	b.n	8008146 <__swsetup_r+0x1e>
 8008178:	0758      	lsls	r0, r3, #29
 800817a:	d512      	bpl.n	80081a2 <__swsetup_r+0x7a>
 800817c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800817e:	b141      	cbz	r1, 8008192 <__swsetup_r+0x6a>
 8008180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008184:	4299      	cmp	r1, r3
 8008186:	d002      	beq.n	800818e <__swsetup_r+0x66>
 8008188:	4630      	mov	r0, r6
 800818a:	f7fe fd5d 	bl	8006c48 <_free_r>
 800818e:	2300      	movs	r3, #0
 8008190:	6363      	str	r3, [r4, #52]	; 0x34
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	2300      	movs	r3, #0
 800819c:	6063      	str	r3, [r4, #4]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f043 0308 	orr.w	r3, r3, #8
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	b94b      	cbnz	r3, 80081c2 <__swsetup_r+0x9a>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b8:	d003      	beq.n	80081c2 <__swsetup_r+0x9a>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f84d 	bl	800825c <__smakebuf_r>
 80081c2:	89a0      	ldrh	r0, [r4, #12]
 80081c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081c8:	f010 0301 	ands.w	r3, r0, #1
 80081cc:	d00a      	beq.n	80081e4 <__swsetup_r+0xbc>
 80081ce:	2300      	movs	r3, #0
 80081d0:	60a3      	str	r3, [r4, #8]
 80081d2:	6963      	ldr	r3, [r4, #20]
 80081d4:	425b      	negs	r3, r3
 80081d6:	61a3      	str	r3, [r4, #24]
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	b943      	cbnz	r3, 80081ee <__swsetup_r+0xc6>
 80081dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e0:	d1ba      	bne.n	8008158 <__swsetup_r+0x30>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	0781      	lsls	r1, r0, #30
 80081e6:	bf58      	it	pl
 80081e8:	6963      	ldrpl	r3, [r4, #20]
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	e7f4      	b.n	80081d8 <__swsetup_r+0xb0>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e7f7      	b.n	80081e2 <__swsetup_r+0xba>
 80081f2:	bf00      	nop
 80081f4:	20000018 	.word	0x20000018
 80081f8:	08009044 	.word	0x08009044
 80081fc:	08009064 	.word	0x08009064
 8008200:	08009024 	.word	0x08009024

08008204 <abort>:
 8008204:	2006      	movs	r0, #6
 8008206:	b508      	push	{r3, lr}
 8008208:	f000 f898 	bl	800833c <raise>
 800820c:	2001      	movs	r0, #1
 800820e:	f7f9 f888 	bl	8001322 <_exit>

08008212 <__swhatbuf_r>:
 8008212:	b570      	push	{r4, r5, r6, lr}
 8008214:	460e      	mov	r6, r1
 8008216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821a:	4614      	mov	r4, r2
 800821c:	2900      	cmp	r1, #0
 800821e:	461d      	mov	r5, r3
 8008220:	b096      	sub	sp, #88	; 0x58
 8008222:	da08      	bge.n	8008236 <__swhatbuf_r+0x24>
 8008224:	2200      	movs	r2, #0
 8008226:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800822a:	602a      	str	r2, [r5, #0]
 800822c:	061a      	lsls	r2, r3, #24
 800822e:	d410      	bmi.n	8008252 <__swhatbuf_r+0x40>
 8008230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008234:	e00e      	b.n	8008254 <__swhatbuf_r+0x42>
 8008236:	466a      	mov	r2, sp
 8008238:	f000 f89c 	bl	8008374 <_fstat_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	dbf1      	blt.n	8008224 <__swhatbuf_r+0x12>
 8008240:	9a01      	ldr	r2, [sp, #4]
 8008242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800824a:	425a      	negs	r2, r3
 800824c:	415a      	adcs	r2, r3
 800824e:	602a      	str	r2, [r5, #0]
 8008250:	e7ee      	b.n	8008230 <__swhatbuf_r+0x1e>
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	2000      	movs	r0, #0
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	b016      	add	sp, #88	; 0x58
 800825a:	bd70      	pop	{r4, r5, r6, pc}

0800825c <__smakebuf_r>:
 800825c:	898b      	ldrh	r3, [r1, #12]
 800825e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008260:	079d      	lsls	r5, r3, #30
 8008262:	4606      	mov	r6, r0
 8008264:	460c      	mov	r4, r1
 8008266:	d507      	bpl.n	8008278 <__smakebuf_r+0x1c>
 8008268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	2301      	movs	r3, #1
 8008272:	6163      	str	r3, [r4, #20]
 8008274:	b002      	add	sp, #8
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	466a      	mov	r2, sp
 800827a:	ab01      	add	r3, sp, #4
 800827c:	f7ff ffc9 	bl	8008212 <__swhatbuf_r>
 8008280:	9900      	ldr	r1, [sp, #0]
 8008282:	4605      	mov	r5, r0
 8008284:	4630      	mov	r0, r6
 8008286:	f7fe fd47 	bl	8006d18 <_malloc_r>
 800828a:	b948      	cbnz	r0, 80082a0 <__smakebuf_r+0x44>
 800828c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008290:	059a      	lsls	r2, r3, #22
 8008292:	d4ef      	bmi.n	8008274 <__smakebuf_r+0x18>
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	f043 0302 	orr.w	r3, r3, #2
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	e7e3      	b.n	8008268 <__smakebuf_r+0xc>
 80082a0:	4b0d      	ldr	r3, [pc, #52]	; (80082d8 <__smakebuf_r+0x7c>)
 80082a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	6020      	str	r0, [r4, #0]
 80082a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	6120      	str	r0, [r4, #16]
 80082b2:	6163      	str	r3, [r4, #20]
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	b15b      	cbz	r3, 80082d0 <__smakebuf_r+0x74>
 80082b8:	4630      	mov	r0, r6
 80082ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082be:	f000 f86b 	bl	8008398 <_isatty_r>
 80082c2:	b128      	cbz	r0, 80082d0 <__smakebuf_r+0x74>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	89a0      	ldrh	r0, [r4, #12]
 80082d2:	4305      	orrs	r5, r0
 80082d4:	81a5      	strh	r5, [r4, #12]
 80082d6:	e7cd      	b.n	8008274 <__smakebuf_r+0x18>
 80082d8:	08007b61 	.word	0x08007b61

080082dc <_malloc_usable_size_r>:
 80082dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e0:	1f18      	subs	r0, r3, #4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bfbc      	itt	lt
 80082e6:	580b      	ldrlt	r3, [r1, r0]
 80082e8:	18c0      	addlt	r0, r0, r3
 80082ea:	4770      	bx	lr

080082ec <_raise_r>:
 80082ec:	291f      	cmp	r1, #31
 80082ee:	b538      	push	{r3, r4, r5, lr}
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	d904      	bls.n	8008300 <_raise_r+0x14>
 80082f6:	2316      	movs	r3, #22
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008302:	b112      	cbz	r2, 800830a <_raise_r+0x1e>
 8008304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008308:	b94b      	cbnz	r3, 800831e <_raise_r+0x32>
 800830a:	4620      	mov	r0, r4
 800830c:	f000 f830 	bl	8008370 <_getpid_r>
 8008310:	462a      	mov	r2, r5
 8008312:	4601      	mov	r1, r0
 8008314:	4620      	mov	r0, r4
 8008316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800831a:	f000 b817 	b.w	800834c <_kill_r>
 800831e:	2b01      	cmp	r3, #1
 8008320:	d00a      	beq.n	8008338 <_raise_r+0x4c>
 8008322:	1c59      	adds	r1, r3, #1
 8008324:	d103      	bne.n	800832e <_raise_r+0x42>
 8008326:	2316      	movs	r3, #22
 8008328:	6003      	str	r3, [r0, #0]
 800832a:	2001      	movs	r0, #1
 800832c:	e7e7      	b.n	80082fe <_raise_r+0x12>
 800832e:	2400      	movs	r4, #0
 8008330:	4628      	mov	r0, r5
 8008332:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008336:	4798      	blx	r3
 8008338:	2000      	movs	r0, #0
 800833a:	e7e0      	b.n	80082fe <_raise_r+0x12>

0800833c <raise>:
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <raise+0xc>)
 800833e:	4601      	mov	r1, r0
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f7ff bfd3 	b.w	80082ec <_raise_r>
 8008346:	bf00      	nop
 8008348:	20000018 	.word	0x20000018

0800834c <_kill_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	2300      	movs	r3, #0
 8008350:	4d06      	ldr	r5, [pc, #24]	; (800836c <_kill_r+0x20>)
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	f7f8 ffd2 	bl	8001302 <_kill>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <_kill_r+0x1c>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b103      	cbz	r3, 8008368 <_kill_r+0x1c>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	200003b8 	.word	0x200003b8

08008370 <_getpid_r>:
 8008370:	f7f8 bfc0 	b.w	80012f4 <_getpid>

08008374 <_fstat_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	2300      	movs	r3, #0
 8008378:	4d06      	ldr	r5, [pc, #24]	; (8008394 <_fstat_r+0x20>)
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f7f9 f81c 	bl	80013be <_fstat>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d102      	bne.n	8008390 <_fstat_r+0x1c>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b103      	cbz	r3, 8008390 <_fstat_r+0x1c>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	bf00      	nop
 8008394:	200003b8 	.word	0x200003b8

08008398 <_isatty_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	2300      	movs	r3, #0
 800839c:	4d05      	ldr	r5, [pc, #20]	; (80083b4 <_isatty_r+0x1c>)
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f9 f81a 	bl	80013dc <_isatty>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_isatty_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_isatty_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	200003b8 	.word	0x200003b8

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
