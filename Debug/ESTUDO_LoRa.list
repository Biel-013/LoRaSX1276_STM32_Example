
ESTUDO_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004008  08004008  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004008  08004008  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004008  08004008  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000078  08004088  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004088  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000948f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7a  00000000  00000000  00029530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001746b  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d21  00000000  00000000  000433c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083223  00000000  00000000  0004d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002858  00000000  00000000  000d0358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080039d4 	.word	0x080039d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080039d4 	.word	0x080039d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UARTEx_RxEventCallback>:
 * @param
 * @param
 * @retval ***NONE***
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	807b      	strh	r3, [r7, #2]
	/* Prevent unused argument(s) compilation warning */

	if (huart->Instance == USART3) {
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1e      	ldr	r2, [pc, #120]	; (80001e8 <HAL_UARTEx_RxEventCallback+0x8c>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d135      	bne.n	80001de <HAL_UARTEx_RxEventCallback+0x82>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000172:	2110      	movs	r1, #16
 8000174:	481d      	ldr	r0, [pc, #116]	; (80001ec <HAL_UARTEx_RxEventCallback+0x90>)
 8000176:	f001 f901 	bl	800137c <HAL_GPIO_TogglePin>
		HAL_UART_DMAPause(&huart3);
 800017a:	481d      	ldr	r0, [pc, #116]	; (80001f0 <HAL_UARTEx_RxEventCallback+0x94>)
 800017c:	f001 fdfb 	bl	8001d76 <HAL_UART_DMAPause>
		for (int i = 0; i < 10; i++)
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
 8000184:	e018      	b.n	80001b8 <HAL_UARTEx_RxEventCallback+0x5c>
			if (!memcmp(DMA_RX_Buffer_3 + i, fistTERM, strlen(fistTERM))) {
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	4a1a      	ldr	r2, [pc, #104]	; (80001f4 <HAL_UARTEx_RxEventCallback+0x98>)
 800018a:	189c      	adds	r4, r3, r2
 800018c:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <HAL_UARTEx_RxEventCallback+0x9c>)
 800018e:	681d      	ldr	r5, [r3, #0]
 8000190:	4b19      	ldr	r3, [pc, #100]	; (80001f8 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4618      	mov	r0, r3
 8000196:	f7ff ffd9 	bl	800014c <strlen>
 800019a:	4603      	mov	r3, r0
 800019c:	461a      	mov	r2, r3
 800019e:	4629      	mov	r1, r5
 80001a0:	4620      	mov	r0, r4
 80001a2:	f002 fad1 	bl	8002748 <memcmp>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d102      	bne.n	80001b2 <HAL_UARTEx_RxEventCallback+0x56>
				LORA_ReceivedCallback(DMA_RX_Buffer_3);
 80001ac:	4811      	ldr	r0, [pc, #68]	; (80001f4 <HAL_UARTEx_RxEventCallback+0x98>)
 80001ae:	f000 f83f 	bl	8000230 <LORA_ReceivedCallback>
		for (int i = 0; i < 10; i++)
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	3301      	adds	r3, #1
 80001b6:	60fb      	str	r3, [r7, #12]
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	2b09      	cmp	r3, #9
 80001bc:	dde3      	ble.n	8000186 <HAL_UARTEx_RxEventCallback+0x2a>

			}
		HAL_UART_DMAResume(&huart3);
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80001c0:	f001 fe75 	bl	8001eae <HAL_UART_DMAResume>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 80001c4:	2246      	movs	r2, #70	; 0x46
 80001c6:	490b      	ldr	r1, [pc, #44]	; (80001f4 <HAL_UARTEx_RxEventCallback+0x98>)
 80001c8:	4809      	ldr	r0, [pc, #36]	; (80001f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80001ca:	f001 fefd 	bl	8001fc8 <HAL_UARTEx_ReceiveToIdle_DMA>
		DMA_RX_BUFFER_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <HAL_UARTEx_RxEventCallback+0xa0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <HAL_UARTEx_RxEventCallback+0xa0>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f022 0204 	bic.w	r2, r2, #4
 80001dc:	601a      	str	r2, [r3, #0]
	}
}
 80001de:	bf00      	nop
 80001e0:	3710      	adds	r7, #16
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40004800 	.word	0x40004800
 80001ec:	40010800 	.word	0x40010800
 80001f0:	200001a8 	.word	0x200001a8
 80001f4:	20000094 	.word	0x20000094
 80001f8:	20000000 	.word	0x20000000
 80001fc:	200001f0 	.word	0x200001f0

08000200 <USART_Init>:
 * @brief
 * @param
 * @param
 * @retval ***NONE***
 */
void USART_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 8000204:	2246      	movs	r2, #70	; 0x46
 8000206:	4907      	ldr	r1, [pc, #28]	; (8000224 <USART_Init+0x24>)
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <USART_Init+0x28>)
 800020a:	f001 fedd 	bl	8001fc8 <HAL_UARTEx_ReceiveToIdle_DMA>
	DMA_RX_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800020e:	4b07      	ldr	r3, [pc, #28]	; (800022c <USART_Init+0x2c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <USART_Init+0x2c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f022 0204 	bic.w	r2, r2, #4
 800021c:	601a      	str	r2, [r3, #0]
//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2, DMA_RX_BUFFER_SIZE);
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000094 	.word	0x20000094
 8000228:	200001a8 	.word	0x200001a8
 800022c:	200001f0 	.word	0x200001f0

08000230 <LORA_ReceivedCallback>:

/* USER CODE END PV */

/* Private functions ------------------------------------------------------------*/
/* USER CODE BEGIN PF */
void LORA_ReceivedCallback(uint8_t buffer[50]) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	int posicao_inicial = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	627b      	str	r3, [r7, #36]	; 0x24
	int posicao_final = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 70; i++) {
 8000240:	2300      	movs	r3, #0
 8000242:	61fb      	str	r3, [r7, #28]
 8000244:	e010      	b.n	8000268 <LORA_ReceivedCallback+0x38>
		if (!memcmp(buffer + i, "AT+", 3)) {
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	2203      	movs	r2, #3
 800024e:	493a      	ldr	r1, [pc, #232]	; (8000338 <LORA_ReceivedCallback+0x108>)
 8000250:	4618      	mov	r0, r3
 8000252:	f002 fa79 	bl	8002748 <memcmp>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d102      	bne.n	8000262 <LORA_ReceivedCallback+0x32>
			posicao_inicial = i;
 800025c:	69fb      	ldr	r3, [r7, #28]
 800025e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000260:	e005      	b.n	800026e <LORA_ReceivedCallback+0x3e>
	for (int i = 0; i < 70; i++) {
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	3301      	adds	r3, #1
 8000266:	61fb      	str	r3, [r7, #28]
 8000268:	69fb      	ldr	r3, [r7, #28]
 800026a:	2b45      	cmp	r3, #69	; 0x45
 800026c:	ddeb      	ble.n	8000246 <LORA_ReceivedCallback+0x16>
		}
	}
	for (int i = posicao_inicial; i < 70; i++) {
 800026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000270:	61bb      	str	r3, [r7, #24]
 8000272:	e011      	b.n	8000298 <LORA_ReceivedCallback+0x68>
		if (!memcmp(buffer + i, "<OK>", 4)) {
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	2204      	movs	r2, #4
 800027c:	492f      	ldr	r1, [pc, #188]	; (800033c <LORA_ReceivedCallback+0x10c>)
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fa62 	bl	8002748 <memcmp>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d103      	bne.n	8000292 <LORA_ReceivedCallback+0x62>
			posicao_final = i + 4;
 800028a:	69bb      	ldr	r3, [r7, #24]
 800028c:	3304      	adds	r3, #4
 800028e:	623b      	str	r3, [r7, #32]
			break;
 8000290:	e005      	b.n	800029e <LORA_ReceivedCallback+0x6e>
	for (int i = posicao_inicial; i < 70; i++) {
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	3301      	adds	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	2b45      	cmp	r3, #69	; 0x45
 800029c:	ddea      	ble.n	8000274 <LORA_ReceivedCallback+0x44>
		}
	}
	if (posicao_inicial != 0 && posicao_final != 0) {
 800029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d035      	beq.n	8000310 <LORA_ReceivedCallback+0xe0>
 80002a4:	6a3b      	ldr	r3, [r7, #32]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d032      	beq.n	8000310 <LORA_ReceivedCallback+0xe0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80002aa:	2102      	movs	r1, #2
 80002ac:	4824      	ldr	r0, [pc, #144]	; (8000340 <LORA_ReceivedCallback+0x110>)
 80002ae:	f001 f865 	bl	800137c <HAL_GPIO_TogglePin>
		for (int i = posicao_inicial; i < 100; i++) {
 80002b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e016      	b.n	80002e6 <LORA_ReceivedCallback+0xb6>
			if (i <= posicao_final + 1)
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	3301      	adds	r3, #1
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	429a      	cmp	r2, r3
 80002c0:	dc09      	bgt.n	80002d6 <LORA_ReceivedCallback+0xa6>
				LORA_UART_BUFFER[i - posicao_inicial] = buffer[i];
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	441a      	add	r2, r3
 80002c8:	6979      	ldr	r1, [r7, #20]
 80002ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002cc:	1acb      	subs	r3, r1, r3
 80002ce:	7811      	ldrb	r1, [r2, #0]
 80002d0:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <LORA_ReceivedCallback+0x114>)
 80002d2:	54d1      	strb	r1, [r2, r3]
 80002d4:	e004      	b.n	80002e0 <LORA_ReceivedCallback+0xb0>
			else
				LORA_UART_BUFFER[i] = '\000';
 80002d6:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <LORA_ReceivedCallback+0x114>)
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	4413      	add	r3, r2
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
		for (int i = posicao_inicial; i < 100; i++) {
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	3301      	adds	r3, #1
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	2b63      	cmp	r3, #99	; 0x63
 80002ea:	dde5      	ble.n	80002b8 <LORA_ReceivedCallback+0x88>
		}
		LORA_STATUS_RECEIVE = LORA_OK;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <LORA_ReceivedCallback+0x118>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	e007      	b.n	8000308 <LORA_ReceivedCallback+0xd8>
			buffer[i] = '\0';
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	3301      	adds	r3, #1
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	2b0e      	cmp	r3, #14
 800030c:	ddf4      	ble.n	80002f8 <LORA_ReceivedCallback+0xc8>
		return;
 800030e:	e010      	b.n	8000332 <LORA_ReceivedCallback+0x102>
	}
	for (int i = 0; i < 15; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e007      	b.n	8000326 <LORA_ReceivedCallback+0xf6>
		buffer[i] = '\0';
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	4413      	add	r3, r2
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; i++)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	2b0e      	cmp	r3, #14
 800032a:	ddf4      	ble.n	8000316 <LORA_ReceivedCallback+0xe6>
	LORA_STATUS_RECEIVE = LORA_FAILED;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <LORA_ReceivedCallback+0x118>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
}
 8000332:	3728      	adds	r7, #40	; 0x28
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	080039fc 	.word	0x080039fc
 800033c:	08003a00 	.word	0x08003a00
 8000340:	40010800 	.word	0x40010800
 8000344:	200000dc 	.word	0x200000dc
 8000348:	20000004 	.word	0x20000004

0800034c <LORA_TransmitCommand>:

LoRa_StatusTypeDef LORA_TransmitCommand(uint16_t _Timeout) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	80fb      	strh	r3, [r7, #6]
	if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_TXcommand,
			strlen((char*) AT_TXcommand), _Timeout) != HAL_OK) {
 8000356:	480b      	ldr	r0, [pc, #44]	; (8000384 <LORA_TransmitCommand+0x38>)
 8000358:	f7ff fef8 	bl	800014c <strlen>
 800035c:	4603      	mov	r3, r0
	if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_TXcommand,
 800035e:	b29a      	uxth	r2, r3
 8000360:	88fb      	ldrh	r3, [r7, #6]
 8000362:	4908      	ldr	r1, [pc, #32]	; (8000384 <LORA_TransmitCommand+0x38>)
 8000364:	4808      	ldr	r0, [pc, #32]	; (8000388 <LORA_TransmitCommand+0x3c>)
 8000366:	f001 fc83 	bl	8001c70 <HAL_UART_Transmit>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d004      	beq.n	800037a <LORA_TransmitCommand+0x2e>
		HAL_Delay(20);
 8000370:	2014      	movs	r0, #20
 8000372:	f000 fb47 	bl	8000a04 <HAL_Delay>
		return LORA_FAILED;
 8000376:	2300      	movs	r3, #0
 8000378:	e000      	b.n	800037c <LORA_TransmitCommand+0x30>
	}
	return LORA_OK;
 800037a:	2301      	movs	r3, #1
}
 800037c:	4618      	mov	r0, r3
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000174 	.word	0x20000174
 8000388:	200001a8 	.word	0x200001a8

0800038c <LORA_ReceiveCommand>:

LoRa_StatusTypeDef LORA_ReceiveCommand(uint16_t _TimerWait, uint16_t _Periodo) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	460a      	mov	r2, r1
 8000396:	80fb      	strh	r3, [r7, #6]
 8000398:	4613      	mov	r3, r2
 800039a:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
			strlen((char*) AT_RXcommand), 100);
 800039c:	481f      	ldr	r0, [pc, #124]	; (800041c <LORA_ReceiveCommand+0x90>)
 800039e:	f7ff fed5 	bl	800014c <strlen>
 80003a2:	4603      	mov	r3, r0
	HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	2364      	movs	r3, #100	; 0x64
 80003a8:	491c      	ldr	r1, [pc, #112]	; (800041c <LORA_ReceiveCommand+0x90>)
 80003aa:	481d      	ldr	r0, [pc, #116]	; (8000420 <LORA_ReceiveCommand+0x94>)
 80003ac:	f001 fc60 	bl	8001c70 <HAL_UART_Transmit>
	HAL_Delay(20);
 80003b0:	2014      	movs	r0, #20
 80003b2:	f000 fb27 	bl	8000a04 <HAL_Delay>

	uint32_t Timer_start = HAL_GetTick();
 80003b6:	f000 fb1b 	bl	80009f0 <HAL_GetTick>
 80003ba:	60f8      	str	r0, [r7, #12]
	while (LORA_STATUS_RECEIVE != LORA_OK) {
 80003bc:	e025      	b.n	800040a <LORA_ReceiveCommand+0x7e>
		if (((HAL_GetTick() - Timer_start) % _Periodo) == 0)
 80003be:	f000 fb17 	bl	80009f0 <HAL_GetTick>
 80003c2:	4602      	mov	r2, r0
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	88ba      	ldrh	r2, [r7, #4]
 80003ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80003ce:	fb01 f202 	mul.w	r2, r1, r2
 80003d2:	1a9b      	subs	r3, r3, r2
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d10e      	bne.n	80003f6 <LORA_ReceiveCommand+0x6a>
			if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
					strlen((char*) AT_RXcommand), 100) != HAL_OK)
 80003d8:	4810      	ldr	r0, [pc, #64]	; (800041c <LORA_ReceiveCommand+0x90>)
 80003da:	f7ff feb7 	bl	800014c <strlen>
 80003de:	4603      	mov	r3, r0
			if (HAL_UART_Transmit(LORA_HANDLER_UART, AT_RXcommand,
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	2364      	movs	r3, #100	; 0x64
 80003e4:	490d      	ldr	r1, [pc, #52]	; (800041c <LORA_ReceiveCommand+0x90>)
 80003e6:	480e      	ldr	r0, [pc, #56]	; (8000420 <LORA_ReceiveCommand+0x94>)
 80003e8:	f001 fc42 	bl	8001c70 <HAL_UART_Transmit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <LORA_ReceiveCommand+0x6a>
				return LORA_FAILED;
 80003f2:	2300      	movs	r3, #0
 80003f4:	e00e      	b.n	8000414 <LORA_ReceiveCommand+0x88>
		if ((HAL_GetTick() - Timer_start) > _TimerWait)
 80003f6:	f000 fafb 	bl	80009f0 <HAL_GetTick>
 80003fa:	4602      	mov	r2, r0
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	1ad2      	subs	r2, r2, r3
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	429a      	cmp	r2, r3
 8000404:	d901      	bls.n	800040a <LORA_ReceiveCommand+0x7e>
			return LORA_TIMEOUT;
 8000406:	2305      	movs	r3, #5
 8000408:	e004      	b.n	8000414 <LORA_ReceiveCommand+0x88>
	while (LORA_STATUS_RECEIVE != LORA_OK) {
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LORA_ReceiveCommand+0x98>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d1d5      	bne.n	80003be <LORA_ReceiveCommand+0x32>
	}
	return LORA_OK;
 8000412:	2301      	movs	r3, #1
}
 8000414:	4618      	mov	r0, r3
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000140 	.word	0x20000140
 8000420:	200001a8 	.word	0x200001a8
 8000424:	20000004 	.word	0x20000004

08000428 <AT_EncryptionConfiguration>:
 * @param _Encryption: Modo de encriptação
 * @retval Status de execução do comando
 */

LoRa_StatusTypeDef AT_EncryptionConfiguration(LoRa_OperationTypeDef _Operacao,
		LoRa_ReadoutEncryptionTypeDef *_Encryption) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
	switch (_Operacao) {
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <AT_EncryptionConfiguration+0x18>
 800043a:	2b01      	cmp	r3, #1
 800043c:	d018      	beq.n	8000470 <AT_EncryptionConfiguration+0x48>
		sprintf((char*) AT_TXcommand, "AT+CRYPTO %u\r\n", (*_Encryption));
		if (LORA_TransmitCommand(300) != LORA_OK)
			return LORA_FAILED;
		break;
	default:
		break;
 800043e:	e028      	b.n	8000492 <AT_EncryptionConfiguration+0x6a>
		sprintf((char*) AT_RXcommand, "AT+CRYPTO\r\n");
 8000440:	4916      	ldr	r1, [pc, #88]	; (800049c <AT_EncryptionConfiguration+0x74>)
 8000442:	4817      	ldr	r0, [pc, #92]	; (80004a0 <AT_EncryptionConfiguration+0x78>)
 8000444:	f002 f998 	bl	8002778 <siprintf>
		LORA_STATUS_RECEIVE = LORA_CLEAR;
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <AT_EncryptionConfiguration+0x7c>)
 800044a:	2206      	movs	r2, #6
 800044c:	701a      	strb	r2, [r3, #0]
		if (LORA_ReceiveCommand(500, 10) != LORA_OK)
 800044e:	210a      	movs	r1, #10
 8000450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000454:	f7ff ff9a 	bl	800038c <LORA_ReceiveCommand>
 8000458:	4603      	mov	r3, r0
 800045a:	2b01      	cmp	r3, #1
 800045c:	d001      	beq.n	8000462 <AT_EncryptionConfiguration+0x3a>
			return LORA_FAILED;
 800045e:	2300      	movs	r3, #0
 8000460:	e018      	b.n	8000494 <AT_EncryptionConfiguration+0x6c>
		sscanf(LORA_UART_BUFFER, "%s\r%hu\r\n", AT_RXcommand,
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <AT_EncryptionConfiguration+0x78>)
 8000466:	4910      	ldr	r1, [pc, #64]	; (80004a8 <AT_EncryptionConfiguration+0x80>)
 8000468:	4810      	ldr	r0, [pc, #64]	; (80004ac <AT_EncryptionConfiguration+0x84>)
 800046a:	f002 f9a5 	bl	80027b8 <siscanf>
		break;
 800046e:	e010      	b.n	8000492 <AT_EncryptionConfiguration+0x6a>
		sprintf((char*) AT_TXcommand, "AT+CRYPTO %u\r\n", (*_Encryption));
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	490e      	ldr	r1, [pc, #56]	; (80004b0 <AT_EncryptionConfiguration+0x88>)
 8000478:	480e      	ldr	r0, [pc, #56]	; (80004b4 <AT_EncryptionConfiguration+0x8c>)
 800047a:	f002 f97d 	bl	8002778 <siprintf>
		if (LORA_TransmitCommand(300) != LORA_OK)
 800047e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000482:	f7ff ff63 	bl	800034c <LORA_TransmitCommand>
 8000486:	4603      	mov	r3, r0
 8000488:	2b01      	cmp	r3, #1
 800048a:	d001      	beq.n	8000490 <AT_EncryptionConfiguration+0x68>
			return LORA_FAILED;
 800048c:	2300      	movs	r3, #0
 800048e:	e001      	b.n	8000494 <AT_EncryptionConfiguration+0x6c>
		break;
 8000490:	bf00      	nop
	}
	return LORA_OK;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	08003e04 	.word	0x08003e04
 80004a0:	20000140 	.word	0x20000140
 80004a4:	20000004 	.word	0x20000004
 80004a8:	08003ab4 	.word	0x08003ab4
 80004ac:	200000dc 	.word	0x200000dc
 80004b0:	08003e10 	.word	0x08003e10
 80004b4:	20000174 	.word	0x20000174

080004b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004bc:	f000 fa40 	bl	8000940 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c0:	f000 f82c 	bl	800051c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c4:	f000 f8b8 	bl	8000638 <MX_GPIO_Init>
	MX_DMA_Init();
 80004c8:	f000 f898 	bl	80005fc <MX_DMA_Init>
	MX_USART3_UART_Init();
 80004cc:	f000 f86c 	bl	80005a8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	USART_Init();
 80004d0:	f7ff fe96 	bl	8000200 <USART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	AT_EncryptionConfiguration(AT_OPERATION_READ, &status);
 80004d4:	4910      	ldr	r1, [pc, #64]	; (8000518 <main+0x60>)
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ffa6 	bl	8000428 <AT_EncryptionConfiguration>
	status = !status;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <main+0x60>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <main+0x60>)
 80004ee:	701a      	strb	r2, [r3, #0]
	AT_EncryptionConfiguration(AT_OPERATION_WRITE, &status);
 80004f0:	4909      	ldr	r1, [pc, #36]	; (8000518 <main+0x60>)
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff ff98 	bl	8000428 <AT_EncryptionConfiguration>
	status = !status;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <main+0x60>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf0c      	ite	eq
 8000500:	2301      	moveq	r3, #1
 8000502:	2300      	movne	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <main+0x60>)
 800050a:	701a      	strb	r2, [r3, #0]
	AT_EncryptionConfiguration(AT_OPERATION_READ, &status);
 800050c:	4902      	ldr	r1, [pc, #8]	; (8000518 <main+0x60>)
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff ff8a 	bl	8000428 <AT_EncryptionConfiguration>
//	Value = 0;
//	AT_RepeatUnconfirmedUplink(AT_OPERATION_WRITE, &Value);
//	Value = 4400;
//	AT_RepeatUnconfirmedUplink(AT_OPERATION_READ, &Value);
	while (1) {
 8000514:	e7fe      	b.n	8000514 <main+0x5c>
 8000516:	bf00      	nop
 8000518:	20000005 	.word	0x20000005

0800051c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b090      	sub	sp, #64	; 0x40
 8000520:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 f91c 	bl	8002768 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000546:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000560:	f107 0318 	add.w	r3, r7, #24
 8000564:	4618      	mov	r0, r3
 8000566:	f000 ff23 	bl	80013b0 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x58>
		Error_Handler();
 8000570:	f000 f8ac 	bl	80006cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2302      	movs	r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000584:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f001 f990 	bl	80018b4 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x82>
		Error_Handler();
 800059a:	f000 f897 	bl	80006cc <Error_Handler>
	}
}
 800059e:	bf00      	nop
 80005a0:	3740      	adds	r7, #64	; 0x40
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART3_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART3_UART_Init+0x4c>)
 80005e0:	f001 faf6 	bl	8001bd0 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80005ea:	f000 f86f 	bl	80006cc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001a8 	.word	0x200001a8
 80005f8:	40004800 	.word	0x40004800

080005fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_DMA_Init+0x38>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <MX_DMA_Init+0x38>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_DMA_Init+0x38>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200d      	movs	r0, #13
 8000620:	f000 faeb 	bl	8000bfa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000624:	200d      	movs	r0, #13
 8000626:	f000 fb04 	bl	8000c32 <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <MX_GPIO_Init+0x8c>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_GPIO_Init+0x8c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4,
 8000694:	2200      	movs	r2, #0
 8000696:	2113      	movs	r1, #19
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_GPIO_Init+0x90>)
 800069a:	f000 fe57 	bl	800134c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 800069e:	2313      	movs	r3, #19
 80006a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_GPIO_Init+0x90>)
 80006b6:	f000 fcc5 	bl	8001044 <HAL_GPIO_Init>

}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010800 	.word	0x40010800

080006cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_MspInit+0x5c>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <HAL_MspInit+0x5c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_MspInit+0x5c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x5c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <HAL_MspInit+0x5c>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x5c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_MspInit+0x60>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_MspInit+0x60>)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000
 8000738:	40010000 	.word	0x40010000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <HAL_UART_MspInit+0xd8>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d157      	bne.n	800080c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <HAL_UART_MspInit+0xdc>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <HAL_UART_MspInit+0xdc>)
 8000762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000766:	61d3      	str	r3, [r2, #28]
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <HAL_UART_MspInit+0xdc>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <HAL_UART_MspInit+0xdc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a27      	ldr	r2, [pc, #156]	; (8000818 <HAL_UART_MspInit+0xdc>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <HAL_UART_MspInit+0xdc>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	481e      	ldr	r0, [pc, #120]	; (800081c <HAL_UART_MspInit+0xe0>)
 80007a2:	f000 fc4f 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <HAL_UART_MspInit+0xe0>)
 80007bc:	f000 fc42 	bl	8001044 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <HAL_UART_MspInit+0xe8>)
 80007c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007e6:	2220      	movs	r2, #32
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <HAL_UART_MspInit+0xe4>)
 80007f2:	f000 fa39 	bl	8000c68 <HAL_DMA_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80007fc:	f7ff ff66 	bl	80006cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_UART_MspInit+0xe4>)
 8000804:	63da      	str	r2, [r3, #60]	; 0x3c
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_UART_MspInit+0xe4>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004800 	.word	0x40004800
 8000818:	40021000 	.word	0x40021000
 800081c:	40010c00 	.word	0x40010c00
 8000820:	200001f0 	.word	0x200001f0
 8000824:	40020030 	.word	0x40020030

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f8ad 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <DMA1_Channel3_IRQHandler+0x10>)
 800087e:	f000 faad 	bl	8000ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001f0 	.word	0x200001f0

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f001 ff1a 	bl	80026f4 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20005000 	.word	0x20005000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	20000234 	.word	0x20000234
 80008f4:	20000250 	.word	0x20000250

080008f8 <Reset_Handler>:

/* Call the clock system initialization function.*/
#    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fa:	490c      	ldr	r1, [pc, #48]	; (800092c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000910:	4c09      	ldr	r4, [pc, #36]	; (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 feef 	bl	8002700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fdc9 	bl	80004b8 <main>
  bx lr
 8000926:	4770      	bx	lr
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000930:	08004010 	.word	0x08004010
  ldr r2, =_sbss
 8000934:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000938:	2000024c 	.word	0x2000024c

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f947 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff febc 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f95f 	bl	8000c4e <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f927 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000010 	.word	0x20000010
 80009c8:	2000000c 	.word	0x2000000c

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000238 	.word	0x20000238

080009f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000238 	.word	0x20000238

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffe0 	bl	80009f0 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000010 	.word	0x20000010

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4906      	ldr	r1, [pc, #24]	; (8000ae4 <__NVIC_EnableIRQ+0x34>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff2d 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff42 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff35 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e043      	b.n	8000d06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_DMA_Init+0xa8>)
 8000c86:	4413      	add	r3, r2
 8000c88:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_DMA_Init+0xac>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	009a      	lsls	r2, r3, #2
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_DMA_Init+0xb0>)
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	bffdfff8 	.word	0xbffdfff8
 8000d14:	cccccccd 	.word	0xcccccccd
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_DMA_Start_IT+0x20>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e04b      	b.n	8000dd4 <HAL_DMA_Start_IT+0xb8>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d13a      	bne.n	8000dc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2202      	movs	r2, #2
 8000d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f000 f937 	bl	8000fe8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f042 020e 	orr.w	r2, r2, #14
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e00f      	b.n	8000db4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0204 	bic.w	r2, r2, #4
 8000da2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 020a 	orr.w	r2, r2, #10
 8000db2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0201 	orr.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e005      	b.n	8000dd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2204      	movs	r2, #4
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d04f      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0xc8>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d04a      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d107      	bne.n	8000e2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0204 	bic.w	r2, r2, #4
 8000e2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a66      	ldr	r2, [pc, #408]	; (8000fcc <HAL_DMA_IRQHandler+0x1f0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d029      	beq.n	8000e8a <HAL_DMA_IRQHandler+0xae>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a65      	ldr	r2, [pc, #404]	; (8000fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d022      	beq.n	8000e86 <HAL_DMA_IRQHandler+0xaa>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a63      	ldr	r2, [pc, #396]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01a      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xa4>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d012      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x9e>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a60      	ldr	r2, [pc, #384]	; (8000fdc <HAL_DMA_IRQHandler+0x200>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00a      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x98>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a5f      	ldr	r2, [pc, #380]	; (8000fe0 <HAL_DMA_IRQHandler+0x204>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d102      	bne.n	8000e6e <HAL_DMA_IRQHandler+0x92>
 8000e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6c:	e00e      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e72:	e00b      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e78:	e008      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7e:	e005      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	e002      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	e000      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	4a55      	ldr	r2, [pc, #340]	; (8000fe4 <HAL_DMA_IRQHandler+0x208>)
 8000e8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8094 	beq.w	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ea2:	e08e      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d056      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x186>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d051      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 020a 	bic.w	r2, r2, #10
 8000eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <HAL_DMA_IRQHandler+0x1f0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d029      	beq.n	8000f42 <HAL_DMA_IRQHandler+0x166>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d022      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x162>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01a      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x15c>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d012      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x156>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <HAL_DMA_IRQHandler+0x200>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00a      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x150>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <HAL_DMA_IRQHandler+0x204>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d102      	bne.n	8000f26 <HAL_DMA_IRQHandler+0x14a>
 8000f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f24:	e00e      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2a:	e00b      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	e008      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f36:	e005      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	e002      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f3e:	2320      	movs	r3, #32
 8000f40:	e000      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f42:	2302      	movs	r3, #2
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <HAL_DMA_IRQHandler+0x208>)
 8000f46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d034      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f60:	e02f      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	2208      	movs	r2, #8
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d028      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x1e8>
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020e 	bic.w	r2, r2, #14
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	4798      	blx	r3
    }
  }
  return;
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
}
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020008 	.word	0x40020008
 8000fd0:	4002001c 	.word	0x4002001c
 8000fd4:	40020030 	.word	0x40020030
 8000fd8:	40020044 	.word	0x40020044
 8000fdc:	40020058 	.word	0x40020058
 8000fe0:	4002006c 	.word	0x4002006c
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d108      	bne.n	8001028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001026:	e007      	b.n	8001038 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	60da      	str	r2, [r3, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e169      	b.n	800132c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001058:	2201      	movs	r2, #1
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8158 	bne.w	8001326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a9a      	ldr	r2, [pc, #616]	; (80012e4 <HAL_GPIO_Init+0x2a0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d05e      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001080:	4a98      	ldr	r2, [pc, #608]	; (80012e4 <HAL_GPIO_Init+0x2a0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d875      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001086:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2a4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d058      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 800108c:	4a96      	ldr	r2, [pc, #600]	; (80012e8 <HAL_GPIO_Init+0x2a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d86f      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001092:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2a8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d052      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001098:	4a94      	ldr	r2, [pc, #592]	; (80012ec <HAL_GPIO_Init+0x2a8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d869      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 800109e:	4a94      	ldr	r2, [pc, #592]	; (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d04c      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010a4:	4a92      	ldr	r2, [pc, #584]	; (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d863      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010aa:	4a92      	ldr	r2, [pc, #584]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d046      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010b0:	4a90      	ldr	r2, [pc, #576]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d85d      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d82a      	bhi.n	8001110 <HAL_GPIO_Init+0xcc>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d859      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010be:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <HAL_GPIO_Init+0x80>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	08001119 	.word	0x08001119
 80010cc:	0800112b 	.word	0x0800112b
 80010d0:	0800116d 	.word	0x0800116d
 80010d4:	08001173 	.word	0x08001173
 80010d8:	08001173 	.word	0x08001173
 80010dc:	08001173 	.word	0x08001173
 80010e0:	08001173 	.word	0x08001173
 80010e4:	08001173 	.word	0x08001173
 80010e8:	08001173 	.word	0x08001173
 80010ec:	08001173 	.word	0x08001173
 80010f0:	08001173 	.word	0x08001173
 80010f4:	08001173 	.word	0x08001173
 80010f8:	08001173 	.word	0x08001173
 80010fc:	08001173 	.word	0x08001173
 8001100:	08001173 	.word	0x08001173
 8001104:	08001173 	.word	0x08001173
 8001108:	08001121 	.word	0x08001121
 800110c:	08001135 	.word	0x08001135
 8001110:	4a79      	ldr	r2, [pc, #484]	; (80012f8 <HAL_GPIO_Init+0x2b4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001116:	e02c      	b.n	8001172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e029      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	3304      	adds	r3, #4
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e024      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	3308      	adds	r3, #8
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e01f      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	330c      	adds	r3, #12
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e01a      	b.n	8001174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001146:	2304      	movs	r3, #4
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e013      	b.n	8001174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	611a      	str	r2, [r3, #16]
          break;
 800115e:	e009      	b.n	8001174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	615a      	str	r2, [r3, #20]
          break;
 800116a:	e003      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x130>
          break;
 8001172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d801      	bhi.n	800117e <HAL_GPIO_Init+0x13a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_Init+0x13e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3304      	adds	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2bff      	cmp	r3, #255	; 0xff
 8001188:	d802      	bhi.n	8001190 <HAL_GPIO_Init+0x14c>
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x152>
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	3b08      	subs	r3, #8
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	210f      	movs	r1, #15
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	6a39      	ldr	r1, [r7, #32]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80b1 	beq.w	8001326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_GPIO_Init+0x2b8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x2b8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x2b8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2bc>)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a40      	ldr	r2, [pc, #256]	; (8001304 <HAL_GPIO_Init+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1ec>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3f      	ldr	r2, [pc, #252]	; (8001308 <HAL_GPIO_Init+0x2c4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1e8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3e      	ldr	r2, [pc, #248]	; (800130c <HAL_GPIO_Init+0x2c8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3d      	ldr	r2, [pc, #244]	; (8001310 <HAL_GPIO_Init+0x2cc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1e0>
 8001220:	2303      	movs	r3, #3
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001224:	2304      	movs	r3, #4
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001230:	2300      	movs	r3, #0
 8001232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001242:	492f      	ldr	r1, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x2bc>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	492c      	ldr	r1, [pc, #176]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4928      	ldr	r1, [pc, #160]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4922      	ldr	r1, [pc, #136]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	43db      	mvns	r3, r3
 800129a:	491e      	ldr	r1, [pc, #120]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800129c:	4013      	ands	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4918      	ldr	r1, [pc, #96]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4914      	ldr	r1, [pc, #80]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d021      	beq.n	8001318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	490e      	ldr	r1, [pc, #56]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e021      	b.n	8001326 <HAL_GPIO_Init+0x2e2>
 80012e2:	bf00      	nop
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10310000 	.word	0x10310000
 80012ec:	10220000 	.word	0x10220000
 80012f0:	10210000 	.word	0x10210000
 80012f4:	10120000 	.word	0x10120000
 80012f8:	10110000 	.word	0x10110000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	40010800 	.word	0x40010800
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40011000 	.word	0x40011000
 8001310:	40011400 	.word	0x40011400
 8001314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_GPIO_Init+0x304>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <HAL_GPIO_Init+0x304>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae8e 	bne.w	8001058 <HAL_GPIO_Init+0x14>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	372c      	adds	r7, #44	; 0x2c
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43d9      	mvns	r1, r3
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	400b      	ands	r3, r1
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	611a      	str	r2, [r3, #16]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e272      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8087 	beq.w	80014de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d00c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013dc:	4b8f      	ldr	r3, [pc, #572]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d112      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
 80013e8:	4b8c      	ldr	r3, [pc, #560]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d10b      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06c      	beq.n	80014dc <HAL_RCC_OscConfig+0x12c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d168      	bne.n	80014dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e24c      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x76>
 8001418:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a7f      	ldr	r2, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e02e      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7a      	ldr	r2, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b78      	ldr	r3, [pc, #480]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a77      	ldr	r2, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e01d      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0xbc>
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a71      	ldr	r2, [pc, #452]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b6f      	ldr	r3, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 800146c:	4b6b      	ldr	r3, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a67      	ldr	r2, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fab0 	bl	80009f0 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff faac 	bl	80009f0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e200      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0xe4>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fa9c 	bl	80009f0 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fa98 	bl	80009f0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1ec      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x10c>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d063      	beq.n	80015b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d11c      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d116      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e1c0      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4939      	ldr	r1, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	e03a      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fa51 	bl	80009f0 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fa4d 	bl	80009f0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1a1      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fa30 	bl	80009f0 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff fa2c 	bl	80009f0 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e180      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03a      	beq.n	8001634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d019      	beq.n	80015fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa10 	bl	80009f0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fa0c 	bl	80009f0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e160      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f000 face 	bl	8001b94 <RCC_Delay>
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff f9f6 	bl	80009f0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	e00f      	b.n	8001628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff f9f2 	bl	80009f0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d908      	bls.n	8001628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e146      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	42420000 	.word	0x42420000
 8001624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e9      	bne.n	8001608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a6 	beq.w	800178e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7e      	ldr	r2, [pc, #504]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff f9b3 	bl	80009f0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff f9af 	bl	80009f0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e103      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b75      	ldr	r3, [pc, #468]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x312>
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e02d      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x334>
 80016ca:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a66      	ldr	r2, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x356>
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a60      	ldr	r2, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a5d      	ldr	r2, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f963 	bl	80009f0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f95f 	bl	80009f0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0b1      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x37e>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff f94d 	bl	80009f0 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff f949 	bl	80009f0 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e09b      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b40      	ldr	r3, [pc, #256]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a3b      	ldr	r2, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8087 	beq.w	80018a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d061      	beq.n	8001868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d146      	bne.n	800183a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff f91d 	bl	80009f0 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f919 	bl	80009f0 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e06d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4921      	ldr	r1, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a19      	ldr	r1, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	430b      	orrs	r3, r1
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff f8ed 	bl	80009f0 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff f8e9 	bl	80009f0 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e03d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x46a>
 8001838:	e035      	b.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff f8d6 	bl	80009f0 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f8d2 	bl	80009f0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e026      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x498>
 8001866:	e01e      	b.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e019      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
 800187c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x500>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	429a      	cmp	r2, r3
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0d0      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d910      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0207 	bic.w	r2, r3, #7
 80018de:	4965      	ldr	r1, [pc, #404]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d040      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e073      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06b      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4936      	ldr	r1, [pc, #216]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff f824 	bl	80009f0 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f820 	bl	80009f0 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e053      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d210      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4922      	ldr	r1, [pc, #136]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1cc>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1d0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe ff82 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08003e2c 	.word	0x08003e2c
 8001a80:	20000008 	.word	0x20000008
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x36>
 8001ab6:	e027      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	613b      	str	r3, [r7, #16]
      break;
 8001abc:	e027      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0c9b      	lsrs	r3, r3, #18
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ac8:	5cd3      	ldrb	r3, [r2, r3]
 8001aca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d010      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0c5b      	lsrs	r3, r3, #17
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aea:	fb03 f202 	mul.w	r2, r3, r2
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e004      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	613b      	str	r3, [r7, #16]
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0a:	613b      	str	r3, [r7, #16]
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	693b      	ldr	r3, [r7, #16]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	007a1200 	.word	0x007a1200
 8001b24:	08003e44 	.word	0x08003e44
 8001b28:	08003e54 	.word	0x08003e54
 8001b2c:	003d0900 	.word	0x003d0900

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff2 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08003e3c 	.word	0x08003e3c

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0adb      	lsrs	r3, r3, #11
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08003e3c 	.word	0x08003e3c

08001b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <RCC_Delay+0x34>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <RCC_Delay+0x38>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb0:	bf00      	nop
  }
  while (Delay --);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1e5a      	subs	r2, r3, #1
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <RCC_Delay+0x1c>
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	10624dd3 	.word	0x10624dd3

08001bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e042      	b.n	8001c68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fda0 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fcdf 	bl	80025d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d16d      	bne.n	8001d6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_UART_Transmit+0x2c>
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e066      	b.n	8001d6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2221      	movs	r2, #33	; 0x21
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cae:	f7fe fe9f 	bl	80009f0 <HAL_GetTick>
 8001cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc8:	d108      	bne.n	8001cdc <HAL_UART_Transmit+0x6c>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d104      	bne.n	8001cdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	e003      	b.n	8001ce4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ce4:	e02a      	b.n	8001d3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fadf 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e036      	b.n	8001d6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10b      	bne.n	8001d1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e007      	b.n	8001d2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1cf      	bne.n	8001ce6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 faaf 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e006      	b.n	8001d6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e000      	b.n	8001d6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b09d      	sub	sp, #116	; 0x74
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	66fb      	str	r3, [r7, #108]	; 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b21      	cmp	r3, #33	; 0x21
 8001da2:	d11c      	bne.n	8001dde <HAL_UART_DMAPause+0x68>
 8001da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d019      	beq.n	8001dde <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3314      	adds	r3, #20
 8001db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db4:	e853 3f00 	ldrex	r3, [r3]
 8001db8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3314      	adds	r3, #20
 8001dc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001dca:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dcc:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dd2:	e841 2300 	strex	r3, r2, [r1]
 8001dd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e5      	bne.n	8001daa <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b22      	cmp	r3, #34	; 0x22
 8001dfe:	d150      	bne.n	8001ea2 <HAL_UART_DMAPause+0x12c>
 8001e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d04d      	beq.n	8001ea2 <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	330c      	adds	r3, #12
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	e853 3f00 	ldrex	r3, [r3]
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	330c      	adds	r3, #12
 8001e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e26:	647a      	str	r2, [r7, #68]	; 0x44
 8001e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e2e:	e841 2300 	strex	r3, r2, [r1]
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1e5      	bne.n	8001e06 <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	e853 3f00 	ldrex	r3, [r3]
 8001e48:	623b      	str	r3, [r7, #32]
   return(result);
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	663b      	str	r3, [r7, #96]	; 0x60
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3314      	adds	r3, #20
 8001e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e62:	e841 2300 	strex	r3, r2, [r1]
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e5      	bne.n	8001e3a <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3314      	adds	r3, #20
 8001e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	e853 3f00 	ldrex	r3, [r3]
 8001e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e8e:	61fa      	str	r2, [r7, #28]
 8001e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	e841 2300 	strex	r3, r2, [r1]
 8001e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e5      	bne.n	8001e6e <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3774      	adds	r7, #116	; 0x74
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b09d      	sub	sp, #116	; 0x74
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b21      	cmp	r3, #33	; 0x21
 8001ec0:	d119      	bne.n	8001ef6 <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ecc:	e853 3f00 	ldrex	r3, [r3]
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ee2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ee4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001eea:	e841 2300 	strex	r3, r2, [r1]
 8001eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e5      	bne.n	8001ec2 <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b22      	cmp	r3, #34	; 0x22
 8001f00:	d15c      	bne.n	8001fbc <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d019      	beq.n	8001f54 <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	330c      	adds	r3, #12
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2a:	e853 3f00 	ldrex	r3, [r3]
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f40:	64ba      	str	r2, [r7, #72]	; 0x48
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f48:	e841 2300 	strex	r3, r2, [r1]
 8001f4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e5      	bne.n	8001f20 <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	e853 3f00 	ldrex	r3, [r3]
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3314      	adds	r3, #20
 8001f72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f74:	637a      	str	r2, [r7, #52]	; 0x34
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f7c:	e841 2300 	strex	r3, r2, [r1]
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e5      	bne.n	8001f54 <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	e853 3f00 	ldrex	r3, [r3]
 8001f96:	613b      	str	r3, [r7, #16]
   return(result);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3314      	adds	r3, #20
 8001fa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fa8:	623a      	str	r2, [r7, #32]
 8001faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fac:	69f9      	ldr	r1, [r7, #28]
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	e841 2300 	strex	r3, r2, [r1]
 8001fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e5      	bne.n	8001f88 <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3774      	adds	r7, #116	; 0x74
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d14a      	bne.n	8002078 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e043      	b.n	800207a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	461a      	mov	r2, r3
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f9c3 	bl	8002390 <UART_Start_Receive_DMA>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002014:	2b00      	cmp	r3, #0
 8002016:	d12c      	bne.n	8002072 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2b01      	cmp	r3, #1
 800201e:	d125      	bne.n	800206c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	e853 3f00 	ldrex	r3, [r3]
 8002044:	617b      	str	r3, [r7, #20]
   return(result);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	330c      	adds	r3, #12
 8002054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002056:	627a      	str	r2, [r7, #36]	; 0x24
 8002058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205a:	6a39      	ldr	r1, [r7, #32]
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	e841 2300 	strex	r3, r2, [r1]
 8002062:	61fb      	str	r3, [r7, #28]
   return(result);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1e5      	bne.n	8002036 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800206a:	e002      	b.n	8002072 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002076:	e000      	b.n	800207a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3730      	adds	r7, #48	; 0x30
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b09c      	sub	sp, #112	; 0x70
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d172      	bne.n	80021ba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	2200      	movs	r2, #0
 80020d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	330c      	adds	r3, #12
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80020f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80020fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e5      	bne.n	80020da <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3314      	adds	r3, #20
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	e853 3f00 	ldrex	r3, [r3]
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	667b      	str	r3, [r7, #100]	; 0x64
 8002126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3314      	adds	r3, #20
 800212c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800212e:	647a      	str	r2, [r7, #68]	; 0x44
 8002130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e5      	bne.n	800210e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3314      	adds	r3, #20
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	e853 3f00 	ldrex	r3, [r3]
 8002150:	623b      	str	r3, [r7, #32]
   return(result);
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002158:	663b      	str	r3, [r7, #96]	; 0x60
 800215a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3314      	adds	r3, #20
 8002160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002162:	633a      	str	r2, [r7, #48]	; 0x30
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216a:	e841 2300 	strex	r3, r2, [r1]
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1e5      	bne.n	8002142 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800217e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	2b01      	cmp	r3, #1
 8002184:	d119      	bne.n	80021ba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	e853 3f00 	ldrex	r3, [r3]
 8002194:	60fb      	str	r3, [r7, #12]
   return(result);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f023 0310 	bic.w	r3, r3, #16
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021a6:	61fa      	str	r2, [r7, #28]
 80021a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	e841 2300 	strex	r3, r2, [r1]
 80021b2:	617b      	str	r3, [r7, #20]
   return(result);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1e5      	bne.n	8002186 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021cc:	4619      	mov	r1, r3
 80021ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80021d0:	f7fd ffc4 	bl	800015c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80021d4:	e002      	b.n	80021dc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80021d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80021d8:	f7ff ff53 	bl	8002082 <HAL_UART_RxCpltCallback>
}
 80021dc:	bf00      	nop
 80021de:	3770      	adds	r7, #112	; 0x70
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fd ffa6 	bl	800015c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002210:	e002      	b.n	8002218 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff ff3e 	bl	8002094 <HAL_UART_RxHalfCpltCallback>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b21      	cmp	r3, #33	; 0x21
 8002252:	d108      	bne.n	8002266 <UART_DMAError+0x46>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f000 f92f 	bl	80024c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b22      	cmp	r3, #34	; 0x22
 8002286:	d108      	bne.n	800229a <UART_DMAError+0x7a>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2200      	movs	r2, #0
 8002292:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002294:	68b8      	ldr	r0, [r7, #8]
 8002296:	f000 f93c 	bl	8002512 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022a6:	68b8      	ldr	r0, [r7, #8]
 80022a8:	f7ff fefd 	bl	80020a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b090      	sub	sp, #64	; 0x40
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c4:	e050      	b.n	8002368 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d04c      	beq.n	8002368 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80022d4:	f7fe fb8c 	bl	80009f0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d241      	bcs.n	8002368 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002304:	637a      	str	r2, [r7, #52]	; 0x34
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800230a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e5      	bne.n	80022e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3314      	adds	r3, #20
 800231e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	e853 3f00 	ldrex	r3, [r3]
 8002326:	613b      	str	r3, [r7, #16]
   return(result);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3314      	adds	r3, #20
 8002336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002338:	623a      	str	r2, [r7, #32]
 800233a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233c:	69f9      	ldr	r1, [r7, #28]
 800233e:	6a3a      	ldr	r2, [r7, #32]
 8002340:	e841 2300 	strex	r3, r2, [r1]
 8002344:	61bb      	str	r3, [r7, #24]
   return(result);
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e5      	bne.n	8002318 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e00f      	b.n	8002388 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4013      	ands	r3, r2
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	429a      	cmp	r2, r3
 8002384:	d09f      	beq.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3740      	adds	r7, #64	; 0x40
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b098      	sub	sp, #96	; 0x60
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2222      	movs	r2, #34	; 0x22
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <UART_Start_Receive_DMA+0x128>)
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <UART_Start_Receive_DMA+0x12c>)
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <UART_Start_Receive_DMA+0x130>)
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2200      	movs	r2, #0
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3304      	adds	r3, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f7fe fc94 	bl	8000d1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	65bb      	str	r3, [r7, #88]	; 0x58
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	330c      	adds	r3, #12
 8002430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002432:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e5      	bne.n	8002412 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	657b      	str	r3, [r7, #84]	; 0x54
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3314      	adds	r3, #20
 8002464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002466:	63ba      	str	r2, [r7, #56]	; 0x38
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800246c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800246e:	e841 2300 	strex	r3, r2, [r1]
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e5      	bne.n	8002446 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3314      	adds	r3, #20
 8002480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	617b      	str	r3, [r7, #20]
   return(result);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002490:	653b      	str	r3, [r7, #80]	; 0x50
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3314      	adds	r3, #20
 8002498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800249a:	627a      	str	r2, [r7, #36]	; 0x24
 800249c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e5      	bne.n	800247a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3760      	adds	r7, #96	; 0x60
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	080020b9 	.word	0x080020b9
 80024bc:	080021e5 	.word	0x080021e5
 80024c0:	08002221 	.word	0x08002221

080024c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	e853 3f00 	ldrex	r3, [r3]
 80024da:	60bb      	str	r3, [r7, #8]
   return(result);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	61ba      	str	r2, [r7, #24]
 80024ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	6979      	ldr	r1, [r7, #20]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	e841 2300 	strex	r3, r2, [r1]
 80024f8:	613b      	str	r3, [r7, #16]
   return(result);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e5      	bne.n	80024cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002508:	bf00      	nop
 800250a:	3724      	adds	r7, #36	; 0x24
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002512:	b480      	push	{r7}
 8002514:	b095      	sub	sp, #84	; 0x54
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800253a:	643a      	str	r2, [r7, #64]	; 0x40
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e5      	bne.n	800251a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3314      	adds	r3, #20
 8002554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	61fb      	str	r3, [r7, #28]
   return(result);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800256e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e5      	bne.n	800254e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	2b01      	cmp	r3, #1
 8002588:	d119      	bne.n	80025be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	60bb      	str	r3, [r7, #8]
   return(result);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025aa:	61ba      	str	r2, [r7, #24]
 80025ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	e841 2300 	strex	r3, r2, [r1]
 80025b6:	613b      	str	r3, [r7, #16]
   return(result);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e5      	bne.n	800258a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025cc:	bf00      	nop
 80025ce:	3754      	adds	r7, #84	; 0x54
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002612:	f023 030c 	bic.w	r3, r3, #12
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <UART_SetConfig+0x114>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff fa94 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	e002      	b.n	800264e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002648:	f7ff fa7c 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 800264c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	009a      	lsls	r2, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <UART_SetConfig+0x118>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	0119      	lsls	r1, r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb2 f2f3 	udiv	r2, r2, r3
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <UART_SetConfig+0x118>)
 8002686:	fba3 0302 	umull	r0, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2064      	movs	r0, #100	; 0x64
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	3332      	adds	r3, #50	; 0x32
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <UART_SetConfig+0x118>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a4:	4419      	add	r1, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009a      	lsls	r2, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <UART_SetConfig+0x118>)
 80026be:	fba3 0302 	umull	r0, r3, r3, r2
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2064      	movs	r0, #100	; 0x64
 80026c6:	fb00 f303 	mul.w	r3, r0, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	3332      	adds	r3, #50	; 0x32
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <UART_SetConfig+0x118>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	440a      	add	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40013800 	.word	0x40013800
 80026f0:	51eb851f 	.word	0x51eb851f

080026f4 <__errno>:
 80026f4:	4b01      	ldr	r3, [pc, #4]	; (80026fc <__errno+0x8>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000014 	.word	0x20000014

08002700 <__libc_init_array>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	2600      	movs	r6, #0
 8002704:	4d0c      	ldr	r5, [pc, #48]	; (8002738 <__libc_init_array+0x38>)
 8002706:	4c0d      	ldr	r4, [pc, #52]	; (800273c <__libc_init_array+0x3c>)
 8002708:	1b64      	subs	r4, r4, r5
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	42a6      	cmp	r6, r4
 800270e:	d109      	bne.n	8002724 <__libc_init_array+0x24>
 8002710:	f001 f960 	bl	80039d4 <_init>
 8002714:	2600      	movs	r6, #0
 8002716:	4d0a      	ldr	r5, [pc, #40]	; (8002740 <__libc_init_array+0x40>)
 8002718:	4c0a      	ldr	r4, [pc, #40]	; (8002744 <__libc_init_array+0x44>)
 800271a:	1b64      	subs	r4, r4, r5
 800271c:	10a4      	asrs	r4, r4, #2
 800271e:	42a6      	cmp	r6, r4
 8002720:	d105      	bne.n	800272e <__libc_init_array+0x2e>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
 8002724:	f855 3b04 	ldr.w	r3, [r5], #4
 8002728:	4798      	blx	r3
 800272a:	3601      	adds	r6, #1
 800272c:	e7ee      	b.n	800270c <__libc_init_array+0xc>
 800272e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002732:	4798      	blx	r3
 8002734:	3601      	adds	r6, #1
 8002736:	e7f2      	b.n	800271e <__libc_init_array+0x1e>
 8002738:	08004008 	.word	0x08004008
 800273c:	08004008 	.word	0x08004008
 8002740:	08004008 	.word	0x08004008
 8002744:	0800400c 	.word	0x0800400c

08002748 <memcmp>:
 8002748:	b510      	push	{r4, lr}
 800274a:	3901      	subs	r1, #1
 800274c:	4402      	add	r2, r0
 800274e:	4290      	cmp	r0, r2
 8002750:	d101      	bne.n	8002756 <memcmp+0xe>
 8002752:	2000      	movs	r0, #0
 8002754:	e005      	b.n	8002762 <memcmp+0x1a>
 8002756:	7803      	ldrb	r3, [r0, #0]
 8002758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800275c:	42a3      	cmp	r3, r4
 800275e:	d001      	beq.n	8002764 <memcmp+0x1c>
 8002760:	1b18      	subs	r0, r3, r4
 8002762:	bd10      	pop	{r4, pc}
 8002764:	3001      	adds	r0, #1
 8002766:	e7f2      	b.n	800274e <memcmp+0x6>

08002768 <memset>:
 8002768:	4603      	mov	r3, r0
 800276a:	4402      	add	r2, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <siprintf>:
 8002778:	b40e      	push	{r1, r2, r3}
 800277a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800277e:	b500      	push	{lr}
 8002780:	b09c      	sub	sp, #112	; 0x70
 8002782:	ab1d      	add	r3, sp, #116	; 0x74
 8002784:	9002      	str	r0, [sp, #8]
 8002786:	9006      	str	r0, [sp, #24]
 8002788:	9107      	str	r1, [sp, #28]
 800278a:	9104      	str	r1, [sp, #16]
 800278c:	4808      	ldr	r0, [pc, #32]	; (80027b0 <siprintf+0x38>)
 800278e:	4909      	ldr	r1, [pc, #36]	; (80027b4 <siprintf+0x3c>)
 8002790:	f853 2b04 	ldr.w	r2, [r3], #4
 8002794:	9105      	str	r1, [sp, #20]
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	a902      	add	r1, sp, #8
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f000 f894 	bl	80028c8 <_svfiprintf_r>
 80027a0:	2200      	movs	r2, #0
 80027a2:	9b02      	ldr	r3, [sp, #8]
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	b01c      	add	sp, #112	; 0x70
 80027a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80027ac:	b003      	add	sp, #12
 80027ae:	4770      	bx	lr
 80027b0:	20000014 	.word	0x20000014
 80027b4:	ffff0208 	.word	0xffff0208

080027b8 <siscanf>:
 80027b8:	b40e      	push	{r1, r2, r3}
 80027ba:	f44f 7201 	mov.w	r2, #516	; 0x204
 80027be:	b530      	push	{r4, r5, lr}
 80027c0:	b09c      	sub	sp, #112	; 0x70
 80027c2:	ac1f      	add	r4, sp, #124	; 0x7c
 80027c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80027c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80027cc:	9002      	str	r0, [sp, #8]
 80027ce:	9006      	str	r0, [sp, #24]
 80027d0:	f7fd fcbc 	bl	800014c <strlen>
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <siscanf+0x4c>)
 80027d6:	9003      	str	r0, [sp, #12]
 80027d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80027da:	2300      	movs	r3, #0
 80027dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80027de:	9314      	str	r3, [sp, #80]	; 0x50
 80027e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e4:	9007      	str	r0, [sp, #28]
 80027e6:	4808      	ldr	r0, [pc, #32]	; (8002808 <siscanf+0x50>)
 80027e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80027ec:	462a      	mov	r2, r5
 80027ee:	4623      	mov	r3, r4
 80027f0:	a902      	add	r1, sp, #8
 80027f2:	6800      	ldr	r0, [r0, #0]
 80027f4:	9401      	str	r4, [sp, #4]
 80027f6:	f000 f9c1 	bl	8002b7c <__ssvfiscanf_r>
 80027fa:	b01c      	add	sp, #112	; 0x70
 80027fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002800:	b003      	add	sp, #12
 8002802:	4770      	bx	lr
 8002804:	0800280d 	.word	0x0800280d
 8002808:	20000014 	.word	0x20000014

0800280c <__seofread>:
 800280c:	2000      	movs	r0, #0
 800280e:	4770      	bx	lr

08002810 <__ssputs_r>:
 8002810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002814:	688e      	ldr	r6, [r1, #8]
 8002816:	4682      	mov	sl, r0
 8002818:	429e      	cmp	r6, r3
 800281a:	460c      	mov	r4, r1
 800281c:	4690      	mov	r8, r2
 800281e:	461f      	mov	r7, r3
 8002820:	d838      	bhi.n	8002894 <__ssputs_r+0x84>
 8002822:	898a      	ldrh	r2, [r1, #12]
 8002824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002828:	d032      	beq.n	8002890 <__ssputs_r+0x80>
 800282a:	6825      	ldr	r5, [r4, #0]
 800282c:	6909      	ldr	r1, [r1, #16]
 800282e:	3301      	adds	r3, #1
 8002830:	eba5 0901 	sub.w	r9, r5, r1
 8002834:	6965      	ldr	r5, [r4, #20]
 8002836:	444b      	add	r3, r9
 8002838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800283c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002840:	106d      	asrs	r5, r5, #1
 8002842:	429d      	cmp	r5, r3
 8002844:	bf38      	it	cc
 8002846:	461d      	movcc	r5, r3
 8002848:	0553      	lsls	r3, r2, #21
 800284a:	d531      	bpl.n	80028b0 <__ssputs_r+0xa0>
 800284c:	4629      	mov	r1, r5
 800284e:	f000 fff9 	bl	8003844 <_malloc_r>
 8002852:	4606      	mov	r6, r0
 8002854:	b950      	cbnz	r0, 800286c <__ssputs_r+0x5c>
 8002856:	230c      	movs	r3, #12
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f8ca 3000 	str.w	r3, [sl]
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800286c:	464a      	mov	r2, r9
 800286e:	6921      	ldr	r1, [r4, #16]
 8002870:	f000 ff58 	bl	8003724 <memcpy>
 8002874:	89a3      	ldrh	r3, [r4, #12]
 8002876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	81a3      	strh	r3, [r4, #12]
 8002880:	6126      	str	r6, [r4, #16]
 8002882:	444e      	add	r6, r9
 8002884:	6026      	str	r6, [r4, #0]
 8002886:	463e      	mov	r6, r7
 8002888:	6165      	str	r5, [r4, #20]
 800288a:	eba5 0509 	sub.w	r5, r5, r9
 800288e:	60a5      	str	r5, [r4, #8]
 8002890:	42be      	cmp	r6, r7
 8002892:	d900      	bls.n	8002896 <__ssputs_r+0x86>
 8002894:	463e      	mov	r6, r7
 8002896:	4632      	mov	r2, r6
 8002898:	4641      	mov	r1, r8
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	f000 ff50 	bl	8003740 <memmove>
 80028a0:	68a3      	ldr	r3, [r4, #8]
 80028a2:	2000      	movs	r0, #0
 80028a4:	1b9b      	subs	r3, r3, r6
 80028a6:	60a3      	str	r3, [r4, #8]
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	4433      	add	r3, r6
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	e7db      	b.n	8002868 <__ssputs_r+0x58>
 80028b0:	462a      	mov	r2, r5
 80028b2:	f001 f83b 	bl	800392c <_realloc_r>
 80028b6:	4606      	mov	r6, r0
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1e1      	bne.n	8002880 <__ssputs_r+0x70>
 80028bc:	4650      	mov	r0, sl
 80028be:	6921      	ldr	r1, [r4, #16]
 80028c0:	f000 ff58 	bl	8003774 <_free_r>
 80028c4:	e7c7      	b.n	8002856 <__ssputs_r+0x46>
	...

080028c8 <_svfiprintf_r>:
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	4698      	mov	r8, r3
 80028ce:	898b      	ldrh	r3, [r1, #12]
 80028d0:	4607      	mov	r7, r0
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	460d      	mov	r5, r1
 80028d6:	4614      	mov	r4, r2
 80028d8:	b09d      	sub	sp, #116	; 0x74
 80028da:	d50e      	bpl.n	80028fa <_svfiprintf_r+0x32>
 80028dc:	690b      	ldr	r3, [r1, #16]
 80028de:	b963      	cbnz	r3, 80028fa <_svfiprintf_r+0x32>
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	f000 ffaf 	bl	8003844 <_malloc_r>
 80028e6:	6028      	str	r0, [r5, #0]
 80028e8:	6128      	str	r0, [r5, #16]
 80028ea:	b920      	cbnz	r0, 80028f6 <_svfiprintf_r+0x2e>
 80028ec:	230c      	movs	r3, #12
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	e0d1      	b.n	8002a9a <_svfiprintf_r+0x1d2>
 80028f6:	2340      	movs	r3, #64	; 0x40
 80028f8:	616b      	str	r3, [r5, #20]
 80028fa:	2300      	movs	r3, #0
 80028fc:	9309      	str	r3, [sp, #36]	; 0x24
 80028fe:	2320      	movs	r3, #32
 8002900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002904:	2330      	movs	r3, #48	; 0x30
 8002906:	f04f 0901 	mov.w	r9, #1
 800290a:	f8cd 800c 	str.w	r8, [sp, #12]
 800290e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ab4 <_svfiprintf_r+0x1ec>
 8002912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002916:	4623      	mov	r3, r4
 8002918:	469a      	mov	sl, r3
 800291a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800291e:	b10a      	cbz	r2, 8002924 <_svfiprintf_r+0x5c>
 8002920:	2a25      	cmp	r2, #37	; 0x25
 8002922:	d1f9      	bne.n	8002918 <_svfiprintf_r+0x50>
 8002924:	ebba 0b04 	subs.w	fp, sl, r4
 8002928:	d00b      	beq.n	8002942 <_svfiprintf_r+0x7a>
 800292a:	465b      	mov	r3, fp
 800292c:	4622      	mov	r2, r4
 800292e:	4629      	mov	r1, r5
 8002930:	4638      	mov	r0, r7
 8002932:	f7ff ff6d 	bl	8002810 <__ssputs_r>
 8002936:	3001      	adds	r0, #1
 8002938:	f000 80aa 	beq.w	8002a90 <_svfiprintf_r+0x1c8>
 800293c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800293e:	445a      	add	r2, fp
 8002940:	9209      	str	r2, [sp, #36]	; 0x24
 8002942:	f89a 3000 	ldrb.w	r3, [sl]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80a2 	beq.w	8002a90 <_svfiprintf_r+0x1c8>
 800294c:	2300      	movs	r3, #0
 800294e:	f04f 32ff 	mov.w	r2, #4294967295
 8002952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002956:	f10a 0a01 	add.w	sl, sl, #1
 800295a:	9304      	str	r3, [sp, #16]
 800295c:	9307      	str	r3, [sp, #28]
 800295e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002962:	931a      	str	r3, [sp, #104]	; 0x68
 8002964:	4654      	mov	r4, sl
 8002966:	2205      	movs	r2, #5
 8002968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800296c:	4851      	ldr	r0, [pc, #324]	; (8002ab4 <_svfiprintf_r+0x1ec>)
 800296e:	f000 fecb 	bl	8003708 <memchr>
 8002972:	9a04      	ldr	r2, [sp, #16]
 8002974:	b9d8      	cbnz	r0, 80029ae <_svfiprintf_r+0xe6>
 8002976:	06d0      	lsls	r0, r2, #27
 8002978:	bf44      	itt	mi
 800297a:	2320      	movmi	r3, #32
 800297c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002980:	0711      	lsls	r1, r2, #28
 8002982:	bf44      	itt	mi
 8002984:	232b      	movmi	r3, #43	; 0x2b
 8002986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800298a:	f89a 3000 	ldrb.w	r3, [sl]
 800298e:	2b2a      	cmp	r3, #42	; 0x2a
 8002990:	d015      	beq.n	80029be <_svfiprintf_r+0xf6>
 8002992:	4654      	mov	r4, sl
 8002994:	2000      	movs	r0, #0
 8002996:	f04f 0c0a 	mov.w	ip, #10
 800299a:	9a07      	ldr	r2, [sp, #28]
 800299c:	4621      	mov	r1, r4
 800299e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029a2:	3b30      	subs	r3, #48	; 0x30
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d94e      	bls.n	8002a46 <_svfiprintf_r+0x17e>
 80029a8:	b1b0      	cbz	r0, 80029d8 <_svfiprintf_r+0x110>
 80029aa:	9207      	str	r2, [sp, #28]
 80029ac:	e014      	b.n	80029d8 <_svfiprintf_r+0x110>
 80029ae:	eba0 0308 	sub.w	r3, r0, r8
 80029b2:	fa09 f303 	lsl.w	r3, r9, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	46a2      	mov	sl, r4
 80029ba:	9304      	str	r3, [sp, #16]
 80029bc:	e7d2      	b.n	8002964 <_svfiprintf_r+0x9c>
 80029be:	9b03      	ldr	r3, [sp, #12]
 80029c0:	1d19      	adds	r1, r3, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	9103      	str	r1, [sp, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bfbb      	ittet	lt
 80029ca:	425b      	neglt	r3, r3
 80029cc:	f042 0202 	orrlt.w	r2, r2, #2
 80029d0:	9307      	strge	r3, [sp, #28]
 80029d2:	9307      	strlt	r3, [sp, #28]
 80029d4:	bfb8      	it	lt
 80029d6:	9204      	strlt	r2, [sp, #16]
 80029d8:	7823      	ldrb	r3, [r4, #0]
 80029da:	2b2e      	cmp	r3, #46	; 0x2e
 80029dc:	d10c      	bne.n	80029f8 <_svfiprintf_r+0x130>
 80029de:	7863      	ldrb	r3, [r4, #1]
 80029e0:	2b2a      	cmp	r3, #42	; 0x2a
 80029e2:	d135      	bne.n	8002a50 <_svfiprintf_r+0x188>
 80029e4:	9b03      	ldr	r3, [sp, #12]
 80029e6:	3402      	adds	r4, #2
 80029e8:	1d1a      	adds	r2, r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	9203      	str	r2, [sp, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bfb8      	it	lt
 80029f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80029f6:	9305      	str	r3, [sp, #20]
 80029f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002ab8 <_svfiprintf_r+0x1f0>
 80029fc:	2203      	movs	r2, #3
 80029fe:	4650      	mov	r0, sl
 8002a00:	7821      	ldrb	r1, [r4, #0]
 8002a02:	f000 fe81 	bl	8003708 <memchr>
 8002a06:	b140      	cbz	r0, 8002a1a <_svfiprintf_r+0x152>
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	eba0 000a 	sub.w	r0, r0, sl
 8002a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002a12:	9b04      	ldr	r3, [sp, #16]
 8002a14:	3401      	adds	r4, #1
 8002a16:	4303      	orrs	r3, r0
 8002a18:	9304      	str	r3, [sp, #16]
 8002a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a1e:	2206      	movs	r2, #6
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <_svfiprintf_r+0x1f4>)
 8002a22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a26:	f000 fe6f 	bl	8003708 <memchr>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d038      	beq.n	8002aa0 <_svfiprintf_r+0x1d8>
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <_svfiprintf_r+0x1f8>)
 8002a30:	bb1b      	cbnz	r3, 8002a7a <_svfiprintf_r+0x1b2>
 8002a32:	9b03      	ldr	r3, [sp, #12]
 8002a34:	3307      	adds	r3, #7
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	9303      	str	r3, [sp, #12]
 8002a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a40:	4433      	add	r3, r6
 8002a42:	9309      	str	r3, [sp, #36]	; 0x24
 8002a44:	e767      	b.n	8002916 <_svfiprintf_r+0x4e>
 8002a46:	460c      	mov	r4, r1
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a4e:	e7a5      	b.n	800299c <_svfiprintf_r+0xd4>
 8002a50:	2300      	movs	r3, #0
 8002a52:	f04f 0c0a 	mov.w	ip, #10
 8002a56:	4619      	mov	r1, r3
 8002a58:	3401      	adds	r4, #1
 8002a5a:	9305      	str	r3, [sp, #20]
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a62:	3a30      	subs	r2, #48	; 0x30
 8002a64:	2a09      	cmp	r2, #9
 8002a66:	d903      	bls.n	8002a70 <_svfiprintf_r+0x1a8>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0c5      	beq.n	80029f8 <_svfiprintf_r+0x130>
 8002a6c:	9105      	str	r1, [sp, #20]
 8002a6e:	e7c3      	b.n	80029f8 <_svfiprintf_r+0x130>
 8002a70:	4604      	mov	r4, r0
 8002a72:	2301      	movs	r3, #1
 8002a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a78:	e7f0      	b.n	8002a5c <_svfiprintf_r+0x194>
 8002a7a:	ab03      	add	r3, sp, #12
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	462a      	mov	r2, r5
 8002a80:	4638      	mov	r0, r7
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <_svfiprintf_r+0x1fc>)
 8002a84:	a904      	add	r1, sp, #16
 8002a86:	f3af 8000 	nop.w
 8002a8a:	1c42      	adds	r2, r0, #1
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	d1d6      	bne.n	8002a3e <_svfiprintf_r+0x176>
 8002a90:	89ab      	ldrh	r3, [r5, #12]
 8002a92:	065b      	lsls	r3, r3, #25
 8002a94:	f53f af2c 	bmi.w	80028f0 <_svfiprintf_r+0x28>
 8002a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a9a:	b01d      	add	sp, #116	; 0x74
 8002a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa0:	ab03      	add	r3, sp, #12
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <_svfiprintf_r+0x1fc>)
 8002aaa:	a904      	add	r1, sp, #16
 8002aac:	f000 fa50 	bl	8002f50 <_printf_i>
 8002ab0:	e7eb      	b.n	8002a8a <_svfiprintf_r+0x1c2>
 8002ab2:	bf00      	nop
 8002ab4:	08003e56 	.word	0x08003e56
 8002ab8:	08003e5c 	.word	0x08003e5c
 8002abc:	08003e60 	.word	0x08003e60
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	08002811 	.word	0x08002811

08002ac8 <_sungetc_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	1c4b      	adds	r3, r1, #1
 8002acc:	4614      	mov	r4, r2
 8002ace:	d103      	bne.n	8002ad8 <_sungetc_r+0x10>
 8002ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
 8002ad8:	8993      	ldrh	r3, [r2, #12]
 8002ada:	b2cd      	uxtb	r5, r1
 8002adc:	f023 0320 	bic.w	r3, r3, #32
 8002ae0:	8193      	strh	r3, [r2, #12]
 8002ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ae4:	6852      	ldr	r2, [r2, #4]
 8002ae6:	b18b      	cbz	r3, 8002b0c <_sungetc_r+0x44>
 8002ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aea:	4293      	cmp	r3, r2
 8002aec:	dd08      	ble.n	8002b00 <_sungetc_r+0x38>
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	6022      	str	r2, [r4, #0]
 8002af4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	6063      	str	r3, [r4, #4]
 8002afe:	e7e9      	b.n	8002ad4 <_sungetc_r+0xc>
 8002b00:	4621      	mov	r1, r4
 8002b02:	f000 fdc7 	bl	8003694 <__submore>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d0f1      	beq.n	8002aee <_sungetc_r+0x26>
 8002b0a:	e7e1      	b.n	8002ad0 <_sungetc_r+0x8>
 8002b0c:	6921      	ldr	r1, [r4, #16]
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	b151      	cbz	r1, 8002b28 <_sungetc_r+0x60>
 8002b12:	4299      	cmp	r1, r3
 8002b14:	d208      	bcs.n	8002b28 <_sungetc_r+0x60>
 8002b16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002b1a:	42a9      	cmp	r1, r5
 8002b1c:	d104      	bne.n	8002b28 <_sungetc_r+0x60>
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	3201      	adds	r2, #1
 8002b22:	6023      	str	r3, [r4, #0]
 8002b24:	6062      	str	r2, [r4, #4]
 8002b26:	e7d5      	b.n	8002ad4 <_sungetc_r+0xc>
 8002b28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b30:	6363      	str	r3, [r4, #52]	; 0x34
 8002b32:	2303      	movs	r3, #3
 8002b34:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b36:	4623      	mov	r3, r4
 8002b38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e7dc      	b.n	8002afc <_sungetc_r+0x34>

08002b42 <__ssrefill_r>:
 8002b42:	b510      	push	{r4, lr}
 8002b44:	460c      	mov	r4, r1
 8002b46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002b48:	b169      	cbz	r1, 8002b66 <__ssrefill_r+0x24>
 8002b4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b4e:	4299      	cmp	r1, r3
 8002b50:	d001      	beq.n	8002b56 <__ssrefill_r+0x14>
 8002b52:	f000 fe0f 	bl	8003774 <_free_r>
 8002b56:	2000      	movs	r0, #0
 8002b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b5a:	6360      	str	r0, [r4, #52]	; 0x34
 8002b5c:	6063      	str	r3, [r4, #4]
 8002b5e:	b113      	cbz	r3, 8002b66 <__ssrefill_r+0x24>
 8002b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6063      	str	r3, [r4, #4]
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	f043 0320 	orr.w	r3, r3, #32
 8002b78:	81a3      	strh	r3, [r4, #12]
 8002b7a:	e7f3      	b.n	8002b64 <__ssrefill_r+0x22>

08002b7c <__ssvfiscanf_r>:
 8002b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b80:	460c      	mov	r4, r1
 8002b82:	2100      	movs	r1, #0
 8002b84:	4606      	mov	r6, r0
 8002b86:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002b8a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002b8e:	49a7      	ldr	r1, [pc, #668]	; (8002e2c <__ssvfiscanf_r+0x2b0>)
 8002b90:	f10d 0804 	add.w	r8, sp, #4
 8002b94:	91a0      	str	r1, [sp, #640]	; 0x280
 8002b96:	49a6      	ldr	r1, [pc, #664]	; (8002e30 <__ssvfiscanf_r+0x2b4>)
 8002b98:	4fa6      	ldr	r7, [pc, #664]	; (8002e34 <__ssvfiscanf_r+0x2b8>)
 8002b9a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002e38 <__ssvfiscanf_r+0x2bc>
 8002b9e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002ba2:	91a1      	str	r1, [sp, #644]	; 0x284
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	7813      	ldrb	r3, [r2, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 815c 	beq.w	8002e66 <__ssvfiscanf_r+0x2ea>
 8002bae:	5dd9      	ldrb	r1, [r3, r7]
 8002bb0:	1c55      	adds	r5, r2, #1
 8002bb2:	f011 0108 	ands.w	r1, r1, #8
 8002bb6:	d019      	beq.n	8002bec <__ssvfiscanf_r+0x70>
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dd0f      	ble.n	8002bde <__ssvfiscanf_r+0x62>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	5cba      	ldrb	r2, [r7, r2]
 8002bc4:	0712      	lsls	r2, r2, #28
 8002bc6:	d401      	bmi.n	8002bcc <__ssvfiscanf_r+0x50>
 8002bc8:	462a      	mov	r2, r5
 8002bca:	e7ec      	b.n	8002ba6 <__ssvfiscanf_r+0x2a>
 8002bcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002bce:	3301      	adds	r3, #1
 8002bd0:	3201      	adds	r2, #1
 8002bd2:	9245      	str	r2, [sp, #276]	; 0x114
 8002bd4:	6862      	ldr	r2, [r4, #4]
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	6062      	str	r2, [r4, #4]
 8002bdc:	e7ec      	b.n	8002bb8 <__ssvfiscanf_r+0x3c>
 8002bde:	4621      	mov	r1, r4
 8002be0:	4630      	mov	r0, r6
 8002be2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002be4:	4798      	blx	r3
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d0e9      	beq.n	8002bbe <__ssvfiscanf_r+0x42>
 8002bea:	e7ed      	b.n	8002bc8 <__ssvfiscanf_r+0x4c>
 8002bec:	2b25      	cmp	r3, #37	; 0x25
 8002bee:	d012      	beq.n	8002c16 <__ssvfiscanf_r+0x9a>
 8002bf0:	469a      	mov	sl, r3
 8002bf2:	6863      	ldr	r3, [r4, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f340 8094 	ble.w	8002d22 <__ssvfiscanf_r+0x1a6>
 8002bfa:	6822      	ldr	r2, [r4, #0]
 8002bfc:	7813      	ldrb	r3, [r2, #0]
 8002bfe:	4553      	cmp	r3, sl
 8002c00:	f040 8131 	bne.w	8002e66 <__ssvfiscanf_r+0x2ea>
 8002c04:	6863      	ldr	r3, [r4, #4]
 8002c06:	3201      	adds	r2, #1
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	6063      	str	r3, [r4, #4]
 8002c0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002c0e:	6022      	str	r2, [r4, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	9345      	str	r3, [sp, #276]	; 0x114
 8002c14:	e7d8      	b.n	8002bc8 <__ssvfiscanf_r+0x4c>
 8002c16:	9141      	str	r1, [sp, #260]	; 0x104
 8002c18:	9143      	str	r1, [sp, #268]	; 0x10c
 8002c1a:	7853      	ldrb	r3, [r2, #1]
 8002c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c1e:	bf04      	itt	eq
 8002c20:	2310      	moveq	r3, #16
 8002c22:	1c95      	addeq	r5, r2, #2
 8002c24:	f04f 020a 	mov.w	r2, #10
 8002c28:	bf08      	it	eq
 8002c2a:	9341      	streq	r3, [sp, #260]	; 0x104
 8002c2c:	46aa      	mov	sl, r5
 8002c2e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002c32:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002c36:	2b09      	cmp	r3, #9
 8002c38:	d91d      	bls.n	8002c76 <__ssvfiscanf_r+0xfa>
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	487e      	ldr	r0, [pc, #504]	; (8002e38 <__ssvfiscanf_r+0x2bc>)
 8002c3e:	f000 fd63 	bl	8003708 <memchr>
 8002c42:	b140      	cbz	r0, 8002c56 <__ssvfiscanf_r+0xda>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4655      	mov	r5, sl
 8002c48:	eba0 0009 	sub.w	r0, r0, r9
 8002c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8002c50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002c52:	4318      	orrs	r0, r3
 8002c54:	9041      	str	r0, [sp, #260]	; 0x104
 8002c56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c5a:	2b78      	cmp	r3, #120	; 0x78
 8002c5c:	d806      	bhi.n	8002c6c <__ssvfiscanf_r+0xf0>
 8002c5e:	2b57      	cmp	r3, #87	; 0x57
 8002c60:	d810      	bhi.n	8002c84 <__ssvfiscanf_r+0x108>
 8002c62:	2b25      	cmp	r3, #37	; 0x25
 8002c64:	d0c4      	beq.n	8002bf0 <__ssvfiscanf_r+0x74>
 8002c66:	d857      	bhi.n	8002d18 <__ssvfiscanf_r+0x19c>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d065      	beq.n	8002d38 <__ssvfiscanf_r+0x1bc>
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002c70:	230a      	movs	r3, #10
 8002c72:	9342      	str	r3, [sp, #264]	; 0x108
 8002c74:	e072      	b.n	8002d5c <__ssvfiscanf_r+0x1e0>
 8002c76:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002c78:	4655      	mov	r5, sl
 8002c7a:	fb02 1103 	mla	r1, r2, r3, r1
 8002c7e:	3930      	subs	r1, #48	; 0x30
 8002c80:	9143      	str	r1, [sp, #268]	; 0x10c
 8002c82:	e7d3      	b.n	8002c2c <__ssvfiscanf_r+0xb0>
 8002c84:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002c88:	2a20      	cmp	r2, #32
 8002c8a:	d8ef      	bhi.n	8002c6c <__ssvfiscanf_r+0xf0>
 8002c8c:	a101      	add	r1, pc, #4	; (adr r1, 8002c94 <__ssvfiscanf_r+0x118>)
 8002c8e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002d47 	.word	0x08002d47
 8002c98:	08002c6d 	.word	0x08002c6d
 8002c9c:	08002c6d 	.word	0x08002c6d
 8002ca0:	08002da5 	.word	0x08002da5
 8002ca4:	08002c6d 	.word	0x08002c6d
 8002ca8:	08002c6d 	.word	0x08002c6d
 8002cac:	08002c6d 	.word	0x08002c6d
 8002cb0:	08002c6d 	.word	0x08002c6d
 8002cb4:	08002c6d 	.word	0x08002c6d
 8002cb8:	08002c6d 	.word	0x08002c6d
 8002cbc:	08002c6d 	.word	0x08002c6d
 8002cc0:	08002dbb 	.word	0x08002dbb
 8002cc4:	08002d91 	.word	0x08002d91
 8002cc8:	08002d1f 	.word	0x08002d1f
 8002ccc:	08002d1f 	.word	0x08002d1f
 8002cd0:	08002d1f 	.word	0x08002d1f
 8002cd4:	08002c6d 	.word	0x08002c6d
 8002cd8:	08002d95 	.word	0x08002d95
 8002cdc:	08002c6d 	.word	0x08002c6d
 8002ce0:	08002c6d 	.word	0x08002c6d
 8002ce4:	08002c6d 	.word	0x08002c6d
 8002ce8:	08002c6d 	.word	0x08002c6d
 8002cec:	08002dcb 	.word	0x08002dcb
 8002cf0:	08002d9d 	.word	0x08002d9d
 8002cf4:	08002d3f 	.word	0x08002d3f
 8002cf8:	08002c6d 	.word	0x08002c6d
 8002cfc:	08002c6d 	.word	0x08002c6d
 8002d00:	08002dc7 	.word	0x08002dc7
 8002d04:	08002c6d 	.word	0x08002c6d
 8002d08:	08002d91 	.word	0x08002d91
 8002d0c:	08002c6d 	.word	0x08002c6d
 8002d10:	08002c6d 	.word	0x08002c6d
 8002d14:	08002d47 	.word	0x08002d47
 8002d18:	3b45      	subs	r3, #69	; 0x45
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d8a6      	bhi.n	8002c6c <__ssvfiscanf_r+0xf0>
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e01b      	b.n	8002d5a <__ssvfiscanf_r+0x1de>
 8002d22:	4621      	mov	r1, r4
 8002d24:	4630      	mov	r0, r6
 8002d26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002d28:	4798      	blx	r3
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	f43f af65 	beq.w	8002bfa <__ssvfiscanf_r+0x7e>
 8002d30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002d32:	2800      	cmp	r0, #0
 8002d34:	f040 808d 	bne.w	8002e52 <__ssvfiscanf_r+0x2d6>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	e08f      	b.n	8002e5e <__ssvfiscanf_r+0x2e2>
 8002d3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002d40:	f042 0220 	orr.w	r2, r2, #32
 8002d44:	9241      	str	r2, [sp, #260]	; 0x104
 8002d46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4c:	9241      	str	r2, [sp, #260]	; 0x104
 8002d4e:	2210      	movs	r2, #16
 8002d50:	2b6f      	cmp	r3, #111	; 0x6f
 8002d52:	bf34      	ite	cc
 8002d54:	2303      	movcc	r3, #3
 8002d56:	2304      	movcs	r3, #4
 8002d58:	9242      	str	r2, [sp, #264]	; 0x108
 8002d5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8002d5c:	6863      	ldr	r3, [r4, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	dd42      	ble.n	8002de8 <__ssvfiscanf_r+0x26c>
 8002d62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002d64:	0659      	lsls	r1, r3, #25
 8002d66:	d404      	bmi.n	8002d72 <__ssvfiscanf_r+0x1f6>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	5cba      	ldrb	r2, [r7, r2]
 8002d6e:	0712      	lsls	r2, r2, #28
 8002d70:	d441      	bmi.n	8002df6 <__ssvfiscanf_r+0x27a>
 8002d72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	dc50      	bgt.n	8002e1a <__ssvfiscanf_r+0x29e>
 8002d78:	466b      	mov	r3, sp
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	a941      	add	r1, sp, #260	; 0x104
 8002d80:	f000 fa0c 	bl	800319c <_scanf_chars>
 8002d84:	2801      	cmp	r0, #1
 8002d86:	d06e      	beq.n	8002e66 <__ssvfiscanf_r+0x2ea>
 8002d88:	2802      	cmp	r0, #2
 8002d8a:	f47f af1d 	bne.w	8002bc8 <__ssvfiscanf_r+0x4c>
 8002d8e:	e7cf      	b.n	8002d30 <__ssvfiscanf_r+0x1b4>
 8002d90:	220a      	movs	r2, #10
 8002d92:	e7dd      	b.n	8002d50 <__ssvfiscanf_r+0x1d4>
 8002d94:	2300      	movs	r3, #0
 8002d96:	9342      	str	r3, [sp, #264]	; 0x108
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e7de      	b.n	8002d5a <__ssvfiscanf_r+0x1de>
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	9342      	str	r3, [sp, #264]	; 0x108
 8002da0:	2304      	movs	r3, #4
 8002da2:	e7da      	b.n	8002d5a <__ssvfiscanf_r+0x1de>
 8002da4:	4629      	mov	r1, r5
 8002da6:	4640      	mov	r0, r8
 8002da8:	f000 fb4a 	bl	8003440 <__sccl>
 8002dac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002dae:	4605      	mov	r5, r0
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	9341      	str	r3, [sp, #260]	; 0x104
 8002db6:	2301      	movs	r3, #1
 8002db8:	e7cf      	b.n	8002d5a <__ssvfiscanf_r+0x1de>
 8002dba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc0:	9341      	str	r3, [sp, #260]	; 0x104
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e7c9      	b.n	8002d5a <__ssvfiscanf_r+0x1de>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e7c7      	b.n	8002d5a <__ssvfiscanf_r+0x1de>
 8002dca:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002dcc:	06c3      	lsls	r3, r0, #27
 8002dce:	f53f aefb 	bmi.w	8002bc8 <__ssvfiscanf_r+0x4c>
 8002dd2:	9b00      	ldr	r3, [sp, #0]
 8002dd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002dd6:	1d19      	adds	r1, r3, #4
 8002dd8:	9100      	str	r1, [sp, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f010 0f01 	tst.w	r0, #1
 8002de0:	bf14      	ite	ne
 8002de2:	801a      	strhne	r2, [r3, #0]
 8002de4:	601a      	streq	r2, [r3, #0]
 8002de6:	e6ef      	b.n	8002bc8 <__ssvfiscanf_r+0x4c>
 8002de8:	4621      	mov	r1, r4
 8002dea:	4630      	mov	r0, r6
 8002dec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002dee:	4798      	blx	r3
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d0b6      	beq.n	8002d62 <__ssvfiscanf_r+0x1e6>
 8002df4:	e79c      	b.n	8002d30 <__ssvfiscanf_r+0x1b4>
 8002df6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002df8:	3201      	adds	r2, #1
 8002dfa:	9245      	str	r2, [sp, #276]	; 0x114
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	2a00      	cmp	r2, #0
 8002e02:	6062      	str	r2, [r4, #4]
 8002e04:	dd02      	ble.n	8002e0c <__ssvfiscanf_r+0x290>
 8002e06:	3301      	adds	r3, #1
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	e7ad      	b.n	8002d68 <__ssvfiscanf_r+0x1ec>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4630      	mov	r0, r6
 8002e10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e12:	4798      	blx	r3
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d0a7      	beq.n	8002d68 <__ssvfiscanf_r+0x1ec>
 8002e18:	e78a      	b.n	8002d30 <__ssvfiscanf_r+0x1b4>
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	dc0e      	bgt.n	8002e3c <__ssvfiscanf_r+0x2c0>
 8002e1e:	466b      	mov	r3, sp
 8002e20:	4622      	mov	r2, r4
 8002e22:	4630      	mov	r0, r6
 8002e24:	a941      	add	r1, sp, #260	; 0x104
 8002e26:	f000 fa13 	bl	8003250 <_scanf_i>
 8002e2a:	e7ab      	b.n	8002d84 <__ssvfiscanf_r+0x208>
 8002e2c:	08002ac9 	.word	0x08002ac9
 8002e30:	08002b43 	.word	0x08002b43
 8002e34:	08003ea5 	.word	0x08003ea5
 8002e38:	08003e5c 	.word	0x08003e5c
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <__ssvfiscanf_r+0x2f0>)
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f43f aec2 	beq.w	8002bc8 <__ssvfiscanf_r+0x4c>
 8002e44:	466b      	mov	r3, sp
 8002e46:	4622      	mov	r2, r4
 8002e48:	4630      	mov	r0, r6
 8002e4a:	a941      	add	r1, sp, #260	; 0x104
 8002e4c:	f3af 8000 	nop.w
 8002e50:	e798      	b.n	8002d84 <__ssvfiscanf_r+0x208>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e58:	bf18      	it	ne
 8002e5a:	f04f 30ff 	movne.w	r0, #4294967295
 8002e5e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8002e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e66:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002e68:	e7f9      	b.n	8002e5e <__ssvfiscanf_r+0x2e2>
 8002e6a:	bf00      	nop
 8002e6c:	00000000 	.word	0x00000000

08002e70 <_printf_common>:
 8002e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	4616      	mov	r6, r2
 8002e76:	4699      	mov	r9, r3
 8002e78:	688a      	ldr	r2, [r1, #8]
 8002e7a:	690b      	ldr	r3, [r1, #16]
 8002e7c:	4607      	mov	r7, r0
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	bfb8      	it	lt
 8002e82:	4613      	movlt	r3, r2
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e90:	b10a      	cbz	r2, 8002e96 <_printf_common+0x26>
 8002e92:	3301      	adds	r3, #1
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	0699      	lsls	r1, r3, #26
 8002e9a:	bf42      	ittt	mi
 8002e9c:	6833      	ldrmi	r3, [r6, #0]
 8002e9e:	3302      	addmi	r3, #2
 8002ea0:	6033      	strmi	r3, [r6, #0]
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	f015 0506 	ands.w	r5, r5, #6
 8002ea8:	d106      	bne.n	8002eb8 <_printf_common+0x48>
 8002eaa:	f104 0a19 	add.w	sl, r4, #25
 8002eae:	68e3      	ldr	r3, [r4, #12]
 8002eb0:	6832      	ldr	r2, [r6, #0]
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	42ab      	cmp	r3, r5
 8002eb6:	dc28      	bgt.n	8002f0a <_printf_common+0x9a>
 8002eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ebc:	1e13      	subs	r3, r2, #0
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	bf18      	it	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	0692      	lsls	r2, r2, #26
 8002ec6:	d42d      	bmi.n	8002f24 <_printf_common+0xb4>
 8002ec8:	4649      	mov	r1, r9
 8002eca:	4638      	mov	r0, r7
 8002ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed0:	47c0      	blx	r8
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d020      	beq.n	8002f18 <_printf_common+0xa8>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	68e5      	ldr	r5, [r4, #12]
 8002eda:	f003 0306 	and.w	r3, r3, #6
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf18      	it	ne
 8002ee2:	2500      	movne	r5, #0
 8002ee4:	6832      	ldr	r2, [r6, #0]
 8002ee6:	f04f 0600 	mov.w	r6, #0
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	bf08      	it	eq
 8002eee:	1aad      	subeq	r5, r5, r2
 8002ef0:	6922      	ldr	r2, [r4, #16]
 8002ef2:	bf08      	it	eq
 8002ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bfc4      	itt	gt
 8002efc:	1a9b      	subgt	r3, r3, r2
 8002efe:	18ed      	addgt	r5, r5, r3
 8002f00:	341a      	adds	r4, #26
 8002f02:	42b5      	cmp	r5, r6
 8002f04:	d11a      	bne.n	8002f3c <_printf_common+0xcc>
 8002f06:	2000      	movs	r0, #0
 8002f08:	e008      	b.n	8002f1c <_printf_common+0xac>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4652      	mov	r2, sl
 8002f0e:	4649      	mov	r1, r9
 8002f10:	4638      	mov	r0, r7
 8002f12:	47c0      	blx	r8
 8002f14:	3001      	adds	r0, #1
 8002f16:	d103      	bne.n	8002f20 <_printf_common+0xb0>
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f20:	3501      	adds	r5, #1
 8002f22:	e7c4      	b.n	8002eae <_printf_common+0x3e>
 8002f24:	2030      	movs	r0, #48	; 0x30
 8002f26:	18e1      	adds	r1, r4, r3
 8002f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f32:	4422      	add	r2, r4
 8002f34:	3302      	adds	r3, #2
 8002f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f3a:	e7c5      	b.n	8002ec8 <_printf_common+0x58>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	4622      	mov	r2, r4
 8002f40:	4649      	mov	r1, r9
 8002f42:	4638      	mov	r0, r7
 8002f44:	47c0      	blx	r8
 8002f46:	3001      	adds	r0, #1
 8002f48:	d0e6      	beq.n	8002f18 <_printf_common+0xa8>
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7d9      	b.n	8002f02 <_printf_common+0x92>
	...

08002f50 <_printf_i>:
 8002f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	7e0f      	ldrb	r7, [r1, #24]
 8002f56:	4691      	mov	r9, r2
 8002f58:	2f78      	cmp	r7, #120	; 0x78
 8002f5a:	4680      	mov	r8, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	469a      	mov	sl, r3
 8002f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f66:	d807      	bhi.n	8002f78 <_printf_i+0x28>
 8002f68:	2f62      	cmp	r7, #98	; 0x62
 8002f6a:	d80a      	bhi.n	8002f82 <_printf_i+0x32>
 8002f6c:	2f00      	cmp	r7, #0
 8002f6e:	f000 80d9 	beq.w	8003124 <_printf_i+0x1d4>
 8002f72:	2f58      	cmp	r7, #88	; 0x58
 8002f74:	f000 80a4 	beq.w	80030c0 <_printf_i+0x170>
 8002f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f80:	e03a      	b.n	8002ff8 <_printf_i+0xa8>
 8002f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f86:	2b15      	cmp	r3, #21
 8002f88:	d8f6      	bhi.n	8002f78 <_printf_i+0x28>
 8002f8a:	a101      	add	r1, pc, #4	; (adr r1, 8002f90 <_printf_i+0x40>)
 8002f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	08002ffd 	.word	0x08002ffd
 8002f98:	08002f79 	.word	0x08002f79
 8002f9c:	08002f79 	.word	0x08002f79
 8002fa0:	08002f79 	.word	0x08002f79
 8002fa4:	08002f79 	.word	0x08002f79
 8002fa8:	08002ffd 	.word	0x08002ffd
 8002fac:	08002f79 	.word	0x08002f79
 8002fb0:	08002f79 	.word	0x08002f79
 8002fb4:	08002f79 	.word	0x08002f79
 8002fb8:	08002f79 	.word	0x08002f79
 8002fbc:	0800310b 	.word	0x0800310b
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	080030ed 	.word	0x080030ed
 8002fc8:	08002f79 	.word	0x08002f79
 8002fcc:	08002f79 	.word	0x08002f79
 8002fd0:	0800312d 	.word	0x0800312d
 8002fd4:	08002f79 	.word	0x08002f79
 8002fd8:	0800302d 	.word	0x0800302d
 8002fdc:	08002f79 	.word	0x08002f79
 8002fe0:	08002f79 	.word	0x08002f79
 8002fe4:	080030f5 	.word	0x080030f5
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	602a      	str	r2, [r5, #0]
 8002ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a4      	b.n	8003146 <_printf_i+0x1f6>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	6829      	ldr	r1, [r5, #0]
 8003000:	0606      	lsls	r6, r0, #24
 8003002:	f101 0304 	add.w	r3, r1, #4
 8003006:	d50a      	bpl.n	800301e <_printf_i+0xce>
 8003008:	680e      	ldr	r6, [r1, #0]
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	2e00      	cmp	r6, #0
 800300e:	da03      	bge.n	8003018 <_printf_i+0xc8>
 8003010:	232d      	movs	r3, #45	; 0x2d
 8003012:	4276      	negs	r6, r6
 8003014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003018:	230a      	movs	r3, #10
 800301a:	485e      	ldr	r0, [pc, #376]	; (8003194 <_printf_i+0x244>)
 800301c:	e019      	b.n	8003052 <_printf_i+0x102>
 800301e:	680e      	ldr	r6, [r1, #0]
 8003020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003024:	602b      	str	r3, [r5, #0]
 8003026:	bf18      	it	ne
 8003028:	b236      	sxthne	r6, r6
 800302a:	e7ef      	b.n	800300c <_printf_i+0xbc>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	1d19      	adds	r1, r3, #4
 8003032:	6029      	str	r1, [r5, #0]
 8003034:	0601      	lsls	r1, r0, #24
 8003036:	d501      	bpl.n	800303c <_printf_i+0xec>
 8003038:	681e      	ldr	r6, [r3, #0]
 800303a:	e002      	b.n	8003042 <_printf_i+0xf2>
 800303c:	0646      	lsls	r6, r0, #25
 800303e:	d5fb      	bpl.n	8003038 <_printf_i+0xe8>
 8003040:	881e      	ldrh	r6, [r3, #0]
 8003042:	2f6f      	cmp	r7, #111	; 0x6f
 8003044:	bf0c      	ite	eq
 8003046:	2308      	moveq	r3, #8
 8003048:	230a      	movne	r3, #10
 800304a:	4852      	ldr	r0, [pc, #328]	; (8003194 <_printf_i+0x244>)
 800304c:	2100      	movs	r1, #0
 800304e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003052:	6865      	ldr	r5, [r4, #4]
 8003054:	2d00      	cmp	r5, #0
 8003056:	bfa8      	it	ge
 8003058:	6821      	ldrge	r1, [r4, #0]
 800305a:	60a5      	str	r5, [r4, #8]
 800305c:	bfa4      	itt	ge
 800305e:	f021 0104 	bicge.w	r1, r1, #4
 8003062:	6021      	strge	r1, [r4, #0]
 8003064:	b90e      	cbnz	r6, 800306a <_printf_i+0x11a>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d04d      	beq.n	8003106 <_printf_i+0x1b6>
 800306a:	4615      	mov	r5, r2
 800306c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003070:	fb03 6711 	mls	r7, r3, r1, r6
 8003074:	5dc7      	ldrb	r7, [r0, r7]
 8003076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800307a:	4637      	mov	r7, r6
 800307c:	42bb      	cmp	r3, r7
 800307e:	460e      	mov	r6, r1
 8003080:	d9f4      	bls.n	800306c <_printf_i+0x11c>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d10b      	bne.n	800309e <_printf_i+0x14e>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	07de      	lsls	r6, r3, #31
 800308a:	d508      	bpl.n	800309e <_printf_i+0x14e>
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	6861      	ldr	r1, [r4, #4]
 8003090:	4299      	cmp	r1, r3
 8003092:	bfde      	ittt	le
 8003094:	2330      	movle	r3, #48	; 0x30
 8003096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800309a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800309e:	1b52      	subs	r2, r2, r5
 80030a0:	6122      	str	r2, [r4, #16]
 80030a2:	464b      	mov	r3, r9
 80030a4:	4621      	mov	r1, r4
 80030a6:	4640      	mov	r0, r8
 80030a8:	f8cd a000 	str.w	sl, [sp]
 80030ac:	aa03      	add	r2, sp, #12
 80030ae:	f7ff fedf 	bl	8002e70 <_printf_common>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d14c      	bne.n	8003150 <_printf_i+0x200>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	b004      	add	sp, #16
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	4834      	ldr	r0, [pc, #208]	; (8003194 <_printf_i+0x244>)
 80030c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030c6:	6829      	ldr	r1, [r5, #0]
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80030ce:	6029      	str	r1, [r5, #0]
 80030d0:	061d      	lsls	r5, r3, #24
 80030d2:	d514      	bpl.n	80030fe <_printf_i+0x1ae>
 80030d4:	07df      	lsls	r7, r3, #31
 80030d6:	bf44      	itt	mi
 80030d8:	f043 0320 	orrmi.w	r3, r3, #32
 80030dc:	6023      	strmi	r3, [r4, #0]
 80030de:	b91e      	cbnz	r6, 80030e8 <_printf_i+0x198>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	2310      	movs	r3, #16
 80030ea:	e7af      	b.n	800304c <_printf_i+0xfc>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	2378      	movs	r3, #120	; 0x78
 80030f6:	4828      	ldr	r0, [pc, #160]	; (8003198 <_printf_i+0x248>)
 80030f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030fc:	e7e3      	b.n	80030c6 <_printf_i+0x176>
 80030fe:	0659      	lsls	r1, r3, #25
 8003100:	bf48      	it	mi
 8003102:	b2b6      	uxthmi	r6, r6
 8003104:	e7e6      	b.n	80030d4 <_printf_i+0x184>
 8003106:	4615      	mov	r5, r2
 8003108:	e7bb      	b.n	8003082 <_printf_i+0x132>
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	6826      	ldr	r6, [r4, #0]
 800310e:	1d18      	adds	r0, r3, #4
 8003110:	6961      	ldr	r1, [r4, #20]
 8003112:	6028      	str	r0, [r5, #0]
 8003114:	0635      	lsls	r5, r6, #24
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	d501      	bpl.n	800311e <_printf_i+0x1ce>
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	e002      	b.n	8003124 <_printf_i+0x1d4>
 800311e:	0670      	lsls	r0, r6, #25
 8003120:	d5fb      	bpl.n	800311a <_printf_i+0x1ca>
 8003122:	8019      	strh	r1, [r3, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	4615      	mov	r5, r2
 8003128:	6123      	str	r3, [r4, #16]
 800312a:	e7ba      	b.n	80030a2 <_printf_i+0x152>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	2100      	movs	r1, #0
 8003130:	1d1a      	adds	r2, r3, #4
 8003132:	602a      	str	r2, [r5, #0]
 8003134:	681d      	ldr	r5, [r3, #0]
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	4628      	mov	r0, r5
 800313a:	f000 fae5 	bl	8003708 <memchr>
 800313e:	b108      	cbz	r0, 8003144 <_printf_i+0x1f4>
 8003140:	1b40      	subs	r0, r0, r5
 8003142:	6060      	str	r0, [r4, #4]
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	6123      	str	r3, [r4, #16]
 8003148:	2300      	movs	r3, #0
 800314a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800314e:	e7a8      	b.n	80030a2 <_printf_i+0x152>
 8003150:	462a      	mov	r2, r5
 8003152:	4649      	mov	r1, r9
 8003154:	4640      	mov	r0, r8
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	47d0      	blx	sl
 800315a:	3001      	adds	r0, #1
 800315c:	d0ab      	beq.n	80030b6 <_printf_i+0x166>
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	079b      	lsls	r3, r3, #30
 8003162:	d413      	bmi.n	800318c <_printf_i+0x23c>
 8003164:	68e0      	ldr	r0, [r4, #12]
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	4298      	cmp	r0, r3
 800316a:	bfb8      	it	lt
 800316c:	4618      	movlt	r0, r3
 800316e:	e7a4      	b.n	80030ba <_printf_i+0x16a>
 8003170:	2301      	movs	r3, #1
 8003172:	4632      	mov	r2, r6
 8003174:	4649      	mov	r1, r9
 8003176:	4640      	mov	r0, r8
 8003178:	47d0      	blx	sl
 800317a:	3001      	adds	r0, #1
 800317c:	d09b      	beq.n	80030b6 <_printf_i+0x166>
 800317e:	3501      	adds	r5, #1
 8003180:	68e3      	ldr	r3, [r4, #12]
 8003182:	9903      	ldr	r1, [sp, #12]
 8003184:	1a5b      	subs	r3, r3, r1
 8003186:	42ab      	cmp	r3, r5
 8003188:	dcf2      	bgt.n	8003170 <_printf_i+0x220>
 800318a:	e7eb      	b.n	8003164 <_printf_i+0x214>
 800318c:	2500      	movs	r5, #0
 800318e:	f104 0619 	add.w	r6, r4, #25
 8003192:	e7f5      	b.n	8003180 <_printf_i+0x230>
 8003194:	08003e67 	.word	0x08003e67
 8003198:	08003e78 	.word	0x08003e78

0800319c <_scanf_chars>:
 800319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a0:	4615      	mov	r5, r2
 80031a2:	688a      	ldr	r2, [r1, #8]
 80031a4:	4680      	mov	r8, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	b932      	cbnz	r2, 80031b8 <_scanf_chars+0x1c>
 80031aa:	698a      	ldr	r2, [r1, #24]
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2201      	moveq	r2, #1
 80031b2:	f04f 32ff 	movne.w	r2, #4294967295
 80031b6:	608a      	str	r2, [r1, #8]
 80031b8:	2700      	movs	r7, #0
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800324c <_scanf_chars+0xb0>
 80031c0:	06d1      	lsls	r1, r2, #27
 80031c2:	bf5f      	itttt	pl
 80031c4:	681a      	ldrpl	r2, [r3, #0]
 80031c6:	1d11      	addpl	r1, r2, #4
 80031c8:	6019      	strpl	r1, [r3, #0]
 80031ca:	6816      	ldrpl	r6, [r2, #0]
 80031cc:	69a0      	ldr	r0, [r4, #24]
 80031ce:	b188      	cbz	r0, 80031f4 <_scanf_chars+0x58>
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d107      	bne.n	80031e4 <_scanf_chars+0x48>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	6963      	ldr	r3, [r4, #20]
 80031da:	5c9b      	ldrb	r3, [r3, r2]
 80031dc:	b953      	cbnz	r3, 80031f4 <_scanf_chars+0x58>
 80031de:	2f00      	cmp	r7, #0
 80031e0:	d031      	beq.n	8003246 <_scanf_chars+0xaa>
 80031e2:	e022      	b.n	800322a <_scanf_chars+0x8e>
 80031e4:	2802      	cmp	r0, #2
 80031e6:	d120      	bne.n	800322a <_scanf_chars+0x8e>
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 80031f0:	071b      	lsls	r3, r3, #28
 80031f2:	d41a      	bmi.n	800322a <_scanf_chars+0x8e>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	3701      	adds	r7, #1
 80031f8:	06da      	lsls	r2, r3, #27
 80031fa:	bf5e      	ittt	pl
 80031fc:	682b      	ldrpl	r3, [r5, #0]
 80031fe:	781b      	ldrbpl	r3, [r3, #0]
 8003200:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003204:	682a      	ldr	r2, [r5, #0]
 8003206:	686b      	ldr	r3, [r5, #4]
 8003208:	3201      	adds	r2, #1
 800320a:	602a      	str	r2, [r5, #0]
 800320c:	68a2      	ldr	r2, [r4, #8]
 800320e:	3b01      	subs	r3, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	606b      	str	r3, [r5, #4]
 8003214:	60a2      	str	r2, [r4, #8]
 8003216:	b142      	cbz	r2, 800322a <_scanf_chars+0x8e>
 8003218:	2b00      	cmp	r3, #0
 800321a:	dcd7      	bgt.n	80031cc <_scanf_chars+0x30>
 800321c:	4629      	mov	r1, r5
 800321e:	4640      	mov	r0, r8
 8003220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003224:	4798      	blx	r3
 8003226:	2800      	cmp	r0, #0
 8003228:	d0d0      	beq.n	80031cc <_scanf_chars+0x30>
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	f013 0310 	ands.w	r3, r3, #16
 8003230:	d105      	bne.n	800323e <_scanf_chars+0xa2>
 8003232:	68e2      	ldr	r2, [r4, #12]
 8003234:	3201      	adds	r2, #1
 8003236:	60e2      	str	r2, [r4, #12]
 8003238:	69a2      	ldr	r2, [r4, #24]
 800323a:	b102      	cbz	r2, 800323e <_scanf_chars+0xa2>
 800323c:	7033      	strb	r3, [r6, #0]
 800323e:	2000      	movs	r0, #0
 8003240:	6923      	ldr	r3, [r4, #16]
 8003242:	443b      	add	r3, r7
 8003244:	6123      	str	r3, [r4, #16]
 8003246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800324a:	bf00      	nop
 800324c:	08003ea5 	.word	0x08003ea5

08003250 <_scanf_i>:
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	460c      	mov	r4, r1
 8003256:	4698      	mov	r8, r3
 8003258:	4b75      	ldr	r3, [pc, #468]	; (8003430 <_scanf_i+0x1e0>)
 800325a:	b087      	sub	sp, #28
 800325c:	4682      	mov	sl, r0
 800325e:	4616      	mov	r6, r2
 8003260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003264:	ab03      	add	r3, sp, #12
 8003266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800326a:	4b72      	ldr	r3, [pc, #456]	; (8003434 <_scanf_i+0x1e4>)
 800326c:	69a1      	ldr	r1, [r4, #24]
 800326e:	4a72      	ldr	r2, [pc, #456]	; (8003438 <_scanf_i+0x1e8>)
 8003270:	4627      	mov	r7, r4
 8003272:	2903      	cmp	r1, #3
 8003274:	bf18      	it	ne
 8003276:	461a      	movne	r2, r3
 8003278:	68a3      	ldr	r3, [r4, #8]
 800327a:	9201      	str	r2, [sp, #4]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003282:	bf81      	itttt	hi
 8003284:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003288:	eb03 0905 	addhi.w	r9, r3, r5
 800328c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003290:	60a3      	strhi	r3, [r4, #8]
 8003292:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003296:	bf98      	it	ls
 8003298:	f04f 0900 	movls.w	r9, #0
 800329c:	463d      	mov	r5, r7
 800329e:	f04f 0b00 	mov.w	fp, #0
 80032a2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	6831      	ldr	r1, [r6, #0]
 80032aa:	ab03      	add	r3, sp, #12
 80032ac:	2202      	movs	r2, #2
 80032ae:	7809      	ldrb	r1, [r1, #0]
 80032b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80032b4:	f000 fa28 	bl	8003708 <memchr>
 80032b8:	b328      	cbz	r0, 8003306 <_scanf_i+0xb6>
 80032ba:	f1bb 0f01 	cmp.w	fp, #1
 80032be:	d159      	bne.n	8003374 <_scanf_i+0x124>
 80032c0:	6862      	ldr	r2, [r4, #4]
 80032c2:	b92a      	cbnz	r2, 80032d0 <_scanf_i+0x80>
 80032c4:	2308      	movs	r3, #8
 80032c6:	6822      	ldr	r2, [r4, #0]
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	6022      	str	r2, [r4, #0]
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80032d6:	6022      	str	r2, [r4, #0]
 80032d8:	68a2      	ldr	r2, [r4, #8]
 80032da:	1e51      	subs	r1, r2, #1
 80032dc:	60a1      	str	r1, [r4, #8]
 80032de:	b192      	cbz	r2, 8003306 <_scanf_i+0xb6>
 80032e0:	6832      	ldr	r2, [r6, #0]
 80032e2:	1c51      	adds	r1, r2, #1
 80032e4:	6031      	str	r1, [r6, #0]
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	f805 2b01 	strb.w	r2, [r5], #1
 80032ec:	6872      	ldr	r2, [r6, #4]
 80032ee:	3a01      	subs	r2, #1
 80032f0:	2a00      	cmp	r2, #0
 80032f2:	6072      	str	r2, [r6, #4]
 80032f4:	dc07      	bgt.n	8003306 <_scanf_i+0xb6>
 80032f6:	4631      	mov	r1, r6
 80032f8:	4650      	mov	r0, sl
 80032fa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80032fe:	4790      	blx	r2
 8003300:	2800      	cmp	r0, #0
 8003302:	f040 8085 	bne.w	8003410 <_scanf_i+0x1c0>
 8003306:	f10b 0b01 	add.w	fp, fp, #1
 800330a:	f1bb 0f03 	cmp.w	fp, #3
 800330e:	d1cb      	bne.n	80032a8 <_scanf_i+0x58>
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	b90b      	cbnz	r3, 8003318 <_scanf_i+0xc8>
 8003314:	230a      	movs	r3, #10
 8003316:	6063      	str	r3, [r4, #4]
 8003318:	6863      	ldr	r3, [r4, #4]
 800331a:	4948      	ldr	r1, [pc, #288]	; (800343c <_scanf_i+0x1ec>)
 800331c:	6960      	ldr	r0, [r4, #20]
 800331e:	1ac9      	subs	r1, r1, r3
 8003320:	f000 f88e 	bl	8003440 <__sccl>
 8003324:	f04f 0b00 	mov.w	fp, #0
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d03d      	beq.n	80033ac <_scanf_i+0x15c>
 8003330:	6831      	ldr	r1, [r6, #0]
 8003332:	6960      	ldr	r0, [r4, #20]
 8003334:	f891 c000 	ldrb.w	ip, [r1]
 8003338:	f810 000c 	ldrb.w	r0, [r0, ip]
 800333c:	2800      	cmp	r0, #0
 800333e:	d035      	beq.n	80033ac <_scanf_i+0x15c>
 8003340:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003344:	d124      	bne.n	8003390 <_scanf_i+0x140>
 8003346:	0510      	lsls	r0, r2, #20
 8003348:	d522      	bpl.n	8003390 <_scanf_i+0x140>
 800334a:	f10b 0b01 	add.w	fp, fp, #1
 800334e:	f1b9 0f00 	cmp.w	r9, #0
 8003352:	d003      	beq.n	800335c <_scanf_i+0x10c>
 8003354:	3301      	adds	r3, #1
 8003356:	f109 39ff 	add.w	r9, r9, #4294967295
 800335a:	60a3      	str	r3, [r4, #8]
 800335c:	6873      	ldr	r3, [r6, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	6073      	str	r3, [r6, #4]
 8003364:	dd1b      	ble.n	800339e <_scanf_i+0x14e>
 8003366:	6833      	ldr	r3, [r6, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	68a3      	ldr	r3, [r4, #8]
 800336e:	3b01      	subs	r3, #1
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	e7d9      	b.n	8003328 <_scanf_i+0xd8>
 8003374:	f1bb 0f02 	cmp.w	fp, #2
 8003378:	d1ae      	bne.n	80032d8 <_scanf_i+0x88>
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003380:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003384:	d1bf      	bne.n	8003306 <_scanf_i+0xb6>
 8003386:	2310      	movs	r3, #16
 8003388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338c:	6063      	str	r3, [r4, #4]
 800338e:	e7a2      	b.n	80032d6 <_scanf_i+0x86>
 8003390:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003394:	6022      	str	r2, [r4, #0]
 8003396:	780b      	ldrb	r3, [r1, #0]
 8003398:	f805 3b01 	strb.w	r3, [r5], #1
 800339c:	e7de      	b.n	800335c <_scanf_i+0x10c>
 800339e:	4631      	mov	r1, r6
 80033a0:	4650      	mov	r0, sl
 80033a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80033a6:	4798      	blx	r3
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0df      	beq.n	800336c <_scanf_i+0x11c>
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	05db      	lsls	r3, r3, #23
 80033b0:	d50d      	bpl.n	80033ce <_scanf_i+0x17e>
 80033b2:	42bd      	cmp	r5, r7
 80033b4:	d909      	bls.n	80033ca <_scanf_i+0x17a>
 80033b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80033ba:	4632      	mov	r2, r6
 80033bc:	4650      	mov	r0, sl
 80033be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80033c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80033c6:	4798      	blx	r3
 80033c8:	464d      	mov	r5, r9
 80033ca:	42bd      	cmp	r5, r7
 80033cc:	d02d      	beq.n	800342a <_scanf_i+0x1da>
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	f012 0210 	ands.w	r2, r2, #16
 80033d4:	d113      	bne.n	80033fe <_scanf_i+0x1ae>
 80033d6:	702a      	strb	r2, [r5, #0]
 80033d8:	4639      	mov	r1, r7
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	4650      	mov	r0, sl
 80033de:	9e01      	ldr	r6, [sp, #4]
 80033e0:	47b0      	blx	r6
 80033e2:	6821      	ldr	r1, [r4, #0]
 80033e4:	f8d8 3000 	ldr.w	r3, [r8]
 80033e8:	f011 0f20 	tst.w	r1, #32
 80033ec:	d013      	beq.n	8003416 <_scanf_i+0x1c6>
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	f8c8 2000 	str.w	r2, [r8]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6018      	str	r0, [r3, #0]
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60e3      	str	r3, [r4, #12]
 80033fe:	2000      	movs	r0, #0
 8003400:	1bed      	subs	r5, r5, r7
 8003402:	44ab      	add	fp, r5
 8003404:	6925      	ldr	r5, [r4, #16]
 8003406:	445d      	add	r5, fp
 8003408:	6125      	str	r5, [r4, #16]
 800340a:	b007      	add	sp, #28
 800340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003410:	f04f 0b00 	mov.w	fp, #0
 8003414:	e7ca      	b.n	80033ac <_scanf_i+0x15c>
 8003416:	1d1a      	adds	r2, r3, #4
 8003418:	f8c8 2000 	str.w	r2, [r8]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f011 0f01 	tst.w	r1, #1
 8003422:	bf14      	ite	ne
 8003424:	8018      	strhne	r0, [r3, #0]
 8003426:	6018      	streq	r0, [r3, #0]
 8003428:	e7e6      	b.n	80033f8 <_scanf_i+0x1a8>
 800342a:	2001      	movs	r0, #1
 800342c:	e7ed      	b.n	800340a <_scanf_i+0x1ba>
 800342e:	bf00      	nop
 8003430:	08003e20 	.word	0x08003e20
 8003434:	08003691 	.word	0x08003691
 8003438:	080035a9 	.word	0x080035a9
 800343c:	08003ea2 	.word	0x08003ea2

08003440 <__sccl>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	780b      	ldrb	r3, [r1, #0]
 8003444:	4604      	mov	r4, r0
 8003446:	2b5e      	cmp	r3, #94	; 0x5e
 8003448:	bf13      	iteet	ne
 800344a:	2200      	movne	r2, #0
 800344c:	2201      	moveq	r2, #1
 800344e:	784b      	ldrbeq	r3, [r1, #1]
 8003450:	1c48      	addne	r0, r1, #1
 8003452:	bf08      	it	eq
 8003454:	1c88      	addeq	r0, r1, #2
 8003456:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800345a:	1e61      	subs	r1, r4, #1
 800345c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003460:	42a9      	cmp	r1, r5
 8003462:	d1fb      	bne.n	800345c <__sccl+0x1c>
 8003464:	b90b      	cbnz	r3, 800346a <__sccl+0x2a>
 8003466:	3801      	subs	r0, #1
 8003468:	bd70      	pop	{r4, r5, r6, pc}
 800346a:	f082 0201 	eor.w	r2, r2, #1
 800346e:	4605      	mov	r5, r0
 8003470:	54e2      	strb	r2, [r4, r3]
 8003472:	4628      	mov	r0, r5
 8003474:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003478:	292d      	cmp	r1, #45	; 0x2d
 800347a:	d006      	beq.n	800348a <__sccl+0x4a>
 800347c:	295d      	cmp	r1, #93	; 0x5d
 800347e:	d0f3      	beq.n	8003468 <__sccl+0x28>
 8003480:	b909      	cbnz	r1, 8003486 <__sccl+0x46>
 8003482:	4628      	mov	r0, r5
 8003484:	e7f0      	b.n	8003468 <__sccl+0x28>
 8003486:	460b      	mov	r3, r1
 8003488:	e7f1      	b.n	800346e <__sccl+0x2e>
 800348a:	786e      	ldrb	r6, [r5, #1]
 800348c:	2e5d      	cmp	r6, #93	; 0x5d
 800348e:	d0fa      	beq.n	8003486 <__sccl+0x46>
 8003490:	42b3      	cmp	r3, r6
 8003492:	dcf8      	bgt.n	8003486 <__sccl+0x46>
 8003494:	4619      	mov	r1, r3
 8003496:	3502      	adds	r5, #2
 8003498:	3101      	adds	r1, #1
 800349a:	428e      	cmp	r6, r1
 800349c:	5462      	strb	r2, [r4, r1]
 800349e:	dcfb      	bgt.n	8003498 <__sccl+0x58>
 80034a0:	1af1      	subs	r1, r6, r3
 80034a2:	3901      	subs	r1, #1
 80034a4:	42b3      	cmp	r3, r6
 80034a6:	bfa8      	it	ge
 80034a8:	2100      	movge	r1, #0
 80034aa:	1c58      	adds	r0, r3, #1
 80034ac:	1843      	adds	r3, r0, r1
 80034ae:	e7e0      	b.n	8003472 <__sccl+0x32>

080034b0 <_strtol_l.constprop.0>:
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b6:	4680      	mov	r8, r0
 80034b8:	d001      	beq.n	80034be <_strtol_l.constprop.0+0xe>
 80034ba:	2b24      	cmp	r3, #36	; 0x24
 80034bc:	d906      	bls.n	80034cc <_strtol_l.constprop.0+0x1c>
 80034be:	f7ff f919 	bl	80026f4 <__errno>
 80034c2:	2316      	movs	r3, #22
 80034c4:	6003      	str	r3, [r0, #0]
 80034c6:	2000      	movs	r0, #0
 80034c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034cc:	460d      	mov	r5, r1
 80034ce:	4f35      	ldr	r7, [pc, #212]	; (80035a4 <_strtol_l.constprop.0+0xf4>)
 80034d0:	4628      	mov	r0, r5
 80034d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034d6:	5de6      	ldrb	r6, [r4, r7]
 80034d8:	f016 0608 	ands.w	r6, r6, #8
 80034dc:	d1f8      	bne.n	80034d0 <_strtol_l.constprop.0+0x20>
 80034de:	2c2d      	cmp	r4, #45	; 0x2d
 80034e0:	d12f      	bne.n	8003542 <_strtol_l.constprop.0+0x92>
 80034e2:	2601      	movs	r6, #1
 80034e4:	782c      	ldrb	r4, [r5, #0]
 80034e6:	1c85      	adds	r5, r0, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d057      	beq.n	800359c <_strtol_l.constprop.0+0xec>
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d109      	bne.n	8003504 <_strtol_l.constprop.0+0x54>
 80034f0:	2c30      	cmp	r4, #48	; 0x30
 80034f2:	d107      	bne.n	8003504 <_strtol_l.constprop.0+0x54>
 80034f4:	7828      	ldrb	r0, [r5, #0]
 80034f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80034fa:	2858      	cmp	r0, #88	; 0x58
 80034fc:	d149      	bne.n	8003592 <_strtol_l.constprop.0+0xe2>
 80034fe:	2310      	movs	r3, #16
 8003500:	786c      	ldrb	r4, [r5, #1]
 8003502:	3502      	adds	r5, #2
 8003504:	2700      	movs	r7, #0
 8003506:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800350a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800350e:	fbbe f9f3 	udiv	r9, lr, r3
 8003512:	4638      	mov	r0, r7
 8003514:	fb03 ea19 	mls	sl, r3, r9, lr
 8003518:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800351c:	f1bc 0f09 	cmp.w	ip, #9
 8003520:	d814      	bhi.n	800354c <_strtol_l.constprop.0+0x9c>
 8003522:	4664      	mov	r4, ip
 8003524:	42a3      	cmp	r3, r4
 8003526:	dd22      	ble.n	800356e <_strtol_l.constprop.0+0xbe>
 8003528:	2f00      	cmp	r7, #0
 800352a:	db1d      	blt.n	8003568 <_strtol_l.constprop.0+0xb8>
 800352c:	4581      	cmp	r9, r0
 800352e:	d31b      	bcc.n	8003568 <_strtol_l.constprop.0+0xb8>
 8003530:	d101      	bne.n	8003536 <_strtol_l.constprop.0+0x86>
 8003532:	45a2      	cmp	sl, r4
 8003534:	db18      	blt.n	8003568 <_strtol_l.constprop.0+0xb8>
 8003536:	2701      	movs	r7, #1
 8003538:	fb00 4003 	mla	r0, r0, r3, r4
 800353c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003540:	e7ea      	b.n	8003518 <_strtol_l.constprop.0+0x68>
 8003542:	2c2b      	cmp	r4, #43	; 0x2b
 8003544:	bf04      	itt	eq
 8003546:	782c      	ldrbeq	r4, [r5, #0]
 8003548:	1c85      	addeq	r5, r0, #2
 800354a:	e7cd      	b.n	80034e8 <_strtol_l.constprop.0+0x38>
 800354c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003550:	f1bc 0f19 	cmp.w	ip, #25
 8003554:	d801      	bhi.n	800355a <_strtol_l.constprop.0+0xaa>
 8003556:	3c37      	subs	r4, #55	; 0x37
 8003558:	e7e4      	b.n	8003524 <_strtol_l.constprop.0+0x74>
 800355a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800355e:	f1bc 0f19 	cmp.w	ip, #25
 8003562:	d804      	bhi.n	800356e <_strtol_l.constprop.0+0xbe>
 8003564:	3c57      	subs	r4, #87	; 0x57
 8003566:	e7dd      	b.n	8003524 <_strtol_l.constprop.0+0x74>
 8003568:	f04f 37ff 	mov.w	r7, #4294967295
 800356c:	e7e6      	b.n	800353c <_strtol_l.constprop.0+0x8c>
 800356e:	2f00      	cmp	r7, #0
 8003570:	da07      	bge.n	8003582 <_strtol_l.constprop.0+0xd2>
 8003572:	2322      	movs	r3, #34	; 0x22
 8003574:	4670      	mov	r0, lr
 8003576:	f8c8 3000 	str.w	r3, [r8]
 800357a:	2a00      	cmp	r2, #0
 800357c:	d0a4      	beq.n	80034c8 <_strtol_l.constprop.0+0x18>
 800357e:	1e69      	subs	r1, r5, #1
 8003580:	e005      	b.n	800358e <_strtol_l.constprop.0+0xde>
 8003582:	b106      	cbz	r6, 8003586 <_strtol_l.constprop.0+0xd6>
 8003584:	4240      	negs	r0, r0
 8003586:	2a00      	cmp	r2, #0
 8003588:	d09e      	beq.n	80034c8 <_strtol_l.constprop.0+0x18>
 800358a:	2f00      	cmp	r7, #0
 800358c:	d1f7      	bne.n	800357e <_strtol_l.constprop.0+0xce>
 800358e:	6011      	str	r1, [r2, #0]
 8003590:	e79a      	b.n	80034c8 <_strtol_l.constprop.0+0x18>
 8003592:	2430      	movs	r4, #48	; 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1b5      	bne.n	8003504 <_strtol_l.constprop.0+0x54>
 8003598:	2308      	movs	r3, #8
 800359a:	e7b3      	b.n	8003504 <_strtol_l.constprop.0+0x54>
 800359c:	2c30      	cmp	r4, #48	; 0x30
 800359e:	d0a9      	beq.n	80034f4 <_strtol_l.constprop.0+0x44>
 80035a0:	230a      	movs	r3, #10
 80035a2:	e7af      	b.n	8003504 <_strtol_l.constprop.0+0x54>
 80035a4:	08003ea5 	.word	0x08003ea5

080035a8 <_strtol_r>:
 80035a8:	f7ff bf82 	b.w	80034b0 <_strtol_l.constprop.0>

080035ac <_strtoul_l.constprop.0>:
 80035ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035b0:	4686      	mov	lr, r0
 80035b2:	460d      	mov	r5, r1
 80035b4:	4f35      	ldr	r7, [pc, #212]	; (800368c <_strtoul_l.constprop.0+0xe0>)
 80035b6:	4628      	mov	r0, r5
 80035b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035bc:	5de6      	ldrb	r6, [r4, r7]
 80035be:	f016 0608 	ands.w	r6, r6, #8
 80035c2:	d1f8      	bne.n	80035b6 <_strtoul_l.constprop.0+0xa>
 80035c4:	2c2d      	cmp	r4, #45	; 0x2d
 80035c6:	d12f      	bne.n	8003628 <_strtoul_l.constprop.0+0x7c>
 80035c8:	2601      	movs	r6, #1
 80035ca:	782c      	ldrb	r4, [r5, #0]
 80035cc:	1c85      	adds	r5, r0, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d057      	beq.n	8003682 <_strtoul_l.constprop.0+0xd6>
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d109      	bne.n	80035ea <_strtoul_l.constprop.0+0x3e>
 80035d6:	2c30      	cmp	r4, #48	; 0x30
 80035d8:	d107      	bne.n	80035ea <_strtoul_l.constprop.0+0x3e>
 80035da:	7828      	ldrb	r0, [r5, #0]
 80035dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80035e0:	2858      	cmp	r0, #88	; 0x58
 80035e2:	d149      	bne.n	8003678 <_strtoul_l.constprop.0+0xcc>
 80035e4:	2310      	movs	r3, #16
 80035e6:	786c      	ldrb	r4, [r5, #1]
 80035e8:	3502      	adds	r5, #2
 80035ea:	f04f 38ff 	mov.w	r8, #4294967295
 80035ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80035f2:	2700      	movs	r7, #0
 80035f4:	fb03 f908 	mul.w	r9, r3, r8
 80035f8:	4638      	mov	r0, r7
 80035fa:	ea6f 0909 	mvn.w	r9, r9
 80035fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003602:	f1bc 0f09 	cmp.w	ip, #9
 8003606:	d814      	bhi.n	8003632 <_strtoul_l.constprop.0+0x86>
 8003608:	4664      	mov	r4, ip
 800360a:	42a3      	cmp	r3, r4
 800360c:	dd22      	ble.n	8003654 <_strtoul_l.constprop.0+0xa8>
 800360e:	2f00      	cmp	r7, #0
 8003610:	db1d      	blt.n	800364e <_strtoul_l.constprop.0+0xa2>
 8003612:	4580      	cmp	r8, r0
 8003614:	d31b      	bcc.n	800364e <_strtoul_l.constprop.0+0xa2>
 8003616:	d101      	bne.n	800361c <_strtoul_l.constprop.0+0x70>
 8003618:	45a1      	cmp	r9, r4
 800361a:	db18      	blt.n	800364e <_strtoul_l.constprop.0+0xa2>
 800361c:	2701      	movs	r7, #1
 800361e:	fb00 4003 	mla	r0, r0, r3, r4
 8003622:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003626:	e7ea      	b.n	80035fe <_strtoul_l.constprop.0+0x52>
 8003628:	2c2b      	cmp	r4, #43	; 0x2b
 800362a:	bf04      	itt	eq
 800362c:	782c      	ldrbeq	r4, [r5, #0]
 800362e:	1c85      	addeq	r5, r0, #2
 8003630:	e7cd      	b.n	80035ce <_strtoul_l.constprop.0+0x22>
 8003632:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003636:	f1bc 0f19 	cmp.w	ip, #25
 800363a:	d801      	bhi.n	8003640 <_strtoul_l.constprop.0+0x94>
 800363c:	3c37      	subs	r4, #55	; 0x37
 800363e:	e7e4      	b.n	800360a <_strtoul_l.constprop.0+0x5e>
 8003640:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003644:	f1bc 0f19 	cmp.w	ip, #25
 8003648:	d804      	bhi.n	8003654 <_strtoul_l.constprop.0+0xa8>
 800364a:	3c57      	subs	r4, #87	; 0x57
 800364c:	e7dd      	b.n	800360a <_strtoul_l.constprop.0+0x5e>
 800364e:	f04f 37ff 	mov.w	r7, #4294967295
 8003652:	e7e6      	b.n	8003622 <_strtoul_l.constprop.0+0x76>
 8003654:	2f00      	cmp	r7, #0
 8003656:	da07      	bge.n	8003668 <_strtoul_l.constprop.0+0xbc>
 8003658:	2322      	movs	r3, #34	; 0x22
 800365a:	f04f 30ff 	mov.w	r0, #4294967295
 800365e:	f8ce 3000 	str.w	r3, [lr]
 8003662:	b932      	cbnz	r2, 8003672 <_strtoul_l.constprop.0+0xc6>
 8003664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003668:	b106      	cbz	r6, 800366c <_strtoul_l.constprop.0+0xc0>
 800366a:	4240      	negs	r0, r0
 800366c:	2a00      	cmp	r2, #0
 800366e:	d0f9      	beq.n	8003664 <_strtoul_l.constprop.0+0xb8>
 8003670:	b107      	cbz	r7, 8003674 <_strtoul_l.constprop.0+0xc8>
 8003672:	1e69      	subs	r1, r5, #1
 8003674:	6011      	str	r1, [r2, #0]
 8003676:	e7f5      	b.n	8003664 <_strtoul_l.constprop.0+0xb8>
 8003678:	2430      	movs	r4, #48	; 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1b5      	bne.n	80035ea <_strtoul_l.constprop.0+0x3e>
 800367e:	2308      	movs	r3, #8
 8003680:	e7b3      	b.n	80035ea <_strtoul_l.constprop.0+0x3e>
 8003682:	2c30      	cmp	r4, #48	; 0x30
 8003684:	d0a9      	beq.n	80035da <_strtoul_l.constprop.0+0x2e>
 8003686:	230a      	movs	r3, #10
 8003688:	e7af      	b.n	80035ea <_strtoul_l.constprop.0+0x3e>
 800368a:	bf00      	nop
 800368c:	08003ea5 	.word	0x08003ea5

08003690 <_strtoul_r>:
 8003690:	f7ff bf8c 	b.w	80035ac <_strtoul_l.constprop.0>

08003694 <__submore>:
 8003694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003698:	460c      	mov	r4, r1
 800369a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800369c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036a0:	4299      	cmp	r1, r3
 80036a2:	d11b      	bne.n	80036dc <__submore+0x48>
 80036a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036a8:	f000 f8cc 	bl	8003844 <_malloc_r>
 80036ac:	b918      	cbnz	r0, 80036b6 <__submore+0x22>
 80036ae:	f04f 30ff 	mov.w	r0, #4294967295
 80036b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80036bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80036c0:	6360      	str	r0, [r4, #52]	; 0x34
 80036c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80036c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80036ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80036ce:	7043      	strb	r3, [r0, #1]
 80036d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80036d4:	7003      	strb	r3, [r0, #0]
 80036d6:	6020      	str	r0, [r4, #0]
 80036d8:	2000      	movs	r0, #0
 80036da:	e7ea      	b.n	80036b2 <__submore+0x1e>
 80036dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80036de:	0077      	lsls	r7, r6, #1
 80036e0:	463a      	mov	r2, r7
 80036e2:	f000 f923 	bl	800392c <_realloc_r>
 80036e6:	4605      	mov	r5, r0
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d0e0      	beq.n	80036ae <__submore+0x1a>
 80036ec:	eb00 0806 	add.w	r8, r0, r6
 80036f0:	4601      	mov	r1, r0
 80036f2:	4632      	mov	r2, r6
 80036f4:	4640      	mov	r0, r8
 80036f6:	f000 f815 	bl	8003724 <memcpy>
 80036fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80036fe:	f8c4 8000 	str.w	r8, [r4]
 8003702:	e7e9      	b.n	80036d8 <__submore+0x44>

08003704 <__retarget_lock_acquire_recursive>:
 8003704:	4770      	bx	lr

08003706 <__retarget_lock_release_recursive>:
 8003706:	4770      	bx	lr

08003708 <memchr>:
 8003708:	4603      	mov	r3, r0
 800370a:	b510      	push	{r4, lr}
 800370c:	b2c9      	uxtb	r1, r1
 800370e:	4402      	add	r2, r0
 8003710:	4293      	cmp	r3, r2
 8003712:	4618      	mov	r0, r3
 8003714:	d101      	bne.n	800371a <memchr+0x12>
 8003716:	2000      	movs	r0, #0
 8003718:	e003      	b.n	8003722 <memchr+0x1a>
 800371a:	7804      	ldrb	r4, [r0, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	428c      	cmp	r4, r1
 8003720:	d1f6      	bne.n	8003710 <memchr+0x8>
 8003722:	bd10      	pop	{r4, pc}

08003724 <memcpy>:
 8003724:	440a      	add	r2, r1
 8003726:	4291      	cmp	r1, r2
 8003728:	f100 33ff 	add.w	r3, r0, #4294967295
 800372c:	d100      	bne.n	8003730 <memcpy+0xc>
 800372e:	4770      	bx	lr
 8003730:	b510      	push	{r4, lr}
 8003732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003736:	4291      	cmp	r1, r2
 8003738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800373c:	d1f9      	bne.n	8003732 <memcpy+0xe>
 800373e:	bd10      	pop	{r4, pc}

08003740 <memmove>:
 8003740:	4288      	cmp	r0, r1
 8003742:	b510      	push	{r4, lr}
 8003744:	eb01 0402 	add.w	r4, r1, r2
 8003748:	d902      	bls.n	8003750 <memmove+0x10>
 800374a:	4284      	cmp	r4, r0
 800374c:	4623      	mov	r3, r4
 800374e:	d807      	bhi.n	8003760 <memmove+0x20>
 8003750:	1e43      	subs	r3, r0, #1
 8003752:	42a1      	cmp	r1, r4
 8003754:	d008      	beq.n	8003768 <memmove+0x28>
 8003756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800375a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800375e:	e7f8      	b.n	8003752 <memmove+0x12>
 8003760:	4601      	mov	r1, r0
 8003762:	4402      	add	r2, r0
 8003764:	428a      	cmp	r2, r1
 8003766:	d100      	bne.n	800376a <memmove+0x2a>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800376e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003772:	e7f7      	b.n	8003764 <memmove+0x24>

08003774 <_free_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4605      	mov	r5, r0
 8003778:	2900      	cmp	r1, #0
 800377a:	d040      	beq.n	80037fe <_free_r+0x8a>
 800377c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003780:	1f0c      	subs	r4, r1, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	bfb8      	it	lt
 8003786:	18e4      	addlt	r4, r4, r3
 8003788:	f000 f910 	bl	80039ac <__malloc_lock>
 800378c:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <_free_r+0x8c>)
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	b933      	cbnz	r3, 80037a0 <_free_r+0x2c>
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6014      	str	r4, [r2, #0]
 8003796:	4628      	mov	r0, r5
 8003798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379c:	f000 b90c 	b.w	80039b8 <__malloc_unlock>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d908      	bls.n	80037b6 <_free_r+0x42>
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	1821      	adds	r1, r4, r0
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf01      	itttt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	1809      	addeq	r1, r1, r0
 80037b2:	6021      	streq	r1, [r4, #0]
 80037b4:	e7ed      	b.n	8003792 <_free_r+0x1e>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x4c>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x42>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1850      	adds	r0, r2, r1
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x6c>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	4401      	add	r1, r0
 80037cc:	1850      	adds	r0, r2, r1
 80037ce:	4283      	cmp	r3, r0
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1e0      	bne.n	8003796 <_free_r+0x22>
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4401      	add	r1, r0
 80037da:	6011      	str	r1, [r2, #0]
 80037dc:	6053      	str	r3, [r2, #4]
 80037de:	e7da      	b.n	8003796 <_free_r+0x22>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x74>
 80037e2:	230c      	movs	r3, #12
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	e7d6      	b.n	8003796 <_free_r+0x22>
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	1821      	adds	r1, r4, r0
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf01      	itttt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	1809      	addeq	r1, r1, r0
 80037f6:	6021      	streq	r1, [r4, #0]
 80037f8:	6063      	str	r3, [r4, #4]
 80037fa:	6054      	str	r4, [r2, #4]
 80037fc:	e7cb      	b.n	8003796 <_free_r+0x22>
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	20000244 	.word	0x20000244

08003804 <sbrk_aligned>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4e0e      	ldr	r6, [pc, #56]	; (8003840 <sbrk_aligned+0x3c>)
 8003808:	460c      	mov	r4, r1
 800380a:	6831      	ldr	r1, [r6, #0]
 800380c:	4605      	mov	r5, r0
 800380e:	b911      	cbnz	r1, 8003816 <sbrk_aligned+0x12>
 8003810:	f000 f8bc 	bl	800398c <_sbrk_r>
 8003814:	6030      	str	r0, [r6, #0]
 8003816:	4621      	mov	r1, r4
 8003818:	4628      	mov	r0, r5
 800381a:	f000 f8b7 	bl	800398c <_sbrk_r>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	d00a      	beq.n	8003838 <sbrk_aligned+0x34>
 8003822:	1cc4      	adds	r4, r0, #3
 8003824:	f024 0403 	bic.w	r4, r4, #3
 8003828:	42a0      	cmp	r0, r4
 800382a:	d007      	beq.n	800383c <sbrk_aligned+0x38>
 800382c:	1a21      	subs	r1, r4, r0
 800382e:	4628      	mov	r0, r5
 8003830:	f000 f8ac 	bl	800398c <_sbrk_r>
 8003834:	3001      	adds	r0, #1
 8003836:	d101      	bne.n	800383c <sbrk_aligned+0x38>
 8003838:	f04f 34ff 	mov.w	r4, #4294967295
 800383c:	4620      	mov	r0, r4
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	20000248 	.word	0x20000248

08003844 <_malloc_r>:
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	1ccd      	adds	r5, r1, #3
 800384a:	f025 0503 	bic.w	r5, r5, #3
 800384e:	3508      	adds	r5, #8
 8003850:	2d0c      	cmp	r5, #12
 8003852:	bf38      	it	cc
 8003854:	250c      	movcc	r5, #12
 8003856:	2d00      	cmp	r5, #0
 8003858:	4607      	mov	r7, r0
 800385a:	db01      	blt.n	8003860 <_malloc_r+0x1c>
 800385c:	42a9      	cmp	r1, r5
 800385e:	d905      	bls.n	800386c <_malloc_r+0x28>
 8003860:	230c      	movs	r3, #12
 8003862:	2600      	movs	r6, #0
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4630      	mov	r0, r6
 8003868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800386c:	4e2e      	ldr	r6, [pc, #184]	; (8003928 <_malloc_r+0xe4>)
 800386e:	f000 f89d 	bl	80039ac <__malloc_lock>
 8003872:	6833      	ldr	r3, [r6, #0]
 8003874:	461c      	mov	r4, r3
 8003876:	bb34      	cbnz	r4, 80038c6 <_malloc_r+0x82>
 8003878:	4629      	mov	r1, r5
 800387a:	4638      	mov	r0, r7
 800387c:	f7ff ffc2 	bl	8003804 <sbrk_aligned>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	4604      	mov	r4, r0
 8003884:	d14d      	bne.n	8003922 <_malloc_r+0xde>
 8003886:	6834      	ldr	r4, [r6, #0]
 8003888:	4626      	mov	r6, r4
 800388a:	2e00      	cmp	r6, #0
 800388c:	d140      	bne.n	8003910 <_malloc_r+0xcc>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	4631      	mov	r1, r6
 8003892:	4638      	mov	r0, r7
 8003894:	eb04 0803 	add.w	r8, r4, r3
 8003898:	f000 f878 	bl	800398c <_sbrk_r>
 800389c:	4580      	cmp	r8, r0
 800389e:	d13a      	bne.n	8003916 <_malloc_r+0xd2>
 80038a0:	6821      	ldr	r1, [r4, #0]
 80038a2:	3503      	adds	r5, #3
 80038a4:	1a6d      	subs	r5, r5, r1
 80038a6:	f025 0503 	bic.w	r5, r5, #3
 80038aa:	3508      	adds	r5, #8
 80038ac:	2d0c      	cmp	r5, #12
 80038ae:	bf38      	it	cc
 80038b0:	250c      	movcc	r5, #12
 80038b2:	4638      	mov	r0, r7
 80038b4:	4629      	mov	r1, r5
 80038b6:	f7ff ffa5 	bl	8003804 <sbrk_aligned>
 80038ba:	3001      	adds	r0, #1
 80038bc:	d02b      	beq.n	8003916 <_malloc_r+0xd2>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	442b      	add	r3, r5
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	e00e      	b.n	80038e4 <_malloc_r+0xa0>
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	1b52      	subs	r2, r2, r5
 80038ca:	d41e      	bmi.n	800390a <_malloc_r+0xc6>
 80038cc:	2a0b      	cmp	r2, #11
 80038ce:	d916      	bls.n	80038fe <_malloc_r+0xba>
 80038d0:	1961      	adds	r1, r4, r5
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	6025      	str	r5, [r4, #0]
 80038d6:	bf18      	it	ne
 80038d8:	6059      	strne	r1, [r3, #4]
 80038da:	6863      	ldr	r3, [r4, #4]
 80038dc:	bf08      	it	eq
 80038de:	6031      	streq	r1, [r6, #0]
 80038e0:	5162      	str	r2, [r4, r5]
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	4638      	mov	r0, r7
 80038e6:	f104 060b 	add.w	r6, r4, #11
 80038ea:	f000 f865 	bl	80039b8 <__malloc_unlock>
 80038ee:	f026 0607 	bic.w	r6, r6, #7
 80038f2:	1d23      	adds	r3, r4, #4
 80038f4:	1af2      	subs	r2, r6, r3
 80038f6:	d0b6      	beq.n	8003866 <_malloc_r+0x22>
 80038f8:	1b9b      	subs	r3, r3, r6
 80038fa:	50a3      	str	r3, [r4, r2]
 80038fc:	e7b3      	b.n	8003866 <_malloc_r+0x22>
 80038fe:	6862      	ldr	r2, [r4, #4]
 8003900:	42a3      	cmp	r3, r4
 8003902:	bf0c      	ite	eq
 8003904:	6032      	streq	r2, [r6, #0]
 8003906:	605a      	strne	r2, [r3, #4]
 8003908:	e7ec      	b.n	80038e4 <_malloc_r+0xa0>
 800390a:	4623      	mov	r3, r4
 800390c:	6864      	ldr	r4, [r4, #4]
 800390e:	e7b2      	b.n	8003876 <_malloc_r+0x32>
 8003910:	4634      	mov	r4, r6
 8003912:	6876      	ldr	r6, [r6, #4]
 8003914:	e7b9      	b.n	800388a <_malloc_r+0x46>
 8003916:	230c      	movs	r3, #12
 8003918:	4638      	mov	r0, r7
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	f000 f84c 	bl	80039b8 <__malloc_unlock>
 8003920:	e7a1      	b.n	8003866 <_malloc_r+0x22>
 8003922:	6025      	str	r5, [r4, #0]
 8003924:	e7de      	b.n	80038e4 <_malloc_r+0xa0>
 8003926:	bf00      	nop
 8003928:	20000244 	.word	0x20000244

0800392c <_realloc_r>:
 800392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003930:	4680      	mov	r8, r0
 8003932:	4614      	mov	r4, r2
 8003934:	460e      	mov	r6, r1
 8003936:	b921      	cbnz	r1, 8003942 <_realloc_r+0x16>
 8003938:	4611      	mov	r1, r2
 800393a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800393e:	f7ff bf81 	b.w	8003844 <_malloc_r>
 8003942:	b92a      	cbnz	r2, 8003950 <_realloc_r+0x24>
 8003944:	f7ff ff16 	bl	8003774 <_free_r>
 8003948:	4625      	mov	r5, r4
 800394a:	4628      	mov	r0, r5
 800394c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003950:	f000 f838 	bl	80039c4 <_malloc_usable_size_r>
 8003954:	4284      	cmp	r4, r0
 8003956:	4607      	mov	r7, r0
 8003958:	d802      	bhi.n	8003960 <_realloc_r+0x34>
 800395a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800395e:	d812      	bhi.n	8003986 <_realloc_r+0x5a>
 8003960:	4621      	mov	r1, r4
 8003962:	4640      	mov	r0, r8
 8003964:	f7ff ff6e 	bl	8003844 <_malloc_r>
 8003968:	4605      	mov	r5, r0
 800396a:	2800      	cmp	r0, #0
 800396c:	d0ed      	beq.n	800394a <_realloc_r+0x1e>
 800396e:	42bc      	cmp	r4, r7
 8003970:	4622      	mov	r2, r4
 8003972:	4631      	mov	r1, r6
 8003974:	bf28      	it	cs
 8003976:	463a      	movcs	r2, r7
 8003978:	f7ff fed4 	bl	8003724 <memcpy>
 800397c:	4631      	mov	r1, r6
 800397e:	4640      	mov	r0, r8
 8003980:	f7ff fef8 	bl	8003774 <_free_r>
 8003984:	e7e1      	b.n	800394a <_realloc_r+0x1e>
 8003986:	4635      	mov	r5, r6
 8003988:	e7df      	b.n	800394a <_realloc_r+0x1e>
	...

0800398c <_sbrk_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	2300      	movs	r3, #0
 8003990:	4d05      	ldr	r5, [pc, #20]	; (80039a8 <_sbrk_r+0x1c>)
 8003992:	4604      	mov	r4, r0
 8003994:	4608      	mov	r0, r1
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	f7fc ff78 	bl	800088c <_sbrk>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_sbrk_r+0x1a>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_sbrk_r+0x1a>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	2000023c 	.word	0x2000023c

080039ac <__malloc_lock>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__malloc_lock+0x8>)
 80039ae:	f7ff bea9 	b.w	8003704 <__retarget_lock_acquire_recursive>
 80039b2:	bf00      	nop
 80039b4:	20000240 	.word	0x20000240

080039b8 <__malloc_unlock>:
 80039b8:	4801      	ldr	r0, [pc, #4]	; (80039c0 <__malloc_unlock+0x8>)
 80039ba:	f7ff bea4 	b.w	8003706 <__retarget_lock_release_recursive>
 80039be:	bf00      	nop
 80039c0:	20000240 	.word	0x20000240

080039c4 <_malloc_usable_size_r>:
 80039c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c8:	1f18      	subs	r0, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bfbc      	itt	lt
 80039ce:	580b      	ldrlt	r3, [r1, r0]
 80039d0:	18c0      	addlt	r0, r0, r3
 80039d2:	4770      	bx	lr

080039d4 <_init>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr

080039e0 <_fini>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	bf00      	nop
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr
